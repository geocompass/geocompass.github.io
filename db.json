{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1565786777000},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1565786777000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1565786777000},{"_id":"themes/landscape/README.md","hash":"7ce0e694c479f83448ac581f408363379ebefda8","modified":1565786777000},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1565786777000},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1565786777000},{"_id":"source/_posts/robosat-buildings-training-step-by-step.md","hash":"de21fc3a38ed9659bf464df83cff2142eca82711","modified":1566130320000},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1565786777000},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1565786777000},{"_id":"source/_posts/first-lgh.md","hash":"1891f70406049e8bd39ee2cba8d29ea4728a4d45","modified":1565879668000},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1565786777000},{"_id":"source/_posts/first-post.md","hash":"66a96f1de416856c0145ea0e04c8a0d1df4e05b6","modified":1565786777000},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1565786777000},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1565786777000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1565786777000},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1565786777000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1565786777000},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1565786777000},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1565786777000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1565786777000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1565786777000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1565786777000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1565786777000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1565786777000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1565786777000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1565786777000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1565786777000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1565786777000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1565786777000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1565786777000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1565786777000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1565786777000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1565786777000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1565786777000},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1565786777000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1565786777000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1565786777000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1565786777000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1565786777000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1565786777000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1565786777000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1565786777000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1565786777000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1565786777000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1565786777000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1565786777000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1565786777000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1565786777000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1565786777000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1565786777000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1565786777000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1565786777000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1565786777000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1565786777000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1565786777000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1565786777000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1565786777000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1565786777000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1565786777000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1565786777000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1565786777000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1565786777000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1565786777000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1565786777000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1565786777000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1565786777000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1565786777000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1565786777000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1565786777000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1565786777000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1565786777000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1565786777000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1565786777000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1565786777000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1565786777000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1565786777000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1565786777000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1565786777000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1565786777000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1565786777000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1565786777000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1565786777000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1565786777000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1565786777000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1565786777000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1565786777000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1565786777000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1565786777000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1565786777000},{"_id":"public/2019/08/15/first-lgh/index.html","hash":"1da095db9f44a1643dfc8cb3c16e8b8d1d280aa8","modified":1566130557012},{"_id":"public/2019/08/14/hello-world/index.html","hash":"3effa02a7869c90d3b18a41efdc90c47817763a7","modified":1566130557012},{"_id":"public/2019/08/14/first-post/index.html","hash":"a5a3c00276f1657268ca8132bfa6643a984a9d6c","modified":1566130557015},{"_id":"public/archives/index.html","hash":"93be611a99fc18e1d91454931adfa81664abccf6","modified":1566130557015},{"_id":"public/archives/2019/index.html","hash":"1b8501bd31ae99bfdbecdcfcb138d274a22200e4","modified":1566130557015},{"_id":"public/archives/2019/08/index.html","hash":"bd2efd24dfc74b2c6fdaeb2ad674b22c5a38df00","modified":1566130557015},{"_id":"public/2019/08/17/robosat-buildings-training-step-by-step/index.html","hash":"1cf53c8ca068a943cdd78e2e15dcd1f896fde33b","modified":1566130557015},{"_id":"public/index.html","hash":"613ea65f199c9a01ef053011d0e0520c2abe439c","modified":1566130557015},{"_id":"public/tags/大数据/index.html","hash":"b072089d9390eed4cda86c9c62d93c05c104a931","modified":1566130557018},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1566130557018},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1566130557018},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1566130557018},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1566130557018},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1566130557018},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1566130557018},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1566130557018},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1566130557018},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1566130557018},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1566130557949},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1566130557950},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1566130557952},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1566130557953},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1566130557953},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1566130557953},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1566130557953},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1566130557953},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1566130557953},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1566130557953},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1566130557953},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1566130557953},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1566130557956},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1566130557956}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"手把手教你用Mapbox的RoboSat基于深度学习自动提取建筑物","date":"2019-08-17T14:13:01.000Z","_content":"\n原文链接：[https://github.com/geocompass/robosat_buildings_training](https://github.com/geocompass/robosat_buildings_training)\n\n​    本文介绍了如何使用 [mapbox/robosat](https://github.com/mapbox/robosat) 工具，基于深度学习训练，从常规的遥感影像瓦片地图服务中自动提取建筑物。包括系统准备工作、数据准备工作和训练与建模。通过根据文章的描述，可以完成训练任务。\n\n​    参考文章：[daniel-j-h : RoboSat ❤️ Tanzania](https://www.openstreetmap.org/user/daniel-j-h/diary/44321)\n\n\n- [手把手教你如何使用 RoboSat 自动提取建筑物](#robosat_buildings_training)\n    - [1. 系统准备工作](#1-系统准备工作)\n        - [1.1 设备及系统](#11-设备及系统)\n        - [1.2 安装 Docker](#12-安装-docker)\n        - [1.3 在 Docker 中安装 Robosat](#13-在-docker-中安装-robosat)\n    - [2. 数据准备工作](#2-数据准备工作)\n        - [2.1 建筑物轮廓矢量数据](#21-建筑物轮廓矢量数据)\n        - [2.2 获取建筑物轮廓geojson数据](#22-获取建筑物轮廓geojson数据)\n        - [2.3 提取训练区覆盖的瓦片行列号](#23-提取训练区覆盖的瓦片行列号)\n        - [2.4 下载训练区遥感影像瓦片](#24-下载训练区遥感影像瓦片)\n        - [2.5 制作训练区矢量数据蒙版标记](#25-制作训练区矢量数据蒙版标记)\n    - [3. 训练和建模](#3-训练和建模)\n        - [3.1 分配训练数据、验证数据、评估数据](#31-分配训练数据验证数据评估数据)\n        - [3.2 权重计算](#32-权重计算)\n        - [3.3 开始训练](#33-开始训练)\n    - [4. 预测](#4-预测)\n        - [4.1 准备预测区域数据](#41-准备预测区域数据)\n        - [4.2 预测待提取建筑物概率](#42-预测待提取建筑物概率)\n        - [4.3 预测概率转换为建筑物掩模](#43-预测概率转换为建筑物掩模)\n        - [4.4 建筑物掩模转换为geojson](#44-建筑物掩模转换为geojson)\n        - [4.5 合并掩模分割的 geojson](#45-合并掩模分割的-geojson)\n\n\n\n## 1. 系统准备工作\n### 1.1 设备及系统\n> 准备一台安装 Linux 或 MacOS 系统的机器，可以是 CentOS、Ubuntu 或 MacOS。机器可以是实体机，也可以是 VMware 虚拟机。\n\n### 1.2 安装 Docker\n> 在机器中安装Docker，不建议是Windows版Docker。[MacOS安装Docker](https://www.runoob.com/docker/macos-docker-install.html) ，[CentOS安装Docker](https://www.runoob.com/docker/centos-docker-install.html)\n\n### 1.3 在 Docker 中安装 Robosat\n>  Robosat 的 [Docker Hub](https://hub.docker.com/r/mapbox/robosat)。\n\n​    可以使用两种方式安装 Robosat：\n- 使用 CPU 容器：\n```shell\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu --help\n```\n- 使用 GPU 容器（主机上需要 [nvidia-docker](https://github.com/NVIDIA/nvidia-docker)）：\n```shell\ndocker run --runtime=nvidia -it --rm -v $PWD:/data --ipc=host mapbox/robosat:latest-gpu train --model /data/model.toml --dataset /data/dataset.toml --workers 4\n```\n\n\n\n## 2. 数据准备工作\n\n### 2.1 建筑物轮廓矢量数据\n​    已有的建筑物轮廓矢量数据用来作为建筑物提取的训练数据源。可以有两种方式获取：\n- OSM 数据源，可以在 [geofabrik](http://download.geofabrik.de/) 获取，通过 [osmium](https://github.com/osmcode/osmium-tool) 和 [robosat](https://github.com/mapbox/robosat) 工具[进行处理](https://www.openstreetmap.org/user/daniel-j-h/diary/44321)。\n- 自有数据源。通过 [QGIS](https://qgis.org/en/site/) 或 ArcMap 等工具，加载遥感影像底图，描述的建筑物轮廓 Shapefile 数据。\n\n\n\n​    **本文使用第二种数据来源，并已[开源数据源](https://github.com/geocompass/robosat_buildings_training/tree/master/shp_data)，开源的矢量数据覆盖厦门核心区。**\n\n​    **考虑到使用个人电脑没有 CUDA 加速训练成本较高，本文使用 [buia_xiamen_min_shp](https://github.com/geocompass/robosat_buildings_training/blob/master/shp_data/buia_xiamen_min_shp.zip)，包含厦门核心区部分区域，共5679个建筑物轮廓。在Docker配置为 处理器(`CPU`) 4核、内存(`RAM`)16GB、交换内存(`Swap`)3GB时，训练时间大约2.5小时。**\n\n\n\n\n![训练区矢量数据预览](https://github.com/geocompass/robosat_buildings_training/blob/master/img/buia_xiamen_preview.jpg)\n\n### 2.2 获取建筑物轮廓geojson数据\n​    通过在线工具 [mapshaper](https://mapshaper.org/)，将 shapefile 数据转换为 geojson 数据。\n\n### 2.3 提取训练区覆盖的瓦片行列号\n​    使用 robosat 的 [cover](https://github.com/mapbox/robosat#rs-cover) 命令，即可获取当前训练区矢量数据覆盖的瓦片行列号，并使用 csv 文件存储。\n```shell\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu cover  --zoom 18 /data/buildings.json /data/buildings.tiles\n```\n   `cover`  命令的参数介绍：\n\n> usage: `./rs cover [-h] --zoom ZOOM features out`\n>\n> - positional arguments:\n>   - `features`     path to GeoJSON features\n>   - `out`         path to csv file to store tiles in\n> - optional arguments:\n>   - `-h`, --help   show this help message and exit\n>   - `--zoom ZOOM`  zoom level of tiles (default: None)\n\n这里是获取在 18 级下训练区覆盖的瓦片行列号。18 级是国内地图通用的最大级别，如果有国外更清晰数据源，可设置更高地图级别。\n\n​    cover 工具对训练区矢量数据计算的瓦片行列号使用的是通用的 WGS84->Web 墨卡托投影坐标系。\n\n> 小知识：\n>\n> -  `$PWD:/data` 是将当前路径映射为docker中的 `/data` 路径。\n> -  在新版 robosat 的 docker 安装包中，将 `./rs` 命令行工具对应为`docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu` 命令。\n> -  docker 版 robosat ，以命令行方式执行，无法生成类似 nginx 的 docker 服务，所以执行完成后立即销毁了 docker 的 container。\n\n### 2.4 下载训练区遥感影像瓦片\n\n​    使用 robosat 的 [download](https://github.com/mapbox/robosat#rs-download) 工具，即可获取当前训练区矢量数据覆盖的遥感影像，下载的瓦片通过 2.3 节中的**buildings.tiles** 确定。\n\n```shell\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu download http://ditu.google.cn/maps/vt/lyrs=s&x={x}&y={y}&z={z} /data/buildings.tiles /data/tiles\n```\n\n​    `download` 命令的参数介绍：\n\n> usage: `./rs download [-h] [--ext EXT] [--rate RATE] url tiles out`\n>\n> - positional arguments:\n>   - `url`  endpoint with {z}/{x}/{y} variables to fetch image tiles from\n>   - `tiles`  path to .csv tiles file\n>   - `out`  path to slippy map directory for storing tiles\n> - optional arguments:\n>   - `-h`, --help   show this help message and exit\n>   - `--ext EXT` file format to save images in (default: webp)\n>   - `--rate RATE` rate limit in max. requests per second (default: 10)\n\n​    这里介绍几个常用的 Web 墨卡托投影的（WGS84坐标系）遥感影像数据源：\n\n> - [谷歌地图CN影像](https://ditu.google.cn/)：http://ditu.google.cn/maps/vt/lyrs=s&x={x}&y={y}&z={z}\n> - [天地图影像](https://map.tianditu.gov.cn/)：https://t4.tianditu.gov.cn/DataServer?T=img_w&x={x}&y={y}&l={z}&tk=2ce94f67e58faa24beb7cb8a09780552\n> - [ArcGIS Online影像](https://server.arcgisonline.com/arcgis/rest/services/World_Imagery/MapServer?f=jsapi)：https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\n> - [MapBox影像](https://api.mapbox.com/styles/v1/mapbox/satellite-v9.html?title=true&access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4M29iazA2Z2gycXA4N2pmbDZmangifQ.-g_vE53SD2WrJ6tFX7QHmA#0.75/29.3/-124.8)：https://api.mapbox.com/v4/mapbox.satellite/{z}/{x}/{y}@2x.png?sku=101KOLcQaDwG1&access_token=[token]\n\n​    几种遥感影像数据源的比较：\n\n- 从访问速度来看，天地图>谷歌>ArcGIS>Mapbox。\n\n- 从遥感影像的质量来说，总体来说：\n  - 城市地区：谷歌=ArcGIS>天地图>Mapbox\n  - 农村地图：谷歌>天地图>ArcGIS>Mapbox\n- 层级覆盖：谷歌>天地图>ArcGIS>Mapbox\n\n​    不同影像数据源的质量不能一概而论，由于传感器不同、过境时间不同等因素，不同地区的影像数据源质量均不同，建议使用 QGIS 加载训练区位置的影像对比选择。\n\n### 2.5 制作训练区矢量数据蒙版标记\n\n​    使用 2.2 节中制作的 geojson 数据，通过 robosat 的 [rasterize](https://github.com/mapbox/robosat#rs-rasterize) 工具可制作训练区矢量数据的蒙版标记数据。蒙版标记数据与瓦片数据一一相对应，使用同样的 **buildings.tiles** 瓦片列表产生。\n\n```shell\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu rasterize --dataset /data/dataset-building.toml --zoom 18 --size 256 /data/buildings.json /data/buildings.tiles /data/masks\n```\n\n​    `rasterise` 命令的参数介绍：\n\n> usage: `./rs rasterize [-h] --dataset DATASET --zoom ZOOM [--size SIZE] features tiles out`\n>\n> - positional arguments:\n>   - `features` path to GeoJSON features file\n>   - `tiles` path to .csv tiles file\n>   - `out` directory to write converted images\n>\n> - optional arguments:\n>     `-h`, `--help` show this help message and exit\n>     `--dataset DATASET` path to dataset configuration file (default: None)\n>     `--zoom ZOOM`  zoom level of tiles (default: None)\n>     `--size SIZE` size of rasterized image tiles in pixels (default: 512)\n\n  这里使用到了 `dataset-building.toml` 配置文件，文件中配置了瓦片地图路径、分类方式、蒙版标记的颜色等信息。示例配置可以查看官方示例文件 [dataset-parking.toml](https://github.com/mapbox/robosat/blob/master/config/dataset-parking.toml) 。本训练中用到的 [dataset-building.toml](https://github.com/geocompass/robosat_buildings_training/dataset-building.toml) 的配置内容如下：\n\n```toml\n# Configuration related to a specific dataset.\n# For syntax see: https://github.com/toml-lang/toml#table-of-contents\n\n# Dataset specific common attributes.\n[common]\n\n  # The slippy map dataset's base directory.\n  dataset = '/Users/wucan/Document/robosat/tiles/'\n\n  # Human representation for classes.\n  classes = ['background', 'buildings']\n\n  # Color map for visualization and representing classes in masks.\n  # Note: available colors can be found in `robosat/colors.py`\n  colors  = ['denim', 'orange']\n```\n\n​    配置文档中，最重要的是配置 `dataset` 目录，也就是上一步中下载的遥感影像瓦片路径。制作的蒙版标记效果如下图。\n\n![mask](https://github.com/geocompass/robosat_buildings_training/blob/master/img/mask.gif)\n\n​    至此，训练和建模所需的瓦片和蒙版标记已经全部准备完，分别在 `tiles` 和 `masks` 目录中。\n\n\n\n## 3. 训练和建模\n\n### 3.1 分配训练数据、验证数据、评估数据\n\n​    RoboSat 分割模型是一个完全卷积的神经网络，需要将上一步准备好的数据集拆分为三部分，分别为`训练数据集` 、`验证数据集`、`评估数据集`，比例分别为80%、10%、10%。每一部分的数据集中，都包含影像瓦片和蒙版标记瓦片。\n\n- 训练数据集：a training dataset on which we train the model on\n- 验证数据集：a validation dataset on which we calculate metrics on after training\n- 评估数据集：a hold-out evaluation dataset if you want to do hyper-parameter tuning\n\n   将步骤 2 中的数据进行随机分配的过程非常简单：\n\n- 新建三个 csv 文件： `csv_training.tiles` 、`csv_validation.tiles`、 `csv_evaluation.tiles` \n- 将 `buildings.tiles` 中的瓦片列表随机按 80%、10%、10% 比例进行拷贝与粘贴。注意三个文件间的瓦片列表内容不能重复。\n\n​    使用 RoboSat 中的 [subset](https://github.com/mapbox/robosat#rs-subset) 命令，将 `tiles` 和 `masks` 中的瓦片和蒙版按照上面三个 csv 文件的瓦片列表分配进行组织影像瓦片和蒙版标记数据。\n\n```shell\n# 准备训练数据集\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/tiles/ /data/csv_training.tiles /data/dataset/training/images\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/masks/ /data/csv_training.tiles /data/dataset/training/labels\n# 准备验证数据集\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/tiles/ /data/csv_validation.tiles /data/dataset/validation/images\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/masks/ /data/csv_validation.tiles /data/dataset/validation/labels\n# 准备评估数据集\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/tiles/ /data/csv_evaluation.tiles /data/dataset/evaluation/images\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/masks/ /data/csv_evaluation.tiles /data/dataset/evaluation/labels\n```\n\n​    `subset` 命令的参数介绍：\n\n> usage: `./rs subset [-h] images tiles out`\n>\n> - positional arguments:\n>   - `images` directory to read slippy map image tiles from for filtering\n>   - ` tiles` csv to filter images by\n>   - `out` directory to save filtered images to\n>\n> - optional arguments:\n>   - `-h`, `--help`  show this help message and exit\n\n​    分类完成以后，将会生成 `/data/dataset` 目录，目录结构如下：\n\n```shell\ndataset\n|  training\n|  |  images\n|  |  labels\n|  validataion\n|  |  images\n|  |  labels\n|  evaluation\n|  |  images\n|  |  labels\n```\n\n### 3.2 权重计算\n\n​    因为前景和背景在数据集中分布不均，可以使用 RoboSat 中的 [weights](https://github.com/mapbox/robosat#rs-weights) 命令，在模型训练之前计算一下每个类的分布。\n\n```shell\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu weights --dataset /data/dataset-building-weights.toml\n```\n\n​    `weights` 命令的参数如下：\n\n> usage: `./rs weights [-h] --dataset DATASET`\n>\n> - optional arguments:\n>   - `-h`, `--help`  show this help message and exit\n>   - `--dataset DATASET` path to dataset configuration file (default: None)  \n\n​    这里，用到了`dataset-building-weights.toml` ，是将前面步骤中的 `dataset-building.toml` 瓦片路径修改为包含训练数据集 `dataset` 的路径。执行权重计算命令后，得到权重为：`values = [1.653415, 5.266637]` 。将其追加到 `dataset-building-weights.toml` 文件中，结果如下。\n\n```\n# Configuration related to a specific dataset.\n# For syntax see: https://github.com/toml-lang/toml#table-of-contents\n\n\n# Dataset specific common attributes.\n[common]\n\n  # The slippy map dataset's base directory.\n  dataset = '/data/dataset'\n\n  # Human representation for classes.\n  classes = ['background', 'buildings']\n\n  # Color map for visualization and representing classes in masks.\n  # Note: available colors can be found in `robosat/colors.py`\n  colors  = ['denim', 'orange']\n\n# Dataset specific class weights computes on the training data.\n# Needed by 'mIoU' and 'CrossEntropy' losses to deal with unbalanced classes.\n# Note: use `./rs weights -h` to compute these for new datasets.\n[weights]\n  values = [1.653415, 5.266637]\n```\n\n### 3.3 开始训练\n\n​    RoboSat 使用 [train](https://github.com/mapbox/robosat#rs-train) 命令进行训练。\n\n```shell\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu train --model /data/model-unet.toml --dataset /data/dataset-building-weights.toml\n```\n\n​    `train` 命令的参数如下：\n\n> usage: `./rs train [-h] --model MODEL --dataset DATASET [--checkpoint CHECKPOINT] [--resume RESUME] [--workers WORKERS]`\n>\n> - positional arguments:\n>   - `--model MODEL` path to model configuration file (default: None)\n>   - `--dataset DATASET` path to dataset configuration file (default: None)\n>\n> - optional arguments:\n>   - `-h`, `--help show this help message and exit\n>   - `--checkpoint CHECKPOINT`  path to a model checkpoint (to retrain) (default: None)\n>   - `--resume RESUME`   resume training or fine-tuning (if checkpoint)  (default: False)\n>   - `--workers WORKERS`  number of workers pre-processi ng images (default: 0)  \n\n​    这里多了一个配置文件 `model-unet.toml` ，这个配置文件主要用来配置训练过程中的参数，包括是否启用 CUDA 、训练批次大小、影像瓦片的像素大小、检查点存储路径等。官方给出了[示例配置文件](https://github.com/mapbox/robosat/blob/master/config/model-unet.toml)，根据本实验的情况做了修改如下，配置如下。\n\n```\n# Configuration related to a specific model.\n# For syntax see: https://github.com/toml-lang/toml#table-of-contents\n\n# Model specific common attributes.\n[common]\n\n  # Use CUDA for GPU acceleration.\n  cuda       = false\n\n  # Batch size for training.\n  batch_size = 2\n\n  # Image side size in pixels.\n  image_size = 256\n\n  # Directory where to save checkpoints to during training.\n  checkpoint = '/data/checkpoint/'\n\n\n# Model specific optimization parameters.\n[opt]\n\n  # Total number of epochs to train for.\n  epochs     = 10\n\n  # Learning rate for the optimizer.\n  lr         = 0.01\n\n  # Loss function name (e.g 'Lovasz', 'mIoU' or 'CrossEntropy')\n  loss = 'Lovasz'\n```\n\n​    RoboSat 会进行多次迭代训练，每次迭代训练都会保存检查点(checkpoint)和各项指标等。其中，训练日志例如：\n\n```shell\n--- Hyper Parameters on Dataset: /data/dataset ---\nBatch Size:\t 2\nImage Size:\t 256\nLearning Rate:\t 0.0001\nLoss function:\t Lovasz\nWeights :\t [1.644471, 5.409126]\n---\nEpoch: 1/10\nTrain    loss: 0.3190, mIoU: 0.410, buildings IoU: 0.017, MCC: -0.002\nValidate loss: 0.3171, mIoU: 0.405, buildings IoU: 0.000, MCC: nan\n\n...\n\nEpoch: 10/10\nTrain    loss: 0.2693, mIoU: 0.528, buildings IoU: 0.229, MCC: 0.330\nValidate loss: 0.2880, mIoU: 0.491, buildings IoU: 0.167, MCC: 0.262\n```\n\n​    可以选择最好的训练结果，保留其检查点( `checkpoint-***.pth` )，进入下一步 `predict`。一般来说，最后一个检查点效果最好。\n\n## 4. 预测\n\n### 4.1 准备预测区域数据\n\n​    RoboSat 仅支持从影像瓦片中提取建筑物，不支持从任意的 jpg 图片中提取。所以我们需要先准备预测区域的瓦片数据。\n\n​    通过 [geojson.io](http://geojson.io/) 绘制想要提取建筑物的范围，使用矩形框即可。将自动生成的 geojson 保存为 `predict_test.json`。\n\n​    通过 2.3 中的 `cover` 命令，获取待提取范围的瓦片列表 csv 文件，保存到 `buildings_predict.tiles` 文件中。\n\n```shell\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu cover  --zoom 18 /data/shp_data/predict_test.json /data/buildings_predict.tiles\n```\n\n​    使用 2.4 中的 `download` 命令，下载待提取范围的影像瓦片，保存到 `images_predict` 文件夹中。\n\n```shell\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu download https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x} /data/buildings_predict.tiles /data/images_predict\n```\n\n![预测区域的geojson](https://github.com/geocompass/robosat_buildings_training/blob/master/img/predict_region_geojson.jpg)\n\n### 4.2 预测待提取建筑物概率\n\n​    使用保存的检查点来（`checkpint`）预测图像中每个像素的分割概率，这些分割概率表示每个像素是建筑物还是背景的可能性，然后可以将这些概率转换为离散的分割掩模。\n\n​    通过 RoboSat 的 [predict](https://github.com/mapbox/robosat#rs-predict) 命令，将待预测区域的建筑物（ `images_predict` ）提取为分割概率（`predict_segmentation-probabilities`）。\n\n```shell\ndocker run -it -d --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu predict --tile_size 256 --model /data/model-unet.toml --dataset /data/dataset-building.toml --checkpoint /data/checkpoint/checkpoint-00010-of-00010.pth /data/images_predict /data/predict_segmentation-probabilities\n```\n\n​    `predict` 命令的参数如下：\n\n> usage: `./rs predict [-h] [--batch_size BATCH_SIZE] --checkpoint CHECKPOINT [--overlap OVERLAP] --tile_size TILE_SIZE [--workers WORKERS] --model MODEL --dataset DATASET tiles probs`\n>\n> - positional arguments:\n>   - `tiles`   directory to read slippy map image tiles from\n>   - `probs`  directory to save slippy map probability masks to\n>\n> - optional arguments:\n>   - `-h`, `--help  show this help message and exit\n>      `\n>   - `--batch_size BATCH_SIZE`  images per batch (default: 1)\n>   - `--checkpoint CHECKPOINT`  model checkpoint to load (default: None)\n>   - `--overlap OVERLAP` tile pixel overlap to predict on (default: 32)\n>   - `--tile_size TILE_SIZE` tile size for slippy map tiles (default: None)\n>   - `--workers WORKERS` number of workers pre-processing images (default: 0)\n>   - `--model MODEL` path to model configuration file (default: None)\n>   - `--dataset DATASET`  path to dataset configuration file (default: None)\n\n![预测建筑物提取概率结果](https://github.com/geocompass/robosat_buildings_training/blob/master/img/predit_probabilities.gif)\n\n### 4.3 预测概率转换为建筑物掩模\n\n​    通过 RoboSat 的 [masks](https://github.com/mapbox/robosat#rs-masks) 命令，将上一步中的建筑物预测概率结果转换为建筑物掩模（`masks`），保存到 `predict_segmentation-masks` 文件夹中。\n\n```shell\ndocker run -it -d --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu masks /data/predict_segmentation-masks /data/predict_segmentation-probabilities\n```\n\n> usage: `./rs masks [-h] [--weights WEIGHTS [WEIGHTS ...]] masks probs [probs ...]`\n>\n> - positional arguments:\n>   - `masks`  slippy map directory to save masks to\n>   - `probs`  slippy map directories with class probabilities\n>\n> - optional arguments:\n>   -  `-h`, `--help` show this help message and exit\n>   - `--weights WEIGHTS [WEIGHTS ...]`  weights for weighted average soft-voting (default:\n>                             None)\n\n![预测建筑物提取掩模结果](https://github.com/geocompass/robosat_buildings_training/blob/master/img/predit_masks.jpg)\n\n### 4.4 建筑物掩模转换为geojson\n\n​    通过 RoboSat 的 [features]() 命令，将上一步中的建筑物掩模转换为 geojson，保存在 `predict_geojson_features` 文件夹中。\n\n```shell\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu features /data/predict_segmentation-masks /data/predict_geojson_features\n```\n\n> usage: `./rs features [-h] --type {parking} --dataset DATASET masks out`\n>\n> - positional arguments:\n>   - `masks`  slippy map directory with segmentation masks\n>   - `out` path to GeoJSON file to store features in\n>\n> - optional arguments:\n>   -  `-h`, `--help`  show this help message and exit\n>   -  `--type {parking}` type of feature to extract (default: None)\n>   -  `--dataset DATASET`  path to dataset configuration file (default: None)\n\n（目前 `features` 命令中对 `--type` 设置有bug，无法正常执行。）\n\n### 4.5 合并掩模分割的 geojson\n\n​    通过 RoboSat 的 [merge](https://github.com/mapbox/robosat#rs-merge)  命令，将上一步中生成的分割的 geojson 要素进行合并，结果保存在 `predict_geojson_merge`文件夹中。\n\n```\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu features /data/predict_geojson /data/predict_geojson_merge\n```\n\n> usage: `./rs merge [-h] --threshold THRESHOLD features out`\n>\n> - positional arguments:\n>   -  `features` GeoJSON file to read features from\n>   -  `out` path to GeoJSON to save merged features to\n>\n> - optional arguments:\n>   -  `-h`, `--help` show this help message and exit\n>   -  `--threshold THRESHOLD` minimum distance to adjacent features, in m (default:\n>                             None)\n\n\n\n","source":"_posts/robosat-buildings-training-step-by-step.md","raw":"---\ntitle: 手把手教你用Mapbox的RoboSat基于深度学习自动提取建筑物\ndate: 2019-08-17 22:13:01\ntags: \"大数据\"\n---\n\n原文链接：[https://github.com/geocompass/robosat_buildings_training](https://github.com/geocompass/robosat_buildings_training)\n\n​    本文介绍了如何使用 [mapbox/robosat](https://github.com/mapbox/robosat) 工具，基于深度学习训练，从常规的遥感影像瓦片地图服务中自动提取建筑物。包括系统准备工作、数据准备工作和训练与建模。通过根据文章的描述，可以完成训练任务。\n\n​    参考文章：[daniel-j-h : RoboSat ❤️ Tanzania](https://www.openstreetmap.org/user/daniel-j-h/diary/44321)\n\n\n- [手把手教你如何使用 RoboSat 自动提取建筑物](#robosat_buildings_training)\n    - [1. 系统准备工作](#1-系统准备工作)\n        - [1.1 设备及系统](#11-设备及系统)\n        - [1.2 安装 Docker](#12-安装-docker)\n        - [1.3 在 Docker 中安装 Robosat](#13-在-docker-中安装-robosat)\n    - [2. 数据准备工作](#2-数据准备工作)\n        - [2.1 建筑物轮廓矢量数据](#21-建筑物轮廓矢量数据)\n        - [2.2 获取建筑物轮廓geojson数据](#22-获取建筑物轮廓geojson数据)\n        - [2.3 提取训练区覆盖的瓦片行列号](#23-提取训练区覆盖的瓦片行列号)\n        - [2.4 下载训练区遥感影像瓦片](#24-下载训练区遥感影像瓦片)\n        - [2.5 制作训练区矢量数据蒙版标记](#25-制作训练区矢量数据蒙版标记)\n    - [3. 训练和建模](#3-训练和建模)\n        - [3.1 分配训练数据、验证数据、评估数据](#31-分配训练数据验证数据评估数据)\n        - [3.2 权重计算](#32-权重计算)\n        - [3.3 开始训练](#33-开始训练)\n    - [4. 预测](#4-预测)\n        - [4.1 准备预测区域数据](#41-准备预测区域数据)\n        - [4.2 预测待提取建筑物概率](#42-预测待提取建筑物概率)\n        - [4.3 预测概率转换为建筑物掩模](#43-预测概率转换为建筑物掩模)\n        - [4.4 建筑物掩模转换为geojson](#44-建筑物掩模转换为geojson)\n        - [4.5 合并掩模分割的 geojson](#45-合并掩模分割的-geojson)\n\n\n\n## 1. 系统准备工作\n### 1.1 设备及系统\n> 准备一台安装 Linux 或 MacOS 系统的机器，可以是 CentOS、Ubuntu 或 MacOS。机器可以是实体机，也可以是 VMware 虚拟机。\n\n### 1.2 安装 Docker\n> 在机器中安装Docker，不建议是Windows版Docker。[MacOS安装Docker](https://www.runoob.com/docker/macos-docker-install.html) ，[CentOS安装Docker](https://www.runoob.com/docker/centos-docker-install.html)\n\n### 1.3 在 Docker 中安装 Robosat\n>  Robosat 的 [Docker Hub](https://hub.docker.com/r/mapbox/robosat)。\n\n​    可以使用两种方式安装 Robosat：\n- 使用 CPU 容器：\n```shell\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu --help\n```\n- 使用 GPU 容器（主机上需要 [nvidia-docker](https://github.com/NVIDIA/nvidia-docker)）：\n```shell\ndocker run --runtime=nvidia -it --rm -v $PWD:/data --ipc=host mapbox/robosat:latest-gpu train --model /data/model.toml --dataset /data/dataset.toml --workers 4\n```\n\n\n\n## 2. 数据准备工作\n\n### 2.1 建筑物轮廓矢量数据\n​    已有的建筑物轮廓矢量数据用来作为建筑物提取的训练数据源。可以有两种方式获取：\n- OSM 数据源，可以在 [geofabrik](http://download.geofabrik.de/) 获取，通过 [osmium](https://github.com/osmcode/osmium-tool) 和 [robosat](https://github.com/mapbox/robosat) 工具[进行处理](https://www.openstreetmap.org/user/daniel-j-h/diary/44321)。\n- 自有数据源。通过 [QGIS](https://qgis.org/en/site/) 或 ArcMap 等工具，加载遥感影像底图，描述的建筑物轮廓 Shapefile 数据。\n\n\n\n​    **本文使用第二种数据来源，并已[开源数据源](https://github.com/geocompass/robosat_buildings_training/tree/master/shp_data)，开源的矢量数据覆盖厦门核心区。**\n\n​    **考虑到使用个人电脑没有 CUDA 加速训练成本较高，本文使用 [buia_xiamen_min_shp](https://github.com/geocompass/robosat_buildings_training/blob/master/shp_data/buia_xiamen_min_shp.zip)，包含厦门核心区部分区域，共5679个建筑物轮廓。在Docker配置为 处理器(`CPU`) 4核、内存(`RAM`)16GB、交换内存(`Swap`)3GB时，训练时间大约2.5小时。**\n\n\n\n\n![训练区矢量数据预览](https://github.com/geocompass/robosat_buildings_training/blob/master/img/buia_xiamen_preview.jpg)\n\n### 2.2 获取建筑物轮廓geojson数据\n​    通过在线工具 [mapshaper](https://mapshaper.org/)，将 shapefile 数据转换为 geojson 数据。\n\n### 2.3 提取训练区覆盖的瓦片行列号\n​    使用 robosat 的 [cover](https://github.com/mapbox/robosat#rs-cover) 命令，即可获取当前训练区矢量数据覆盖的瓦片行列号，并使用 csv 文件存储。\n```shell\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu cover  --zoom 18 /data/buildings.json /data/buildings.tiles\n```\n   `cover`  命令的参数介绍：\n\n> usage: `./rs cover [-h] --zoom ZOOM features out`\n>\n> - positional arguments:\n>   - `features`     path to GeoJSON features\n>   - `out`         path to csv file to store tiles in\n> - optional arguments:\n>   - `-h`, --help   show this help message and exit\n>   - `--zoom ZOOM`  zoom level of tiles (default: None)\n\n这里是获取在 18 级下训练区覆盖的瓦片行列号。18 级是国内地图通用的最大级别，如果有国外更清晰数据源，可设置更高地图级别。\n\n​    cover 工具对训练区矢量数据计算的瓦片行列号使用的是通用的 WGS84->Web 墨卡托投影坐标系。\n\n> 小知识：\n>\n> -  `$PWD:/data` 是将当前路径映射为docker中的 `/data` 路径。\n> -  在新版 robosat 的 docker 安装包中，将 `./rs` 命令行工具对应为`docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu` 命令。\n> -  docker 版 robosat ，以命令行方式执行，无法生成类似 nginx 的 docker 服务，所以执行完成后立即销毁了 docker 的 container。\n\n### 2.4 下载训练区遥感影像瓦片\n\n​    使用 robosat 的 [download](https://github.com/mapbox/robosat#rs-download) 工具，即可获取当前训练区矢量数据覆盖的遥感影像，下载的瓦片通过 2.3 节中的**buildings.tiles** 确定。\n\n```shell\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu download http://ditu.google.cn/maps/vt/lyrs=s&x={x}&y={y}&z={z} /data/buildings.tiles /data/tiles\n```\n\n​    `download` 命令的参数介绍：\n\n> usage: `./rs download [-h] [--ext EXT] [--rate RATE] url tiles out`\n>\n> - positional arguments:\n>   - `url`  endpoint with {z}/{x}/{y} variables to fetch image tiles from\n>   - `tiles`  path to .csv tiles file\n>   - `out`  path to slippy map directory for storing tiles\n> - optional arguments:\n>   - `-h`, --help   show this help message and exit\n>   - `--ext EXT` file format to save images in (default: webp)\n>   - `--rate RATE` rate limit in max. requests per second (default: 10)\n\n​    这里介绍几个常用的 Web 墨卡托投影的（WGS84坐标系）遥感影像数据源：\n\n> - [谷歌地图CN影像](https://ditu.google.cn/)：http://ditu.google.cn/maps/vt/lyrs=s&x={x}&y={y}&z={z}\n> - [天地图影像](https://map.tianditu.gov.cn/)：https://t4.tianditu.gov.cn/DataServer?T=img_w&x={x}&y={y}&l={z}&tk=2ce94f67e58faa24beb7cb8a09780552\n> - [ArcGIS Online影像](https://server.arcgisonline.com/arcgis/rest/services/World_Imagery/MapServer?f=jsapi)：https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\n> - [MapBox影像](https://api.mapbox.com/styles/v1/mapbox/satellite-v9.html?title=true&access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4M29iazA2Z2gycXA4N2pmbDZmangifQ.-g_vE53SD2WrJ6tFX7QHmA#0.75/29.3/-124.8)：https://api.mapbox.com/v4/mapbox.satellite/{z}/{x}/{y}@2x.png?sku=101KOLcQaDwG1&access_token=[token]\n\n​    几种遥感影像数据源的比较：\n\n- 从访问速度来看，天地图>谷歌>ArcGIS>Mapbox。\n\n- 从遥感影像的质量来说，总体来说：\n  - 城市地区：谷歌=ArcGIS>天地图>Mapbox\n  - 农村地图：谷歌>天地图>ArcGIS>Mapbox\n- 层级覆盖：谷歌>天地图>ArcGIS>Mapbox\n\n​    不同影像数据源的质量不能一概而论，由于传感器不同、过境时间不同等因素，不同地区的影像数据源质量均不同，建议使用 QGIS 加载训练区位置的影像对比选择。\n\n### 2.5 制作训练区矢量数据蒙版标记\n\n​    使用 2.2 节中制作的 geojson 数据，通过 robosat 的 [rasterize](https://github.com/mapbox/robosat#rs-rasterize) 工具可制作训练区矢量数据的蒙版标记数据。蒙版标记数据与瓦片数据一一相对应，使用同样的 **buildings.tiles** 瓦片列表产生。\n\n```shell\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu rasterize --dataset /data/dataset-building.toml --zoom 18 --size 256 /data/buildings.json /data/buildings.tiles /data/masks\n```\n\n​    `rasterise` 命令的参数介绍：\n\n> usage: `./rs rasterize [-h] --dataset DATASET --zoom ZOOM [--size SIZE] features tiles out`\n>\n> - positional arguments:\n>   - `features` path to GeoJSON features file\n>   - `tiles` path to .csv tiles file\n>   - `out` directory to write converted images\n>\n> - optional arguments:\n>     `-h`, `--help` show this help message and exit\n>     `--dataset DATASET` path to dataset configuration file (default: None)\n>     `--zoom ZOOM`  zoom level of tiles (default: None)\n>     `--size SIZE` size of rasterized image tiles in pixels (default: 512)\n\n  这里使用到了 `dataset-building.toml` 配置文件，文件中配置了瓦片地图路径、分类方式、蒙版标记的颜色等信息。示例配置可以查看官方示例文件 [dataset-parking.toml](https://github.com/mapbox/robosat/blob/master/config/dataset-parking.toml) 。本训练中用到的 [dataset-building.toml](https://github.com/geocompass/robosat_buildings_training/dataset-building.toml) 的配置内容如下：\n\n```toml\n# Configuration related to a specific dataset.\n# For syntax see: https://github.com/toml-lang/toml#table-of-contents\n\n# Dataset specific common attributes.\n[common]\n\n  # The slippy map dataset's base directory.\n  dataset = '/Users/wucan/Document/robosat/tiles/'\n\n  # Human representation for classes.\n  classes = ['background', 'buildings']\n\n  # Color map for visualization and representing classes in masks.\n  # Note: available colors can be found in `robosat/colors.py`\n  colors  = ['denim', 'orange']\n```\n\n​    配置文档中，最重要的是配置 `dataset` 目录，也就是上一步中下载的遥感影像瓦片路径。制作的蒙版标记效果如下图。\n\n![mask](https://github.com/geocompass/robosat_buildings_training/blob/master/img/mask.gif)\n\n​    至此，训练和建模所需的瓦片和蒙版标记已经全部准备完，分别在 `tiles` 和 `masks` 目录中。\n\n\n\n## 3. 训练和建模\n\n### 3.1 分配训练数据、验证数据、评估数据\n\n​    RoboSat 分割模型是一个完全卷积的神经网络，需要将上一步准备好的数据集拆分为三部分，分别为`训练数据集` 、`验证数据集`、`评估数据集`，比例分别为80%、10%、10%。每一部分的数据集中，都包含影像瓦片和蒙版标记瓦片。\n\n- 训练数据集：a training dataset on which we train the model on\n- 验证数据集：a validation dataset on which we calculate metrics on after training\n- 评估数据集：a hold-out evaluation dataset if you want to do hyper-parameter tuning\n\n   将步骤 2 中的数据进行随机分配的过程非常简单：\n\n- 新建三个 csv 文件： `csv_training.tiles` 、`csv_validation.tiles`、 `csv_evaluation.tiles` \n- 将 `buildings.tiles` 中的瓦片列表随机按 80%、10%、10% 比例进行拷贝与粘贴。注意三个文件间的瓦片列表内容不能重复。\n\n​    使用 RoboSat 中的 [subset](https://github.com/mapbox/robosat#rs-subset) 命令，将 `tiles` 和 `masks` 中的瓦片和蒙版按照上面三个 csv 文件的瓦片列表分配进行组织影像瓦片和蒙版标记数据。\n\n```shell\n# 准备训练数据集\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/tiles/ /data/csv_training.tiles /data/dataset/training/images\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/masks/ /data/csv_training.tiles /data/dataset/training/labels\n# 准备验证数据集\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/tiles/ /data/csv_validation.tiles /data/dataset/validation/images\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/masks/ /data/csv_validation.tiles /data/dataset/validation/labels\n# 准备评估数据集\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/tiles/ /data/csv_evaluation.tiles /data/dataset/evaluation/images\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/masks/ /data/csv_evaluation.tiles /data/dataset/evaluation/labels\n```\n\n​    `subset` 命令的参数介绍：\n\n> usage: `./rs subset [-h] images tiles out`\n>\n> - positional arguments:\n>   - `images` directory to read slippy map image tiles from for filtering\n>   - ` tiles` csv to filter images by\n>   - `out` directory to save filtered images to\n>\n> - optional arguments:\n>   - `-h`, `--help`  show this help message and exit\n\n​    分类完成以后，将会生成 `/data/dataset` 目录，目录结构如下：\n\n```shell\ndataset\n|  training\n|  |  images\n|  |  labels\n|  validataion\n|  |  images\n|  |  labels\n|  evaluation\n|  |  images\n|  |  labels\n```\n\n### 3.2 权重计算\n\n​    因为前景和背景在数据集中分布不均，可以使用 RoboSat 中的 [weights](https://github.com/mapbox/robosat#rs-weights) 命令，在模型训练之前计算一下每个类的分布。\n\n```shell\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu weights --dataset /data/dataset-building-weights.toml\n```\n\n​    `weights` 命令的参数如下：\n\n> usage: `./rs weights [-h] --dataset DATASET`\n>\n> - optional arguments:\n>   - `-h`, `--help`  show this help message and exit\n>   - `--dataset DATASET` path to dataset configuration file (default: None)  \n\n​    这里，用到了`dataset-building-weights.toml` ，是将前面步骤中的 `dataset-building.toml` 瓦片路径修改为包含训练数据集 `dataset` 的路径。执行权重计算命令后，得到权重为：`values = [1.653415, 5.266637]` 。将其追加到 `dataset-building-weights.toml` 文件中，结果如下。\n\n```\n# Configuration related to a specific dataset.\n# For syntax see: https://github.com/toml-lang/toml#table-of-contents\n\n\n# Dataset specific common attributes.\n[common]\n\n  # The slippy map dataset's base directory.\n  dataset = '/data/dataset'\n\n  # Human representation for classes.\n  classes = ['background', 'buildings']\n\n  # Color map for visualization and representing classes in masks.\n  # Note: available colors can be found in `robosat/colors.py`\n  colors  = ['denim', 'orange']\n\n# Dataset specific class weights computes on the training data.\n# Needed by 'mIoU' and 'CrossEntropy' losses to deal with unbalanced classes.\n# Note: use `./rs weights -h` to compute these for new datasets.\n[weights]\n  values = [1.653415, 5.266637]\n```\n\n### 3.3 开始训练\n\n​    RoboSat 使用 [train](https://github.com/mapbox/robosat#rs-train) 命令进行训练。\n\n```shell\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu train --model /data/model-unet.toml --dataset /data/dataset-building-weights.toml\n```\n\n​    `train` 命令的参数如下：\n\n> usage: `./rs train [-h] --model MODEL --dataset DATASET [--checkpoint CHECKPOINT] [--resume RESUME] [--workers WORKERS]`\n>\n> - positional arguments:\n>   - `--model MODEL` path to model configuration file (default: None)\n>   - `--dataset DATASET` path to dataset configuration file (default: None)\n>\n> - optional arguments:\n>   - `-h`, `--help show this help message and exit\n>   - `--checkpoint CHECKPOINT`  path to a model checkpoint (to retrain) (default: None)\n>   - `--resume RESUME`   resume training or fine-tuning (if checkpoint)  (default: False)\n>   - `--workers WORKERS`  number of workers pre-processi ng images (default: 0)  \n\n​    这里多了一个配置文件 `model-unet.toml` ，这个配置文件主要用来配置训练过程中的参数，包括是否启用 CUDA 、训练批次大小、影像瓦片的像素大小、检查点存储路径等。官方给出了[示例配置文件](https://github.com/mapbox/robosat/blob/master/config/model-unet.toml)，根据本实验的情况做了修改如下，配置如下。\n\n```\n# Configuration related to a specific model.\n# For syntax see: https://github.com/toml-lang/toml#table-of-contents\n\n# Model specific common attributes.\n[common]\n\n  # Use CUDA for GPU acceleration.\n  cuda       = false\n\n  # Batch size for training.\n  batch_size = 2\n\n  # Image side size in pixels.\n  image_size = 256\n\n  # Directory where to save checkpoints to during training.\n  checkpoint = '/data/checkpoint/'\n\n\n# Model specific optimization parameters.\n[opt]\n\n  # Total number of epochs to train for.\n  epochs     = 10\n\n  # Learning rate for the optimizer.\n  lr         = 0.01\n\n  # Loss function name (e.g 'Lovasz', 'mIoU' or 'CrossEntropy')\n  loss = 'Lovasz'\n```\n\n​    RoboSat 会进行多次迭代训练，每次迭代训练都会保存检查点(checkpoint)和各项指标等。其中，训练日志例如：\n\n```shell\n--- Hyper Parameters on Dataset: /data/dataset ---\nBatch Size:\t 2\nImage Size:\t 256\nLearning Rate:\t 0.0001\nLoss function:\t Lovasz\nWeights :\t [1.644471, 5.409126]\n---\nEpoch: 1/10\nTrain    loss: 0.3190, mIoU: 0.410, buildings IoU: 0.017, MCC: -0.002\nValidate loss: 0.3171, mIoU: 0.405, buildings IoU: 0.000, MCC: nan\n\n...\n\nEpoch: 10/10\nTrain    loss: 0.2693, mIoU: 0.528, buildings IoU: 0.229, MCC: 0.330\nValidate loss: 0.2880, mIoU: 0.491, buildings IoU: 0.167, MCC: 0.262\n```\n\n​    可以选择最好的训练结果，保留其检查点( `checkpoint-***.pth` )，进入下一步 `predict`。一般来说，最后一个检查点效果最好。\n\n## 4. 预测\n\n### 4.1 准备预测区域数据\n\n​    RoboSat 仅支持从影像瓦片中提取建筑物，不支持从任意的 jpg 图片中提取。所以我们需要先准备预测区域的瓦片数据。\n\n​    通过 [geojson.io](http://geojson.io/) 绘制想要提取建筑物的范围，使用矩形框即可。将自动生成的 geojson 保存为 `predict_test.json`。\n\n​    通过 2.3 中的 `cover` 命令，获取待提取范围的瓦片列表 csv 文件，保存到 `buildings_predict.tiles` 文件中。\n\n```shell\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu cover  --zoom 18 /data/shp_data/predict_test.json /data/buildings_predict.tiles\n```\n\n​    使用 2.4 中的 `download` 命令，下载待提取范围的影像瓦片，保存到 `images_predict` 文件夹中。\n\n```shell\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu download https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x} /data/buildings_predict.tiles /data/images_predict\n```\n\n![预测区域的geojson](https://github.com/geocompass/robosat_buildings_training/blob/master/img/predict_region_geojson.jpg)\n\n### 4.2 预测待提取建筑物概率\n\n​    使用保存的检查点来（`checkpint`）预测图像中每个像素的分割概率，这些分割概率表示每个像素是建筑物还是背景的可能性，然后可以将这些概率转换为离散的分割掩模。\n\n​    通过 RoboSat 的 [predict](https://github.com/mapbox/robosat#rs-predict) 命令，将待预测区域的建筑物（ `images_predict` ）提取为分割概率（`predict_segmentation-probabilities`）。\n\n```shell\ndocker run -it -d --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu predict --tile_size 256 --model /data/model-unet.toml --dataset /data/dataset-building.toml --checkpoint /data/checkpoint/checkpoint-00010-of-00010.pth /data/images_predict /data/predict_segmentation-probabilities\n```\n\n​    `predict` 命令的参数如下：\n\n> usage: `./rs predict [-h] [--batch_size BATCH_SIZE] --checkpoint CHECKPOINT [--overlap OVERLAP] --tile_size TILE_SIZE [--workers WORKERS] --model MODEL --dataset DATASET tiles probs`\n>\n> - positional arguments:\n>   - `tiles`   directory to read slippy map image tiles from\n>   - `probs`  directory to save slippy map probability masks to\n>\n> - optional arguments:\n>   - `-h`, `--help  show this help message and exit\n>      `\n>   - `--batch_size BATCH_SIZE`  images per batch (default: 1)\n>   - `--checkpoint CHECKPOINT`  model checkpoint to load (default: None)\n>   - `--overlap OVERLAP` tile pixel overlap to predict on (default: 32)\n>   - `--tile_size TILE_SIZE` tile size for slippy map tiles (default: None)\n>   - `--workers WORKERS` number of workers pre-processing images (default: 0)\n>   - `--model MODEL` path to model configuration file (default: None)\n>   - `--dataset DATASET`  path to dataset configuration file (default: None)\n\n![预测建筑物提取概率结果](https://github.com/geocompass/robosat_buildings_training/blob/master/img/predit_probabilities.gif)\n\n### 4.3 预测概率转换为建筑物掩模\n\n​    通过 RoboSat 的 [masks](https://github.com/mapbox/robosat#rs-masks) 命令，将上一步中的建筑物预测概率结果转换为建筑物掩模（`masks`），保存到 `predict_segmentation-masks` 文件夹中。\n\n```shell\ndocker run -it -d --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu masks /data/predict_segmentation-masks /data/predict_segmentation-probabilities\n```\n\n> usage: `./rs masks [-h] [--weights WEIGHTS [WEIGHTS ...]] masks probs [probs ...]`\n>\n> - positional arguments:\n>   - `masks`  slippy map directory to save masks to\n>   - `probs`  slippy map directories with class probabilities\n>\n> - optional arguments:\n>   -  `-h`, `--help` show this help message and exit\n>   - `--weights WEIGHTS [WEIGHTS ...]`  weights for weighted average soft-voting (default:\n>                             None)\n\n![预测建筑物提取掩模结果](https://github.com/geocompass/robosat_buildings_training/blob/master/img/predit_masks.jpg)\n\n### 4.4 建筑物掩模转换为geojson\n\n​    通过 RoboSat 的 [features]() 命令，将上一步中的建筑物掩模转换为 geojson，保存在 `predict_geojson_features` 文件夹中。\n\n```shell\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu features /data/predict_segmentation-masks /data/predict_geojson_features\n```\n\n> usage: `./rs features [-h] --type {parking} --dataset DATASET masks out`\n>\n> - positional arguments:\n>   - `masks`  slippy map directory with segmentation masks\n>   - `out` path to GeoJSON file to store features in\n>\n> - optional arguments:\n>   -  `-h`, `--help`  show this help message and exit\n>   -  `--type {parking}` type of feature to extract (default: None)\n>   -  `--dataset DATASET`  path to dataset configuration file (default: None)\n\n（目前 `features` 命令中对 `--type` 设置有bug，无法正常执行。）\n\n### 4.5 合并掩模分割的 geojson\n\n​    通过 RoboSat 的 [merge](https://github.com/mapbox/robosat#rs-merge)  命令，将上一步中生成的分割的 geojson 要素进行合并，结果保存在 `predict_geojson_merge`文件夹中。\n\n```\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu features /data/predict_geojson /data/predict_geojson_merge\n```\n\n> usage: `./rs merge [-h] --threshold THRESHOLD features out`\n>\n> - positional arguments:\n>   -  `features` GeoJSON file to read features from\n>   -  `out` path to GeoJSON to save merged features to\n>\n> - optional arguments:\n>   -  `-h`, `--help` show this help message and exit\n>   -  `--threshold THRESHOLD` minimum distance to adjacent features, in m (default:\n>                             None)\n\n\n\n","slug":"robosat-buildings-training-step-by-step","published":1,"updated":"2019-08-18T12:12:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzgxp32b0000otjfva1kjxyo","content":"<p>原文链接：<a href=\"https://github.com/geocompass/robosat_buildings_training\" target=\"_blank\" rel=\"noopener\">https://github.com/geocompass/robosat_buildings_training</a></p>\n<p>​    本文介绍了如何使用 <a href=\"https://github.com/mapbox/robosat\" target=\"_blank\" rel=\"noopener\">mapbox/robosat</a> 工具，基于深度学习训练，从常规的遥感影像瓦片地图服务中自动提取建筑物。包括系统准备工作、数据准备工作和训练与建模。通过根据文章的描述，可以完成训练任务。</p>\n<p>​    参考文章：<a href=\"https://www.openstreetmap.org/user/daniel-j-h/diary/44321\" target=\"_blank\" rel=\"noopener\">daniel-j-h : RoboSat ❤️ Tanzania</a></p>\n<ul>\n<li><a href=\"#robosat_buildings_training\">手把手教你如何使用 RoboSat 自动提取建筑物</a><ul>\n<li><a href=\"#1-系统准备工作\">1. 系统准备工作</a><ul>\n<li><a href=\"#11-设备及系统\">1.1 设备及系统</a></li>\n<li><a href=\"#12-安装-docker\">1.2 安装 Docker</a></li>\n<li><a href=\"#13-在-docker-中安装-robosat\">1.3 在 Docker 中安装 Robosat</a></li>\n</ul>\n</li>\n<li><a href=\"#2-数据准备工作\">2. 数据准备工作</a><ul>\n<li><a href=\"#21-建筑物轮廓矢量数据\">2.1 建筑物轮廓矢量数据</a></li>\n<li><a href=\"#22-获取建筑物轮廓geojson数据\">2.2 获取建筑物轮廓geojson数据</a></li>\n<li><a href=\"#23-提取训练区覆盖的瓦片行列号\">2.3 提取训练区覆盖的瓦片行列号</a></li>\n<li><a href=\"#24-下载训练区遥感影像瓦片\">2.4 下载训练区遥感影像瓦片</a></li>\n<li><a href=\"#25-制作训练区矢量数据蒙版标记\">2.5 制作训练区矢量数据蒙版标记</a></li>\n</ul>\n</li>\n<li><a href=\"#3-训练和建模\">3. 训练和建模</a><ul>\n<li><a href=\"#31-分配训练数据验证数据评估数据\">3.1 分配训练数据、验证数据、评估数据</a></li>\n<li><a href=\"#32-权重计算\">3.2 权重计算</a></li>\n<li><a href=\"#33-开始训练\">3.3 开始训练</a></li>\n</ul>\n</li>\n<li><a href=\"#4-预测\">4. 预测</a><ul>\n<li><a href=\"#41-准备预测区域数据\">4.1 准备预测区域数据</a></li>\n<li><a href=\"#42-预测待提取建筑物概率\">4.2 预测待提取建筑物概率</a></li>\n<li><a href=\"#43-预测概率转换为建筑物掩模\">4.3 预测概率转换为建筑物掩模</a></li>\n<li><a href=\"#44-建筑物掩模转换为geojson\">4.4 建筑物掩模转换为geojson</a></li>\n<li><a href=\"#45-合并掩模分割的-geojson\">4.5 合并掩模分割的 geojson</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"1-系统准备工作\"><a href=\"#1-系统准备工作\" class=\"headerlink\" title=\"1. 系统准备工作\"></a>1. 系统准备工作</h2><h3 id=\"1-1-设备及系统\"><a href=\"#1-1-设备及系统\" class=\"headerlink\" title=\"1.1 设备及系统\"></a>1.1 设备及系统</h3><blockquote>\n<p>准备一台安装 Linux 或 MacOS 系统的机器，可以是 CentOS、Ubuntu 或 MacOS。机器可以是实体机，也可以是 VMware 虚拟机。</p>\n</blockquote>\n<h3 id=\"1-2-安装-Docker\"><a href=\"#1-2-安装-Docker\" class=\"headerlink\" title=\"1.2 安装 Docker\"></a>1.2 安装 Docker</h3><blockquote>\n<p>在机器中安装Docker，不建议是Windows版Docker。<a href=\"https://www.runoob.com/docker/macos-docker-install.html\" target=\"_blank\" rel=\"noopener\">MacOS安装Docker</a> ，<a href=\"https://www.runoob.com/docker/centos-docker-install.html\" target=\"_blank\" rel=\"noopener\">CentOS安装Docker</a></p>\n</blockquote>\n<h3 id=\"1-3-在-Docker-中安装-Robosat\"><a href=\"#1-3-在-Docker-中安装-Robosat\" class=\"headerlink\" title=\"1.3 在 Docker 中安装 Robosat\"></a>1.3 在 Docker 中安装 Robosat</h3><blockquote>\n<p> Robosat 的 <a href=\"https://hub.docker.com/r/mapbox/robosat\" target=\"_blank\" rel=\"noopener\">Docker Hub</a>。</p>\n</blockquote>\n<p>​    可以使用两种方式安装 Robosat：</p>\n<ul>\n<li><p>使用 CPU 容器：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu --help</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 GPU 容器（主机上需要 <a href=\"https://github.com/NVIDIA/nvidia-docker\" target=\"_blank\" rel=\"noopener\">nvidia-docker</a>）：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --runtime=nvidia -it --rm -v $PWD:/data --ipc=host mapbox/robosat:latest-gpu train --model /data/model.toml --dataset /data/dataset.toml --workers 4</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"2-数据准备工作\"><a href=\"#2-数据准备工作\" class=\"headerlink\" title=\"2. 数据准备工作\"></a>2. 数据准备工作</h2><h3 id=\"2-1-建筑物轮廓矢量数据\"><a href=\"#2-1-建筑物轮廓矢量数据\" class=\"headerlink\" title=\"2.1 建筑物轮廓矢量数据\"></a>2.1 建筑物轮廓矢量数据</h3><p>​    已有的建筑物轮廓矢量数据用来作为建筑物提取的训练数据源。可以有两种方式获取：</p>\n<ul>\n<li>OSM 数据源，可以在 <a href=\"http://download.geofabrik.de/\" target=\"_blank\" rel=\"noopener\">geofabrik</a> 获取，通过 <a href=\"https://github.com/osmcode/osmium-tool\" target=\"_blank\" rel=\"noopener\">osmium</a> 和 <a href=\"https://github.com/mapbox/robosat\" target=\"_blank\" rel=\"noopener\">robosat</a> 工具<a href=\"https://www.openstreetmap.org/user/daniel-j-h/diary/44321\" target=\"_blank\" rel=\"noopener\">进行处理</a>。</li>\n<li>自有数据源。通过 <a href=\"https://qgis.org/en/site/\" target=\"_blank\" rel=\"noopener\">QGIS</a> 或 ArcMap 等工具，加载遥感影像底图，描述的建筑物轮廓 Shapefile 数据。</li>\n</ul>\n<p>​    <strong>本文使用第二种数据来源，并已<a href=\"https://github.com/geocompass/robosat_buildings_training/tree/master/shp_data\" target=\"_blank\" rel=\"noopener\">开源数据源</a>，开源的矢量数据覆盖厦门核心区。</strong></p>\n<p>​    <strong>考虑到使用个人电脑没有 CUDA 加速训练成本较高，本文使用 <a href=\"https://github.com/geocompass/robosat_buildings_training/blob/master/shp_data/buia_xiamen_min_shp.zip\" target=\"_blank\" rel=\"noopener\">buia_xiamen_min_shp</a>，包含厦门核心区部分区域，共5679个建筑物轮廓。在Docker配置为 处理器(<code>CPU</code>) 4核、内存(<code>RAM</code>)16GB、交换内存(<code>Swap</code>)3GB时，训练时间大约2.5小时。</strong></p>\n<p><img src=\"https://github.com/geocompass/robosat_buildings_training/blob/master/img/buia_xiamen_preview.jpg\" alt=\"训练区矢量数据预览\"></p>\n<h3 id=\"2-2-获取建筑物轮廓geojson数据\"><a href=\"#2-2-获取建筑物轮廓geojson数据\" class=\"headerlink\" title=\"2.2 获取建筑物轮廓geojson数据\"></a>2.2 获取建筑物轮廓geojson数据</h3><p>​    通过在线工具 <a href=\"https://mapshaper.org/\" target=\"_blank\" rel=\"noopener\">mapshaper</a>，将 shapefile 数据转换为 geojson 数据。</p>\n<h3 id=\"2-3-提取训练区覆盖的瓦片行列号\"><a href=\"#2-3-提取训练区覆盖的瓦片行列号\" class=\"headerlink\" title=\"2.3 提取训练区覆盖的瓦片行列号\"></a>2.3 提取训练区覆盖的瓦片行列号</h3><p>​    使用 robosat 的 <a href=\"https://github.com/mapbox/robosat#rs-cover\" target=\"_blank\" rel=\"noopener\">cover</a> 命令，即可获取当前训练区矢量数据覆盖的瓦片行列号，并使用 csv 文件存储。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu cover  --zoom 18 /data/buildings.json /data/buildings.tiles</span><br></pre></td></tr></table></figure>\n\n<p>   <code>cover</code>  命令的参数介绍：</p>\n<blockquote>\n<p>usage: <code>./rs cover [-h] --zoom ZOOM features out</code></p>\n<ul>\n<li>positional arguments:<ul>\n<li><code>features</code>     path to GeoJSON features</li>\n<li><code>out</code>         path to csv file to store tiles in</li>\n</ul>\n</li>\n<li>optional arguments:<ul>\n<li><code>-h</code>, –help   show this help message and exit</li>\n<li><code>--zoom ZOOM</code>  zoom level of tiles (default: None)</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>这里是获取在 18 级下训练区覆盖的瓦片行列号。18 级是国内地图通用的最大级别，如果有国外更清晰数据源，可设置更高地图级别。</p>\n<p>​    cover 工具对训练区矢量数据计算的瓦片行列号使用的是通用的 WGS84-&gt;Web 墨卡托投影坐标系。</p>\n<blockquote>\n<p>小知识：</p>\n<ul>\n<li><code>$PWD:/data</code> 是将当前路径映射为docker中的 <code>/data</code> 路径。</li>\n<li>在新版 robosat 的 docker 安装包中，将 <code>./rs</code> 命令行工具对应为<code>docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu</code> 命令。</li>\n<li>docker 版 robosat ，以命令行方式执行，无法生成类似 nginx 的 docker 服务，所以执行完成后立即销毁了 docker 的 container。</li>\n</ul>\n</blockquote>\n<h3 id=\"2-4-下载训练区遥感影像瓦片\"><a href=\"#2-4-下载训练区遥感影像瓦片\" class=\"headerlink\" title=\"2.4 下载训练区遥感影像瓦片\"></a>2.4 下载训练区遥感影像瓦片</h3><p>​    使用 robosat 的 <a href=\"https://github.com/mapbox/robosat#rs-download\" target=\"_blank\" rel=\"noopener\">download</a> 工具，即可获取当前训练区矢量数据覆盖的遥感影像，下载的瓦片通过 2.3 节中的<strong>buildings.tiles</strong> 确定。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu download http://ditu.google.cn/maps/vt/lyrs=s&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;z=&#123;z&#125; /data/buildings.tiles /data/tiles</span><br></pre></td></tr></table></figure>\n\n<p>​    <code>download</code> 命令的参数介绍：</p>\n<blockquote>\n<p>usage: <code>./rs download [-h] [--ext EXT] [--rate RATE] url tiles out</code></p>\n<ul>\n<li>positional arguments:<ul>\n<li><code>url</code>  endpoint with {z}/{x}/{y} variables to fetch image tiles from</li>\n<li><code>tiles</code>  path to .csv tiles file</li>\n<li><code>out</code>  path to slippy map directory for storing tiles</li>\n</ul>\n</li>\n<li>optional arguments:<ul>\n<li><code>-h</code>, –help   show this help message and exit</li>\n<li><code>--ext EXT</code> file format to save images in (default: webp)</li>\n<li><code>--rate RATE</code> rate limit in max. requests per second (default: 10)</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>​    这里介绍几个常用的 Web 墨卡托投影的（WGS84坐标系）遥感影像数据源：</p>\n<blockquote>\n<ul>\n<li><a href=\"https://ditu.google.cn/\" target=\"_blank\" rel=\"noopener\">谷歌地图CN影像</a>：<a href=\"http://ditu.google.cn/maps/vt/lyrs=s&amp;x={x}&amp;y={y}&amp;z={z}\" target=\"_blank\" rel=\"noopener\">http://ditu.google.cn/maps/vt/lyrs=s&amp;x={x}&amp;y={y}&amp;z={z}</a></li>\n<li><a href=\"https://map.tianditu.gov.cn/\" target=\"_blank\" rel=\"noopener\">天地图影像</a>：<a href=\"https://t4.tianditu.gov.cn/DataServer?T=img_w&amp;x={x}&amp;y={y}&amp;l={z}&amp;tk=2ce94f67e58faa24beb7cb8a09780552\" target=\"_blank\" rel=\"noopener\">https://t4.tianditu.gov.cn/DataServer?T=img_w&amp;x={x}&amp;y={y}&amp;l={z}&amp;tk=2ce94f67e58faa24beb7cb8a09780552</a></li>\n<li><a href=\"https://server.arcgisonline.com/arcgis/rest/services/World_Imagery/MapServer?f=jsapi\" target=\"_blank\" rel=\"noopener\">ArcGIS Online影像</a>：<a href=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\" target=\"_blank\" rel=\"noopener\">https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}</a></li>\n<li><a href=\"https://api.mapbox.com/styles/v1/mapbox/satellite-v9.html?title=true&access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4M29iazA2Z2gycXA4N2pmbDZmangifQ.-g_vE53SD2WrJ6tFX7QHmA#0.75/29.3/-124.8\" target=\"_blank\" rel=\"noopener\">MapBox影像</a>：<a href=\"https://api.mapbox.com/v4/mapbox.satellite/{z}/{x}/{y}@2x.png?sku=101KOLcQaDwG1&amp;access_token=[token]\" target=\"_blank\" rel=\"noopener\">https://api.mapbox.com/v4/mapbox.satellite/{z}/{x}/{y}@2x.png?sku=101KOLcQaDwG1&amp;access_token=[token]</a></li>\n</ul>\n</blockquote>\n<p>​    几种遥感影像数据源的比较：</p>\n<ul>\n<li><p>从访问速度来看，天地图&gt;谷歌&gt;ArcGIS&gt;Mapbox。</p>\n</li>\n<li><p>从遥感影像的质量来说，总体来说：</p>\n<ul>\n<li>城市地区：谷歌=ArcGIS&gt;天地图&gt;Mapbox</li>\n<li>农村地图：谷歌&gt;天地图&gt;ArcGIS&gt;Mapbox</li>\n</ul>\n</li>\n<li><p>层级覆盖：谷歌&gt;天地图&gt;ArcGIS&gt;Mapbox</p>\n</li>\n</ul>\n<p>​    不同影像数据源的质量不能一概而论，由于传感器不同、过境时间不同等因素，不同地区的影像数据源质量均不同，建议使用 QGIS 加载训练区位置的影像对比选择。</p>\n<h3 id=\"2-5-制作训练区矢量数据蒙版标记\"><a href=\"#2-5-制作训练区矢量数据蒙版标记\" class=\"headerlink\" title=\"2.5 制作训练区矢量数据蒙版标记\"></a>2.5 制作训练区矢量数据蒙版标记</h3><p>​    使用 2.2 节中制作的 geojson 数据，通过 robosat 的 <a href=\"https://github.com/mapbox/robosat#rs-rasterize\" target=\"_blank\" rel=\"noopener\">rasterize</a> 工具可制作训练区矢量数据的蒙版标记数据。蒙版标记数据与瓦片数据一一相对应，使用同样的 <strong>buildings.tiles</strong> 瓦片列表产生。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu rasterize --dataset /data/dataset-building.toml --zoom 18 --size 256 /data/buildings.json /data/buildings.tiles /data/masks</span><br></pre></td></tr></table></figure>\n\n<p>​    <code>rasterise</code> 命令的参数介绍：</p>\n<blockquote>\n<p>usage: <code>./rs rasterize [-h] --dataset DATASET --zoom ZOOM [--size SIZE] features tiles out</code></p>\n<ul>\n<li><p>positional arguments:</p>\n<ul>\n<li><code>features</code> path to GeoJSON features file</li>\n<li><code>tiles</code> path to .csv tiles file</li>\n<li><code>out</code> directory to write converted images</li>\n</ul>\n</li>\n<li><p>optional arguments:<br>  <code>-h</code>, <code>--help</code> show this help message and exit<br>  <code>--dataset DATASET</code> path to dataset configuration file (default: None)<br>  <code>--zoom ZOOM</code>  zoom level of tiles (default: None)<br>  <code>--size SIZE</code> size of rasterized image tiles in pixels (default: 512)</p>\n</li>\n</ul>\n</blockquote>\n<p>  这里使用到了 <code>dataset-building.toml</code> 配置文件，文件中配置了瓦片地图路径、分类方式、蒙版标记的颜色等信息。示例配置可以查看官方示例文件 <a href=\"https://github.com/mapbox/robosat/blob/master/config/dataset-parking.toml\" target=\"_blank\" rel=\"noopener\">dataset-parking.toml</a> 。本训练中用到的 <a href=\"https://github.com/geocompass/robosat_buildings_training/dataset-building.toml\" target=\"_blank\" rel=\"noopener\">dataset-building.toml</a> 的配置内容如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Configuration related to a specific dataset.</span></span><br><span class=\"line\"><span class=\"comment\"># For syntax see: https://github.com/toml-lang/toml#table-of-contents</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Dataset specific common attributes.</span></span><br><span class=\"line\"><span class=\"section\">[common]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># The slippy map dataset's base directory.</span></span><br><span class=\"line\">  dataset = '/Users/wucan/Document/robosat/tiles/'</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Human representation for classes.</span></span><br><span class=\"line\">  classes = ['background', 'buildings']</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Color map for visualization and representing classes in masks.</span></span><br><span class=\"line\">  <span class=\"comment\"># <span class=\"doctag\">Note:</span> available colors can be found in `robosat/colors.py`</span></span><br><span class=\"line\">  colors  = ['denim', 'orange']</span><br></pre></td></tr></table></figure>\n\n<p>​    配置文档中，最重要的是配置 <code>dataset</code> 目录，也就是上一步中下载的遥感影像瓦片路径。制作的蒙版标记效果如下图。</p>\n<p><img src=\"https://github.com/geocompass/robosat_buildings_training/blob/master/img/mask.gif\" alt=\"mask\"></p>\n<p>​    至此，训练和建模所需的瓦片和蒙版标记已经全部准备完，分别在 <code>tiles</code> 和 <code>masks</code> 目录中。</p>\n<h2 id=\"3-训练和建模\"><a href=\"#3-训练和建模\" class=\"headerlink\" title=\"3. 训练和建模\"></a>3. 训练和建模</h2><h3 id=\"3-1-分配训练数据、验证数据、评估数据\"><a href=\"#3-1-分配训练数据、验证数据、评估数据\" class=\"headerlink\" title=\"3.1 分配训练数据、验证数据、评估数据\"></a>3.1 分配训练数据、验证数据、评估数据</h3><p>​    RoboSat 分割模型是一个完全卷积的神经网络，需要将上一步准备好的数据集拆分为三部分，分别为<code>训练数据集</code> 、<code>验证数据集</code>、<code>评估数据集</code>，比例分别为80%、10%、10%。每一部分的数据集中，都包含影像瓦片和蒙版标记瓦片。</p>\n<ul>\n<li><p>训练数据集：a training dataset on which we train the model on</p>\n</li>\n<li><p>验证数据集：a validation dataset on which we calculate metrics on after training</p>\n</li>\n<li><p>评估数据集：a hold-out evaluation dataset if you want to do hyper-parameter tuning</p>\n<p> 将步骤 2 中的数据进行随机分配的过程非常简单：</p>\n</li>\n<li><p>新建三个 csv 文件： <code>csv_training.tiles</code> 、<code>csv_validation.tiles</code>、 <code>csv_evaluation.tiles</code> </p>\n</li>\n<li><p>将 <code>buildings.tiles</code> 中的瓦片列表随机按 80%、10%、10% 比例进行拷贝与粘贴。注意三个文件间的瓦片列表内容不能重复。</p>\n</li>\n</ul>\n<p>​    使用 RoboSat 中的 <a href=\"https://github.com/mapbox/robosat#rs-subset\" target=\"_blank\" rel=\"noopener\">subset</a> 命令，将 <code>tiles</code> 和 <code>masks</code> 中的瓦片和蒙版按照上面三个 csv 文件的瓦片列表分配进行组织影像瓦片和蒙版标记数据。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 准备训练数据集</span><br><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/tiles/ /data/csv_training.tiles /data/dataset/training/images</span><br><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/masks/ /data/csv_training.tiles /data/dataset/training/labels</span><br><span class=\"line\"><span class=\"meta\">#</span> 准备验证数据集</span><br><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/tiles/ /data/csv_validation.tiles /data/dataset/validation/images</span><br><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/masks/ /data/csv_validation.tiles /data/dataset/validation/labels</span><br><span class=\"line\"><span class=\"meta\">#</span> 准备评估数据集</span><br><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/tiles/ /data/csv_evaluation.tiles /data/dataset/evaluation/images</span><br><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/masks/ /data/csv_evaluation.tiles /data/dataset/evaluation/labels</span><br></pre></td></tr></table></figure>\n\n<p>​    <code>subset</code> 命令的参数介绍：</p>\n<blockquote>\n<p>usage: <code>./rs subset [-h] images tiles out</code></p>\n<ul>\n<li><p>positional arguments:</p>\n<ul>\n<li><code>images</code> directory to read slippy map image tiles from for filtering</li>\n<li><code>tiles</code> csv to filter images by</li>\n<li><code>out</code> directory to save filtered images to</li>\n</ul>\n</li>\n<li><p>optional arguments:</p>\n<ul>\n<li><code>-h</code>, <code>--help</code>  show this help message and exit</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>​    分类完成以后，将会生成 <code>/data/dataset</code> 目录，目录结构如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataset</span><br><span class=\"line\">|  training</span><br><span class=\"line\">|  |  images</span><br><span class=\"line\">|  |  labels</span><br><span class=\"line\">|  validataion</span><br><span class=\"line\">|  |  images</span><br><span class=\"line\">|  |  labels</span><br><span class=\"line\">|  evaluation</span><br><span class=\"line\">|  |  images</span><br><span class=\"line\">|  |  labels</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-权重计算\"><a href=\"#3-2-权重计算\" class=\"headerlink\" title=\"3.2 权重计算\"></a>3.2 权重计算</h3><p>​    因为前景和背景在数据集中分布不均，可以使用 RoboSat 中的 <a href=\"https://github.com/mapbox/robosat#rs-weights\" target=\"_blank\" rel=\"noopener\">weights</a> 命令，在模型训练之前计算一下每个类的分布。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu weights --dataset /data/dataset-building-weights.toml</span><br></pre></td></tr></table></figure>\n\n<p>​    <code>weights</code> 命令的参数如下：</p>\n<blockquote>\n<p>usage: <code>./rs weights [-h] --dataset DATASET</code></p>\n<ul>\n<li>optional arguments:<ul>\n<li><code>-h</code>, <code>--help</code>  show this help message and exit</li>\n<li><code>--dataset DATASET</code> path to dataset configuration file (default: None)  </li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>​    这里，用到了<code>dataset-building-weights.toml</code> ，是将前面步骤中的 <code>dataset-building.toml</code> 瓦片路径修改为包含训练数据集 <code>dataset</code> 的路径。执行权重计算命令后，得到权重为：<code>values = [1.653415, 5.266637]</code> 。将其追加到 <code>dataset-building-weights.toml</code> 文件中，结果如下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Configuration related to a specific dataset.</span><br><span class=\"line\"># For syntax see: https://github.com/toml-lang/toml#table-of-contents</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># Dataset specific common attributes.</span><br><span class=\"line\">[common]</span><br><span class=\"line\"></span><br><span class=\"line\">  # The slippy map dataset&apos;s base directory.</span><br><span class=\"line\">  dataset = &apos;/data/dataset&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">  # Human representation for classes.</span><br><span class=\"line\">  classes = [&apos;background&apos;, &apos;buildings&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">  # Color map for visualization and representing classes in masks.</span><br><span class=\"line\">  # Note: available colors can be found in `robosat/colors.py`</span><br><span class=\"line\">  colors  = [&apos;denim&apos;, &apos;orange&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\"># Dataset specific class weights computes on the training data.</span><br><span class=\"line\"># Needed by &apos;mIoU&apos; and &apos;CrossEntropy&apos; losses to deal with unbalanced classes.</span><br><span class=\"line\"># Note: use `./rs weights -h` to compute these for new datasets.</span><br><span class=\"line\">[weights]</span><br><span class=\"line\">  values = [1.653415, 5.266637]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-开始训练\"><a href=\"#3-3-开始训练\" class=\"headerlink\" title=\"3.3 开始训练\"></a>3.3 开始训练</h3><p>​    RoboSat 使用 <a href=\"https://github.com/mapbox/robosat#rs-train\" target=\"_blank\" rel=\"noopener\">train</a> 命令进行训练。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu train --model /data/model-unet.toml --dataset /data/dataset-building-weights.toml</span><br></pre></td></tr></table></figure>\n\n<p>​    <code>train</code> 命令的参数如下：</p>\n<blockquote>\n<p>usage: <code>./rs train [-h] --model MODEL --dataset DATASET [--checkpoint CHECKPOINT] [--resume RESUME] [--workers WORKERS]</code></p>\n<ul>\n<li><p>positional arguments:</p>\n<ul>\n<li><code>--model MODEL</code> path to model configuration file (default: None)</li>\n<li><code>--dataset DATASET</code> path to dataset configuration file (default: None)</li>\n</ul>\n</li>\n<li><p>optional arguments:</p>\n<ul>\n<li><code>-h</code>, `–help show this help message and exit</li>\n<li><code>--checkpoint CHECKPOINT</code>  path to a model checkpoint (to retrain) (default: None)</li>\n<li><code>--resume RESUME</code>   resume training or fine-tuning (if checkpoint)  (default: False)</li>\n<li><code>--workers WORKERS</code>  number of workers pre-processi ng images (default: 0)  </li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>​    这里多了一个配置文件 <code>model-unet.toml</code> ，这个配置文件主要用来配置训练过程中的参数，包括是否启用 CUDA 、训练批次大小、影像瓦片的像素大小、检查点存储路径等。官方给出了<a href=\"https://github.com/mapbox/robosat/blob/master/config/model-unet.toml\" target=\"_blank\" rel=\"noopener\">示例配置文件</a>，根据本实验的情况做了修改如下，配置如下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Configuration related to a specific model.</span><br><span class=\"line\"># For syntax see: https://github.com/toml-lang/toml#table-of-contents</span><br><span class=\"line\"></span><br><span class=\"line\"># Model specific common attributes.</span><br><span class=\"line\">[common]</span><br><span class=\"line\"></span><br><span class=\"line\">  # Use CUDA for GPU acceleration.</span><br><span class=\"line\">  cuda       = false</span><br><span class=\"line\"></span><br><span class=\"line\">  # Batch size for training.</span><br><span class=\"line\">  batch_size = 2</span><br><span class=\"line\"></span><br><span class=\"line\">  # Image side size in pixels.</span><br><span class=\"line\">  image_size = 256</span><br><span class=\"line\"></span><br><span class=\"line\">  # Directory where to save checkpoints to during training.</span><br><span class=\"line\">  checkpoint = &apos;/data/checkpoint/&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># Model specific optimization parameters.</span><br><span class=\"line\">[opt]</span><br><span class=\"line\"></span><br><span class=\"line\">  # Total number of epochs to train for.</span><br><span class=\"line\">  epochs     = 10</span><br><span class=\"line\"></span><br><span class=\"line\">  # Learning rate for the optimizer.</span><br><span class=\"line\">  lr         = 0.01</span><br><span class=\"line\"></span><br><span class=\"line\">  # Loss function name (e.g &apos;Lovasz&apos;, &apos;mIoU&apos; or &apos;CrossEntropy&apos;)</span><br><span class=\"line\">  loss = &apos;Lovasz&apos;</span><br></pre></td></tr></table></figure>\n\n<p>​    RoboSat 会进行多次迭代训练，每次迭代训练都会保存检查点(checkpoint)和各项指标等。其中，训练日志例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--- Hyper Parameters on Dataset: /data/dataset ---</span><br><span class=\"line\">Batch Size:\t 2</span><br><span class=\"line\">Image Size:\t 256</span><br><span class=\"line\">Learning Rate:\t 0.0001</span><br><span class=\"line\">Loss function:\t Lovasz</span><br><span class=\"line\">Weights :\t [1.644471, 5.409126]</span><br><span class=\"line\">---</span><br><span class=\"line\">Epoch: 1/10</span><br><span class=\"line\">Train    loss: 0.3190, mIoU: 0.410, buildings IoU: 0.017, MCC: -0.002</span><br><span class=\"line\">Validate loss: 0.3171, mIoU: 0.405, buildings IoU: 0.000, MCC: nan</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">Epoch: 10/10</span><br><span class=\"line\">Train    loss: 0.2693, mIoU: 0.528, buildings IoU: 0.229, MCC: 0.330</span><br><span class=\"line\">Validate loss: 0.2880, mIoU: 0.491, buildings IoU: 0.167, MCC: 0.262</span><br></pre></td></tr></table></figure>\n\n<p>​    可以选择最好的训练结果，保留其检查点( <code>checkpoint-***.pth</code> )，进入下一步 <code>predict</code>。一般来说，最后一个检查点效果最好。</p>\n<h2 id=\"4-预测\"><a href=\"#4-预测\" class=\"headerlink\" title=\"4. 预测\"></a>4. 预测</h2><h3 id=\"4-1-准备预测区域数据\"><a href=\"#4-1-准备预测区域数据\" class=\"headerlink\" title=\"4.1 准备预测区域数据\"></a>4.1 准备预测区域数据</h3><p>​    RoboSat 仅支持从影像瓦片中提取建筑物，不支持从任意的 jpg 图片中提取。所以我们需要先准备预测区域的瓦片数据。</p>\n<p>​    通过 <a href=\"http://geojson.io/\" target=\"_blank\" rel=\"noopener\">geojson.io</a> 绘制想要提取建筑物的范围，使用矩形框即可。将自动生成的 geojson 保存为 <code>predict_test.json</code>。</p>\n<p>​    通过 2.3 中的 <code>cover</code> 命令，获取待提取范围的瓦片列表 csv 文件，保存到 <code>buildings_predict.tiles</code> 文件中。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu cover  --zoom 18 /data/shp_data/predict_test.json /data/buildings_predict.tiles</span><br></pre></td></tr></table></figure>\n\n<p>​    使用 2.4 中的 <code>download</code> 命令，下载待提取范围的影像瓦片，保存到 <code>images_predict</code> 文件夹中。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu download https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/&#123;z&#125;/&#123;y&#125;/&#123;x&#125; /data/buildings_predict.tiles /data/images_predict</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://github.com/geocompass/robosat_buildings_training/blob/master/img/predict_region_geojson.jpg\" alt=\"预测区域的geojson\"></p>\n<h3 id=\"4-2-预测待提取建筑物概率\"><a href=\"#4-2-预测待提取建筑物概率\" class=\"headerlink\" title=\"4.2 预测待提取建筑物概率\"></a>4.2 预测待提取建筑物概率</h3><p>​    使用保存的检查点来（<code>checkpint</code>）预测图像中每个像素的分割概率，这些分割概率表示每个像素是建筑物还是背景的可能性，然后可以将这些概率转换为离散的分割掩模。</p>\n<p>​    通过 RoboSat 的 <a href=\"https://github.com/mapbox/robosat#rs-predict\" target=\"_blank\" rel=\"noopener\">predict</a> 命令，将待预测区域的建筑物（ <code>images_predict</code> ）提取为分割概率（<code>predict_segmentation-probabilities</code>）。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it -d --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu predict --tile_size 256 --model /data/model-unet.toml --dataset /data/dataset-building.toml --checkpoint /data/checkpoint/checkpoint-00010-of-00010.pth /data/images_predict /data/predict_segmentation-probabilities</span><br></pre></td></tr></table></figure>\n\n<p>​    <code>predict</code> 命令的参数如下：</p>\n<blockquote>\n<p>usage: <code>./rs predict [-h] [--batch_size BATCH_SIZE] --checkpoint CHECKPOINT [--overlap OVERLAP] --tile_size TILE_SIZE [--workers WORKERS] --model MODEL --dataset DATASET tiles probs</code></p>\n<ul>\n<li><p>positional arguments:</p>\n<ul>\n<li><code>tiles</code>   directory to read slippy map image tiles from</li>\n<li><code>probs</code>  directory to save slippy map probability masks to</li>\n</ul>\n</li>\n<li><p>optional arguments:</p>\n<ul>\n<li><code>-h</code>, <code>--help  show this help message and exit</code></li>\n<li><code>--batch_size BATCH_SIZE</code>  images per batch (default: 1)</li>\n<li><code>--checkpoint CHECKPOINT</code>  model checkpoint to load (default: None)</li>\n<li><code>--overlap OVERLAP</code> tile pixel overlap to predict on (default: 32)</li>\n<li><code>--tile_size TILE_SIZE</code> tile size for slippy map tiles (default: None)</li>\n<li><code>--workers WORKERS</code> number of workers pre-processing images (default: 0)</li>\n<li><code>--model MODEL</code> path to model configuration file (default: None)</li>\n<li><code>--dataset DATASET</code>  path to dataset configuration file (default: None)</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p><img src=\"https://github.com/geocompass/robosat_buildings_training/blob/master/img/predit_probabilities.gif\" alt=\"预测建筑物提取概率结果\"></p>\n<h3 id=\"4-3-预测概率转换为建筑物掩模\"><a href=\"#4-3-预测概率转换为建筑物掩模\" class=\"headerlink\" title=\"4.3 预测概率转换为建筑物掩模\"></a>4.3 预测概率转换为建筑物掩模</h3><p>​    通过 RoboSat 的 <a href=\"https://github.com/mapbox/robosat#rs-masks\" target=\"_blank\" rel=\"noopener\">masks</a> 命令，将上一步中的建筑物预测概率结果转换为建筑物掩模（<code>masks</code>），保存到 <code>predict_segmentation-masks</code> 文件夹中。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it -d --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu masks /data/predict_segmentation-masks /data/predict_segmentation-probabilities</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>usage: <code>./rs masks [-h] [--weights WEIGHTS [WEIGHTS ...]] masks probs [probs ...]</code></p>\n<ul>\n<li><p>positional arguments:</p>\n<ul>\n<li><code>masks</code>  slippy map directory to save masks to</li>\n<li><code>probs</code>  slippy map directories with class probabilities</li>\n</ul>\n</li>\n<li><p>optional arguments:</p>\n<ul>\n<li><code>-h</code>, <code>--help</code> show this help message and exit</li>\n<li><code>--weights WEIGHTS [WEIGHTS ...]</code>  weights for weighted average soft-voting (default:<pre><code>None)</code></pre></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p><img src=\"https://github.com/geocompass/robosat_buildings_training/blob/master/img/predit_masks.jpg\" alt=\"预测建筑物提取掩模结果\"></p>\n<h3 id=\"4-4-建筑物掩模转换为geojson\"><a href=\"#4-4-建筑物掩模转换为geojson\" class=\"headerlink\" title=\"4.4 建筑物掩模转换为geojson\"></a>4.4 建筑物掩模转换为geojson</h3><p>​    通过 RoboSat 的 <a href>features</a> 命令，将上一步中的建筑物掩模转换为 geojson，保存在 <code>predict_geojson_features</code> 文件夹中。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu features /data/predict_segmentation-masks /data/predict_geojson_features</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>usage: <code>./rs features [-h] --type {parking} --dataset DATASET masks out</code></p>\n<ul>\n<li><p>positional arguments:</p>\n<ul>\n<li><code>masks</code>  slippy map directory with segmentation masks</li>\n<li><code>out</code> path to GeoJSON file to store features in</li>\n</ul>\n</li>\n<li><p>optional arguments:</p>\n<ul>\n<li><code>-h</code>, <code>--help</code>  show this help message and exit</li>\n<li><code>--type {parking}</code> type of feature to extract (default: None)</li>\n<li><code>--dataset DATASET</code>  path to dataset configuration file (default: None)</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>（目前 <code>features</code> 命令中对 <code>--type</code> 设置有bug，无法正常执行。）</p>\n<h3 id=\"4-5-合并掩模分割的-geojson\"><a href=\"#4-5-合并掩模分割的-geojson\" class=\"headerlink\" title=\"4.5 合并掩模分割的 geojson\"></a>4.5 合并掩模分割的 geojson</h3><p>​    通过 RoboSat 的 <a href=\"https://github.com/mapbox/robosat#rs-merge\" target=\"_blank\" rel=\"noopener\">merge</a>  命令，将上一步中生成的分割的 geojson 要素进行合并，结果保存在 <code>predict_geojson_merge</code>文件夹中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu features /data/predict_geojson /data/predict_geojson_merge</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>usage: <code>./rs merge [-h] --threshold THRESHOLD features out</code></p>\n<ul>\n<li><p>positional arguments:</p>\n<ul>\n<li><code>features</code> GeoJSON file to read features from</li>\n<li><code>out</code> path to GeoJSON to save merged features to</li>\n</ul>\n</li>\n<li><p>optional arguments:</p>\n<ul>\n<li><code>-h</code>, <code>--help</code> show this help message and exit</li>\n<li><code>--threshold THRESHOLD</code> minimum distance to adjacent features, in m (default:<pre><code>None)</code></pre></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>原文链接：<a href=\"https://github.com/geocompass/robosat_buildings_training\" target=\"_blank\" rel=\"noopener\">https://github.com/geocompass/robosat_buildings_training</a></p>\n<p>​    本文介绍了如何使用 <a href=\"https://github.com/mapbox/robosat\" target=\"_blank\" rel=\"noopener\">mapbox/robosat</a> 工具，基于深度学习训练，从常规的遥感影像瓦片地图服务中自动提取建筑物。包括系统准备工作、数据准备工作和训练与建模。通过根据文章的描述，可以完成训练任务。</p>\n<p>​    参考文章：<a href=\"https://www.openstreetmap.org/user/daniel-j-h/diary/44321\" target=\"_blank\" rel=\"noopener\">daniel-j-h : RoboSat ❤️ Tanzania</a></p>\n<ul>\n<li><a href=\"#robosat_buildings_training\">手把手教你如何使用 RoboSat 自动提取建筑物</a><ul>\n<li><a href=\"#1-系统准备工作\">1. 系统准备工作</a><ul>\n<li><a href=\"#11-设备及系统\">1.1 设备及系统</a></li>\n<li><a href=\"#12-安装-docker\">1.2 安装 Docker</a></li>\n<li><a href=\"#13-在-docker-中安装-robosat\">1.3 在 Docker 中安装 Robosat</a></li>\n</ul>\n</li>\n<li><a href=\"#2-数据准备工作\">2. 数据准备工作</a><ul>\n<li><a href=\"#21-建筑物轮廓矢量数据\">2.1 建筑物轮廓矢量数据</a></li>\n<li><a href=\"#22-获取建筑物轮廓geojson数据\">2.2 获取建筑物轮廓geojson数据</a></li>\n<li><a href=\"#23-提取训练区覆盖的瓦片行列号\">2.3 提取训练区覆盖的瓦片行列号</a></li>\n<li><a href=\"#24-下载训练区遥感影像瓦片\">2.4 下载训练区遥感影像瓦片</a></li>\n<li><a href=\"#25-制作训练区矢量数据蒙版标记\">2.5 制作训练区矢量数据蒙版标记</a></li>\n</ul>\n</li>\n<li><a href=\"#3-训练和建模\">3. 训练和建模</a><ul>\n<li><a href=\"#31-分配训练数据验证数据评估数据\">3.1 分配训练数据、验证数据、评估数据</a></li>\n<li><a href=\"#32-权重计算\">3.2 权重计算</a></li>\n<li><a href=\"#33-开始训练\">3.3 开始训练</a></li>\n</ul>\n</li>\n<li><a href=\"#4-预测\">4. 预测</a><ul>\n<li><a href=\"#41-准备预测区域数据\">4.1 准备预测区域数据</a></li>\n<li><a href=\"#42-预测待提取建筑物概率\">4.2 预测待提取建筑物概率</a></li>\n<li><a href=\"#43-预测概率转换为建筑物掩模\">4.3 预测概率转换为建筑物掩模</a></li>\n<li><a href=\"#44-建筑物掩模转换为geojson\">4.4 建筑物掩模转换为geojson</a></li>\n<li><a href=\"#45-合并掩模分割的-geojson\">4.5 合并掩模分割的 geojson</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"1-系统准备工作\"><a href=\"#1-系统准备工作\" class=\"headerlink\" title=\"1. 系统准备工作\"></a>1. 系统准备工作</h2><h3 id=\"1-1-设备及系统\"><a href=\"#1-1-设备及系统\" class=\"headerlink\" title=\"1.1 设备及系统\"></a>1.1 设备及系统</h3><blockquote>\n<p>准备一台安装 Linux 或 MacOS 系统的机器，可以是 CentOS、Ubuntu 或 MacOS。机器可以是实体机，也可以是 VMware 虚拟机。</p>\n</blockquote>\n<h3 id=\"1-2-安装-Docker\"><a href=\"#1-2-安装-Docker\" class=\"headerlink\" title=\"1.2 安装 Docker\"></a>1.2 安装 Docker</h3><blockquote>\n<p>在机器中安装Docker，不建议是Windows版Docker。<a href=\"https://www.runoob.com/docker/macos-docker-install.html\" target=\"_blank\" rel=\"noopener\">MacOS安装Docker</a> ，<a href=\"https://www.runoob.com/docker/centos-docker-install.html\" target=\"_blank\" rel=\"noopener\">CentOS安装Docker</a></p>\n</blockquote>\n<h3 id=\"1-3-在-Docker-中安装-Robosat\"><a href=\"#1-3-在-Docker-中安装-Robosat\" class=\"headerlink\" title=\"1.3 在 Docker 中安装 Robosat\"></a>1.3 在 Docker 中安装 Robosat</h3><blockquote>\n<p> Robosat 的 <a href=\"https://hub.docker.com/r/mapbox/robosat\" target=\"_blank\" rel=\"noopener\">Docker Hub</a>。</p>\n</blockquote>\n<p>​    可以使用两种方式安装 Robosat：</p>\n<ul>\n<li><p>使用 CPU 容器：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu --help</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 GPU 容器（主机上需要 <a href=\"https://github.com/NVIDIA/nvidia-docker\" target=\"_blank\" rel=\"noopener\">nvidia-docker</a>）：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --runtime=nvidia -it --rm -v $PWD:/data --ipc=host mapbox/robosat:latest-gpu train --model /data/model.toml --dataset /data/dataset.toml --workers 4</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"2-数据准备工作\"><a href=\"#2-数据准备工作\" class=\"headerlink\" title=\"2. 数据准备工作\"></a>2. 数据准备工作</h2><h3 id=\"2-1-建筑物轮廓矢量数据\"><a href=\"#2-1-建筑物轮廓矢量数据\" class=\"headerlink\" title=\"2.1 建筑物轮廓矢量数据\"></a>2.1 建筑物轮廓矢量数据</h3><p>​    已有的建筑物轮廓矢量数据用来作为建筑物提取的训练数据源。可以有两种方式获取：</p>\n<ul>\n<li>OSM 数据源，可以在 <a href=\"http://download.geofabrik.de/\" target=\"_blank\" rel=\"noopener\">geofabrik</a> 获取，通过 <a href=\"https://github.com/osmcode/osmium-tool\" target=\"_blank\" rel=\"noopener\">osmium</a> 和 <a href=\"https://github.com/mapbox/robosat\" target=\"_blank\" rel=\"noopener\">robosat</a> 工具<a href=\"https://www.openstreetmap.org/user/daniel-j-h/diary/44321\" target=\"_blank\" rel=\"noopener\">进行处理</a>。</li>\n<li>自有数据源。通过 <a href=\"https://qgis.org/en/site/\" target=\"_blank\" rel=\"noopener\">QGIS</a> 或 ArcMap 等工具，加载遥感影像底图，描述的建筑物轮廓 Shapefile 数据。</li>\n</ul>\n<p>​    <strong>本文使用第二种数据来源，并已<a href=\"https://github.com/geocompass/robosat_buildings_training/tree/master/shp_data\" target=\"_blank\" rel=\"noopener\">开源数据源</a>，开源的矢量数据覆盖厦门核心区。</strong></p>\n<p>​    <strong>考虑到使用个人电脑没有 CUDA 加速训练成本较高，本文使用 <a href=\"https://github.com/geocompass/robosat_buildings_training/blob/master/shp_data/buia_xiamen_min_shp.zip\" target=\"_blank\" rel=\"noopener\">buia_xiamen_min_shp</a>，包含厦门核心区部分区域，共5679个建筑物轮廓。在Docker配置为 处理器(<code>CPU</code>) 4核、内存(<code>RAM</code>)16GB、交换内存(<code>Swap</code>)3GB时，训练时间大约2.5小时。</strong></p>\n<p><img src=\"https://github.com/geocompass/robosat_buildings_training/blob/master/img/buia_xiamen_preview.jpg\" alt=\"训练区矢量数据预览\"></p>\n<h3 id=\"2-2-获取建筑物轮廓geojson数据\"><a href=\"#2-2-获取建筑物轮廓geojson数据\" class=\"headerlink\" title=\"2.2 获取建筑物轮廓geojson数据\"></a>2.2 获取建筑物轮廓geojson数据</h3><p>​    通过在线工具 <a href=\"https://mapshaper.org/\" target=\"_blank\" rel=\"noopener\">mapshaper</a>，将 shapefile 数据转换为 geojson 数据。</p>\n<h3 id=\"2-3-提取训练区覆盖的瓦片行列号\"><a href=\"#2-3-提取训练区覆盖的瓦片行列号\" class=\"headerlink\" title=\"2.3 提取训练区覆盖的瓦片行列号\"></a>2.3 提取训练区覆盖的瓦片行列号</h3><p>​    使用 robosat 的 <a href=\"https://github.com/mapbox/robosat#rs-cover\" target=\"_blank\" rel=\"noopener\">cover</a> 命令，即可获取当前训练区矢量数据覆盖的瓦片行列号，并使用 csv 文件存储。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu cover  --zoom 18 /data/buildings.json /data/buildings.tiles</span><br></pre></td></tr></table></figure>\n\n<p>   <code>cover</code>  命令的参数介绍：</p>\n<blockquote>\n<p>usage: <code>./rs cover [-h] --zoom ZOOM features out</code></p>\n<ul>\n<li>positional arguments:<ul>\n<li><code>features</code>     path to GeoJSON features</li>\n<li><code>out</code>         path to csv file to store tiles in</li>\n</ul>\n</li>\n<li>optional arguments:<ul>\n<li><code>-h</code>, –help   show this help message and exit</li>\n<li><code>--zoom ZOOM</code>  zoom level of tiles (default: None)</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>这里是获取在 18 级下训练区覆盖的瓦片行列号。18 级是国内地图通用的最大级别，如果有国外更清晰数据源，可设置更高地图级别。</p>\n<p>​    cover 工具对训练区矢量数据计算的瓦片行列号使用的是通用的 WGS84-&gt;Web 墨卡托投影坐标系。</p>\n<blockquote>\n<p>小知识：</p>\n<ul>\n<li><code>$PWD:/data</code> 是将当前路径映射为docker中的 <code>/data</code> 路径。</li>\n<li>在新版 robosat 的 docker 安装包中，将 <code>./rs</code> 命令行工具对应为<code>docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu</code> 命令。</li>\n<li>docker 版 robosat ，以命令行方式执行，无法生成类似 nginx 的 docker 服务，所以执行完成后立即销毁了 docker 的 container。</li>\n</ul>\n</blockquote>\n<h3 id=\"2-4-下载训练区遥感影像瓦片\"><a href=\"#2-4-下载训练区遥感影像瓦片\" class=\"headerlink\" title=\"2.4 下载训练区遥感影像瓦片\"></a>2.4 下载训练区遥感影像瓦片</h3><p>​    使用 robosat 的 <a href=\"https://github.com/mapbox/robosat#rs-download\" target=\"_blank\" rel=\"noopener\">download</a> 工具，即可获取当前训练区矢量数据覆盖的遥感影像，下载的瓦片通过 2.3 节中的<strong>buildings.tiles</strong> 确定。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu download http://ditu.google.cn/maps/vt/lyrs=s&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;z=&#123;z&#125; /data/buildings.tiles /data/tiles</span><br></pre></td></tr></table></figure>\n\n<p>​    <code>download</code> 命令的参数介绍：</p>\n<blockquote>\n<p>usage: <code>./rs download [-h] [--ext EXT] [--rate RATE] url tiles out</code></p>\n<ul>\n<li>positional arguments:<ul>\n<li><code>url</code>  endpoint with {z}/{x}/{y} variables to fetch image tiles from</li>\n<li><code>tiles</code>  path to .csv tiles file</li>\n<li><code>out</code>  path to slippy map directory for storing tiles</li>\n</ul>\n</li>\n<li>optional arguments:<ul>\n<li><code>-h</code>, –help   show this help message and exit</li>\n<li><code>--ext EXT</code> file format to save images in (default: webp)</li>\n<li><code>--rate RATE</code> rate limit in max. requests per second (default: 10)</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>​    这里介绍几个常用的 Web 墨卡托投影的（WGS84坐标系）遥感影像数据源：</p>\n<blockquote>\n<ul>\n<li><a href=\"https://ditu.google.cn/\" target=\"_blank\" rel=\"noopener\">谷歌地图CN影像</a>：<a href=\"http://ditu.google.cn/maps/vt/lyrs=s&amp;x={x}&amp;y={y}&amp;z={z}\" target=\"_blank\" rel=\"noopener\">http://ditu.google.cn/maps/vt/lyrs=s&amp;x={x}&amp;y={y}&amp;z={z}</a></li>\n<li><a href=\"https://map.tianditu.gov.cn/\" target=\"_blank\" rel=\"noopener\">天地图影像</a>：<a href=\"https://t4.tianditu.gov.cn/DataServer?T=img_w&amp;x={x}&amp;y={y}&amp;l={z}&amp;tk=2ce94f67e58faa24beb7cb8a09780552\" target=\"_blank\" rel=\"noopener\">https://t4.tianditu.gov.cn/DataServer?T=img_w&amp;x={x}&amp;y={y}&amp;l={z}&amp;tk=2ce94f67e58faa24beb7cb8a09780552</a></li>\n<li><a href=\"https://server.arcgisonline.com/arcgis/rest/services/World_Imagery/MapServer?f=jsapi\" target=\"_blank\" rel=\"noopener\">ArcGIS Online影像</a>：<a href=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\" target=\"_blank\" rel=\"noopener\">https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}</a></li>\n<li><a href=\"https://api.mapbox.com/styles/v1/mapbox/satellite-v9.html?title=true&access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4M29iazA2Z2gycXA4N2pmbDZmangifQ.-g_vE53SD2WrJ6tFX7QHmA#0.75/29.3/-124.8\" target=\"_blank\" rel=\"noopener\">MapBox影像</a>：<a href=\"https://api.mapbox.com/v4/mapbox.satellite/{z}/{x}/{y}@2x.png?sku=101KOLcQaDwG1&amp;access_token=[token]\" target=\"_blank\" rel=\"noopener\">https://api.mapbox.com/v4/mapbox.satellite/{z}/{x}/{y}@2x.png?sku=101KOLcQaDwG1&amp;access_token=[token]</a></li>\n</ul>\n</blockquote>\n<p>​    几种遥感影像数据源的比较：</p>\n<ul>\n<li><p>从访问速度来看，天地图&gt;谷歌&gt;ArcGIS&gt;Mapbox。</p>\n</li>\n<li><p>从遥感影像的质量来说，总体来说：</p>\n<ul>\n<li>城市地区：谷歌=ArcGIS&gt;天地图&gt;Mapbox</li>\n<li>农村地图：谷歌&gt;天地图&gt;ArcGIS&gt;Mapbox</li>\n</ul>\n</li>\n<li><p>层级覆盖：谷歌&gt;天地图&gt;ArcGIS&gt;Mapbox</p>\n</li>\n</ul>\n<p>​    不同影像数据源的质量不能一概而论，由于传感器不同、过境时间不同等因素，不同地区的影像数据源质量均不同，建议使用 QGIS 加载训练区位置的影像对比选择。</p>\n<h3 id=\"2-5-制作训练区矢量数据蒙版标记\"><a href=\"#2-5-制作训练区矢量数据蒙版标记\" class=\"headerlink\" title=\"2.5 制作训练区矢量数据蒙版标记\"></a>2.5 制作训练区矢量数据蒙版标记</h3><p>​    使用 2.2 节中制作的 geojson 数据，通过 robosat 的 <a href=\"https://github.com/mapbox/robosat#rs-rasterize\" target=\"_blank\" rel=\"noopener\">rasterize</a> 工具可制作训练区矢量数据的蒙版标记数据。蒙版标记数据与瓦片数据一一相对应，使用同样的 <strong>buildings.tiles</strong> 瓦片列表产生。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu rasterize --dataset /data/dataset-building.toml --zoom 18 --size 256 /data/buildings.json /data/buildings.tiles /data/masks</span><br></pre></td></tr></table></figure>\n\n<p>​    <code>rasterise</code> 命令的参数介绍：</p>\n<blockquote>\n<p>usage: <code>./rs rasterize [-h] --dataset DATASET --zoom ZOOM [--size SIZE] features tiles out</code></p>\n<ul>\n<li><p>positional arguments:</p>\n<ul>\n<li><code>features</code> path to GeoJSON features file</li>\n<li><code>tiles</code> path to .csv tiles file</li>\n<li><code>out</code> directory to write converted images</li>\n</ul>\n</li>\n<li><p>optional arguments:<br>  <code>-h</code>, <code>--help</code> show this help message and exit<br>  <code>--dataset DATASET</code> path to dataset configuration file (default: None)<br>  <code>--zoom ZOOM</code>  zoom level of tiles (default: None)<br>  <code>--size SIZE</code> size of rasterized image tiles in pixels (default: 512)</p>\n</li>\n</ul>\n</blockquote>\n<p>  这里使用到了 <code>dataset-building.toml</code> 配置文件，文件中配置了瓦片地图路径、分类方式、蒙版标记的颜色等信息。示例配置可以查看官方示例文件 <a href=\"https://github.com/mapbox/robosat/blob/master/config/dataset-parking.toml\" target=\"_blank\" rel=\"noopener\">dataset-parking.toml</a> 。本训练中用到的 <a href=\"https://github.com/geocompass/robosat_buildings_training/dataset-building.toml\" target=\"_blank\" rel=\"noopener\">dataset-building.toml</a> 的配置内容如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Configuration related to a specific dataset.</span></span><br><span class=\"line\"><span class=\"comment\"># For syntax see: https://github.com/toml-lang/toml#table-of-contents</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Dataset specific common attributes.</span></span><br><span class=\"line\"><span class=\"section\">[common]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># The slippy map dataset's base directory.</span></span><br><span class=\"line\">  dataset = '/Users/wucan/Document/robosat/tiles/'</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Human representation for classes.</span></span><br><span class=\"line\">  classes = ['background', 'buildings']</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Color map for visualization and representing classes in masks.</span></span><br><span class=\"line\">  <span class=\"comment\"># <span class=\"doctag\">Note:</span> available colors can be found in `robosat/colors.py`</span></span><br><span class=\"line\">  colors  = ['denim', 'orange']</span><br></pre></td></tr></table></figure>\n\n<p>​    配置文档中，最重要的是配置 <code>dataset</code> 目录，也就是上一步中下载的遥感影像瓦片路径。制作的蒙版标记效果如下图。</p>\n<p><img src=\"https://github.com/geocompass/robosat_buildings_training/blob/master/img/mask.gif\" alt=\"mask\"></p>\n<p>​    至此，训练和建模所需的瓦片和蒙版标记已经全部准备完，分别在 <code>tiles</code> 和 <code>masks</code> 目录中。</p>\n<h2 id=\"3-训练和建模\"><a href=\"#3-训练和建模\" class=\"headerlink\" title=\"3. 训练和建模\"></a>3. 训练和建模</h2><h3 id=\"3-1-分配训练数据、验证数据、评估数据\"><a href=\"#3-1-分配训练数据、验证数据、评估数据\" class=\"headerlink\" title=\"3.1 分配训练数据、验证数据、评估数据\"></a>3.1 分配训练数据、验证数据、评估数据</h3><p>​    RoboSat 分割模型是一个完全卷积的神经网络，需要将上一步准备好的数据集拆分为三部分，分别为<code>训练数据集</code> 、<code>验证数据集</code>、<code>评估数据集</code>，比例分别为80%、10%、10%。每一部分的数据集中，都包含影像瓦片和蒙版标记瓦片。</p>\n<ul>\n<li><p>训练数据集：a training dataset on which we train the model on</p>\n</li>\n<li><p>验证数据集：a validation dataset on which we calculate metrics on after training</p>\n</li>\n<li><p>评估数据集：a hold-out evaluation dataset if you want to do hyper-parameter tuning</p>\n<p> 将步骤 2 中的数据进行随机分配的过程非常简单：</p>\n</li>\n<li><p>新建三个 csv 文件： <code>csv_training.tiles</code> 、<code>csv_validation.tiles</code>、 <code>csv_evaluation.tiles</code> </p>\n</li>\n<li><p>将 <code>buildings.tiles</code> 中的瓦片列表随机按 80%、10%、10% 比例进行拷贝与粘贴。注意三个文件间的瓦片列表内容不能重复。</p>\n</li>\n</ul>\n<p>​    使用 RoboSat 中的 <a href=\"https://github.com/mapbox/robosat#rs-subset\" target=\"_blank\" rel=\"noopener\">subset</a> 命令，将 <code>tiles</code> 和 <code>masks</code> 中的瓦片和蒙版按照上面三个 csv 文件的瓦片列表分配进行组织影像瓦片和蒙版标记数据。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 准备训练数据集</span><br><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/tiles/ /data/csv_training.tiles /data/dataset/training/images</span><br><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/masks/ /data/csv_training.tiles /data/dataset/training/labels</span><br><span class=\"line\"><span class=\"meta\">#</span> 准备验证数据集</span><br><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/tiles/ /data/csv_validation.tiles /data/dataset/validation/images</span><br><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/masks/ /data/csv_validation.tiles /data/dataset/validation/labels</span><br><span class=\"line\"><span class=\"meta\">#</span> 准备评估数据集</span><br><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/tiles/ /data/csv_evaluation.tiles /data/dataset/evaluation/images</span><br><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/masks/ /data/csv_evaluation.tiles /data/dataset/evaluation/labels</span><br></pre></td></tr></table></figure>\n\n<p>​    <code>subset</code> 命令的参数介绍：</p>\n<blockquote>\n<p>usage: <code>./rs subset [-h] images tiles out</code></p>\n<ul>\n<li><p>positional arguments:</p>\n<ul>\n<li><code>images</code> directory to read slippy map image tiles from for filtering</li>\n<li><code>tiles</code> csv to filter images by</li>\n<li><code>out</code> directory to save filtered images to</li>\n</ul>\n</li>\n<li><p>optional arguments:</p>\n<ul>\n<li><code>-h</code>, <code>--help</code>  show this help message and exit</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>​    分类完成以后，将会生成 <code>/data/dataset</code> 目录，目录结构如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataset</span><br><span class=\"line\">|  training</span><br><span class=\"line\">|  |  images</span><br><span class=\"line\">|  |  labels</span><br><span class=\"line\">|  validataion</span><br><span class=\"line\">|  |  images</span><br><span class=\"line\">|  |  labels</span><br><span class=\"line\">|  evaluation</span><br><span class=\"line\">|  |  images</span><br><span class=\"line\">|  |  labels</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-权重计算\"><a href=\"#3-2-权重计算\" class=\"headerlink\" title=\"3.2 权重计算\"></a>3.2 权重计算</h3><p>​    因为前景和背景在数据集中分布不均，可以使用 RoboSat 中的 <a href=\"https://github.com/mapbox/robosat#rs-weights\" target=\"_blank\" rel=\"noopener\">weights</a> 命令，在模型训练之前计算一下每个类的分布。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu weights --dataset /data/dataset-building-weights.toml</span><br></pre></td></tr></table></figure>\n\n<p>​    <code>weights</code> 命令的参数如下：</p>\n<blockquote>\n<p>usage: <code>./rs weights [-h] --dataset DATASET</code></p>\n<ul>\n<li>optional arguments:<ul>\n<li><code>-h</code>, <code>--help</code>  show this help message and exit</li>\n<li><code>--dataset DATASET</code> path to dataset configuration file (default: None)  </li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>​    这里，用到了<code>dataset-building-weights.toml</code> ，是将前面步骤中的 <code>dataset-building.toml</code> 瓦片路径修改为包含训练数据集 <code>dataset</code> 的路径。执行权重计算命令后，得到权重为：<code>values = [1.653415, 5.266637]</code> 。将其追加到 <code>dataset-building-weights.toml</code> 文件中，结果如下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Configuration related to a specific dataset.</span><br><span class=\"line\"># For syntax see: https://github.com/toml-lang/toml#table-of-contents</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># Dataset specific common attributes.</span><br><span class=\"line\">[common]</span><br><span class=\"line\"></span><br><span class=\"line\">  # The slippy map dataset&apos;s base directory.</span><br><span class=\"line\">  dataset = &apos;/data/dataset&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">  # Human representation for classes.</span><br><span class=\"line\">  classes = [&apos;background&apos;, &apos;buildings&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">  # Color map for visualization and representing classes in masks.</span><br><span class=\"line\">  # Note: available colors can be found in `robosat/colors.py`</span><br><span class=\"line\">  colors  = [&apos;denim&apos;, &apos;orange&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\"># Dataset specific class weights computes on the training data.</span><br><span class=\"line\"># Needed by &apos;mIoU&apos; and &apos;CrossEntropy&apos; losses to deal with unbalanced classes.</span><br><span class=\"line\"># Note: use `./rs weights -h` to compute these for new datasets.</span><br><span class=\"line\">[weights]</span><br><span class=\"line\">  values = [1.653415, 5.266637]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-开始训练\"><a href=\"#3-3-开始训练\" class=\"headerlink\" title=\"3.3 开始训练\"></a>3.3 开始训练</h3><p>​    RoboSat 使用 <a href=\"https://github.com/mapbox/robosat#rs-train\" target=\"_blank\" rel=\"noopener\">train</a> 命令进行训练。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu train --model /data/model-unet.toml --dataset /data/dataset-building-weights.toml</span><br></pre></td></tr></table></figure>\n\n<p>​    <code>train</code> 命令的参数如下：</p>\n<blockquote>\n<p>usage: <code>./rs train [-h] --model MODEL --dataset DATASET [--checkpoint CHECKPOINT] [--resume RESUME] [--workers WORKERS]</code></p>\n<ul>\n<li><p>positional arguments:</p>\n<ul>\n<li><code>--model MODEL</code> path to model configuration file (default: None)</li>\n<li><code>--dataset DATASET</code> path to dataset configuration file (default: None)</li>\n</ul>\n</li>\n<li><p>optional arguments:</p>\n<ul>\n<li><code>-h</code>, `–help show this help message and exit</li>\n<li><code>--checkpoint CHECKPOINT</code>  path to a model checkpoint (to retrain) (default: None)</li>\n<li><code>--resume RESUME</code>   resume training or fine-tuning (if checkpoint)  (default: False)</li>\n<li><code>--workers WORKERS</code>  number of workers pre-processi ng images (default: 0)  </li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>​    这里多了一个配置文件 <code>model-unet.toml</code> ，这个配置文件主要用来配置训练过程中的参数，包括是否启用 CUDA 、训练批次大小、影像瓦片的像素大小、检查点存储路径等。官方给出了<a href=\"https://github.com/mapbox/robosat/blob/master/config/model-unet.toml\" target=\"_blank\" rel=\"noopener\">示例配置文件</a>，根据本实验的情况做了修改如下，配置如下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Configuration related to a specific model.</span><br><span class=\"line\"># For syntax see: https://github.com/toml-lang/toml#table-of-contents</span><br><span class=\"line\"></span><br><span class=\"line\"># Model specific common attributes.</span><br><span class=\"line\">[common]</span><br><span class=\"line\"></span><br><span class=\"line\">  # Use CUDA for GPU acceleration.</span><br><span class=\"line\">  cuda       = false</span><br><span class=\"line\"></span><br><span class=\"line\">  # Batch size for training.</span><br><span class=\"line\">  batch_size = 2</span><br><span class=\"line\"></span><br><span class=\"line\">  # Image side size in pixels.</span><br><span class=\"line\">  image_size = 256</span><br><span class=\"line\"></span><br><span class=\"line\">  # Directory where to save checkpoints to during training.</span><br><span class=\"line\">  checkpoint = &apos;/data/checkpoint/&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># Model specific optimization parameters.</span><br><span class=\"line\">[opt]</span><br><span class=\"line\"></span><br><span class=\"line\">  # Total number of epochs to train for.</span><br><span class=\"line\">  epochs     = 10</span><br><span class=\"line\"></span><br><span class=\"line\">  # Learning rate for the optimizer.</span><br><span class=\"line\">  lr         = 0.01</span><br><span class=\"line\"></span><br><span class=\"line\">  # Loss function name (e.g &apos;Lovasz&apos;, &apos;mIoU&apos; or &apos;CrossEntropy&apos;)</span><br><span class=\"line\">  loss = &apos;Lovasz&apos;</span><br></pre></td></tr></table></figure>\n\n<p>​    RoboSat 会进行多次迭代训练，每次迭代训练都会保存检查点(checkpoint)和各项指标等。其中，训练日志例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--- Hyper Parameters on Dataset: /data/dataset ---</span><br><span class=\"line\">Batch Size:\t 2</span><br><span class=\"line\">Image Size:\t 256</span><br><span class=\"line\">Learning Rate:\t 0.0001</span><br><span class=\"line\">Loss function:\t Lovasz</span><br><span class=\"line\">Weights :\t [1.644471, 5.409126]</span><br><span class=\"line\">---</span><br><span class=\"line\">Epoch: 1/10</span><br><span class=\"line\">Train    loss: 0.3190, mIoU: 0.410, buildings IoU: 0.017, MCC: -0.002</span><br><span class=\"line\">Validate loss: 0.3171, mIoU: 0.405, buildings IoU: 0.000, MCC: nan</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">Epoch: 10/10</span><br><span class=\"line\">Train    loss: 0.2693, mIoU: 0.528, buildings IoU: 0.229, MCC: 0.330</span><br><span class=\"line\">Validate loss: 0.2880, mIoU: 0.491, buildings IoU: 0.167, MCC: 0.262</span><br></pre></td></tr></table></figure>\n\n<p>​    可以选择最好的训练结果，保留其检查点( <code>checkpoint-***.pth</code> )，进入下一步 <code>predict</code>。一般来说，最后一个检查点效果最好。</p>\n<h2 id=\"4-预测\"><a href=\"#4-预测\" class=\"headerlink\" title=\"4. 预测\"></a>4. 预测</h2><h3 id=\"4-1-准备预测区域数据\"><a href=\"#4-1-准备预测区域数据\" class=\"headerlink\" title=\"4.1 准备预测区域数据\"></a>4.1 准备预测区域数据</h3><p>​    RoboSat 仅支持从影像瓦片中提取建筑物，不支持从任意的 jpg 图片中提取。所以我们需要先准备预测区域的瓦片数据。</p>\n<p>​    通过 <a href=\"http://geojson.io/\" target=\"_blank\" rel=\"noopener\">geojson.io</a> 绘制想要提取建筑物的范围，使用矩形框即可。将自动生成的 geojson 保存为 <code>predict_test.json</code>。</p>\n<p>​    通过 2.3 中的 <code>cover</code> 命令，获取待提取范围的瓦片列表 csv 文件，保存到 <code>buildings_predict.tiles</code> 文件中。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu cover  --zoom 18 /data/shp_data/predict_test.json /data/buildings_predict.tiles</span><br></pre></td></tr></table></figure>\n\n<p>​    使用 2.4 中的 <code>download</code> 命令，下载待提取范围的影像瓦片，保存到 <code>images_predict</code> 文件夹中。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu download https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/&#123;z&#125;/&#123;y&#125;/&#123;x&#125; /data/buildings_predict.tiles /data/images_predict</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://github.com/geocompass/robosat_buildings_training/blob/master/img/predict_region_geojson.jpg\" alt=\"预测区域的geojson\"></p>\n<h3 id=\"4-2-预测待提取建筑物概率\"><a href=\"#4-2-预测待提取建筑物概率\" class=\"headerlink\" title=\"4.2 预测待提取建筑物概率\"></a>4.2 预测待提取建筑物概率</h3><p>​    使用保存的检查点来（<code>checkpint</code>）预测图像中每个像素的分割概率，这些分割概率表示每个像素是建筑物还是背景的可能性，然后可以将这些概率转换为离散的分割掩模。</p>\n<p>​    通过 RoboSat 的 <a href=\"https://github.com/mapbox/robosat#rs-predict\" target=\"_blank\" rel=\"noopener\">predict</a> 命令，将待预测区域的建筑物（ <code>images_predict</code> ）提取为分割概率（<code>predict_segmentation-probabilities</code>）。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it -d --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu predict --tile_size 256 --model /data/model-unet.toml --dataset /data/dataset-building.toml --checkpoint /data/checkpoint/checkpoint-00010-of-00010.pth /data/images_predict /data/predict_segmentation-probabilities</span><br></pre></td></tr></table></figure>\n\n<p>​    <code>predict</code> 命令的参数如下：</p>\n<blockquote>\n<p>usage: <code>./rs predict [-h] [--batch_size BATCH_SIZE] --checkpoint CHECKPOINT [--overlap OVERLAP] --tile_size TILE_SIZE [--workers WORKERS] --model MODEL --dataset DATASET tiles probs</code></p>\n<ul>\n<li><p>positional arguments:</p>\n<ul>\n<li><code>tiles</code>   directory to read slippy map image tiles from</li>\n<li><code>probs</code>  directory to save slippy map probability masks to</li>\n</ul>\n</li>\n<li><p>optional arguments:</p>\n<ul>\n<li><code>-h</code>, <code>--help  show this help message and exit</code></li>\n<li><code>--batch_size BATCH_SIZE</code>  images per batch (default: 1)</li>\n<li><code>--checkpoint CHECKPOINT</code>  model checkpoint to load (default: None)</li>\n<li><code>--overlap OVERLAP</code> tile pixel overlap to predict on (default: 32)</li>\n<li><code>--tile_size TILE_SIZE</code> tile size for slippy map tiles (default: None)</li>\n<li><code>--workers WORKERS</code> number of workers pre-processing images (default: 0)</li>\n<li><code>--model MODEL</code> path to model configuration file (default: None)</li>\n<li><code>--dataset DATASET</code>  path to dataset configuration file (default: None)</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p><img src=\"https://github.com/geocompass/robosat_buildings_training/blob/master/img/predit_probabilities.gif\" alt=\"预测建筑物提取概率结果\"></p>\n<h3 id=\"4-3-预测概率转换为建筑物掩模\"><a href=\"#4-3-预测概率转换为建筑物掩模\" class=\"headerlink\" title=\"4.3 预测概率转换为建筑物掩模\"></a>4.3 预测概率转换为建筑物掩模</h3><p>​    通过 RoboSat 的 <a href=\"https://github.com/mapbox/robosat#rs-masks\" target=\"_blank\" rel=\"noopener\">masks</a> 命令，将上一步中的建筑物预测概率结果转换为建筑物掩模（<code>masks</code>），保存到 <code>predict_segmentation-masks</code> 文件夹中。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it -d --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu masks /data/predict_segmentation-masks /data/predict_segmentation-probabilities</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>usage: <code>./rs masks [-h] [--weights WEIGHTS [WEIGHTS ...]] masks probs [probs ...]</code></p>\n<ul>\n<li><p>positional arguments:</p>\n<ul>\n<li><code>masks</code>  slippy map directory to save masks to</li>\n<li><code>probs</code>  slippy map directories with class probabilities</li>\n</ul>\n</li>\n<li><p>optional arguments:</p>\n<ul>\n<li><code>-h</code>, <code>--help</code> show this help message and exit</li>\n<li><code>--weights WEIGHTS [WEIGHTS ...]</code>  weights for weighted average soft-voting (default:<pre><code>None)</code></pre></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p><img src=\"https://github.com/geocompass/robosat_buildings_training/blob/master/img/predit_masks.jpg\" alt=\"预测建筑物提取掩模结果\"></p>\n<h3 id=\"4-4-建筑物掩模转换为geojson\"><a href=\"#4-4-建筑物掩模转换为geojson\" class=\"headerlink\" title=\"4.4 建筑物掩模转换为geojson\"></a>4.4 建筑物掩模转换为geojson</h3><p>​    通过 RoboSat 的 <a href>features</a> 命令，将上一步中的建筑物掩模转换为 geojson，保存在 <code>predict_geojson_features</code> 文件夹中。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu features /data/predict_segmentation-masks /data/predict_geojson_features</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>usage: <code>./rs features [-h] --type {parking} --dataset DATASET masks out</code></p>\n<ul>\n<li><p>positional arguments:</p>\n<ul>\n<li><code>masks</code>  slippy map directory with segmentation masks</li>\n<li><code>out</code> path to GeoJSON file to store features in</li>\n</ul>\n</li>\n<li><p>optional arguments:</p>\n<ul>\n<li><code>-h</code>, <code>--help</code>  show this help message and exit</li>\n<li><code>--type {parking}</code> type of feature to extract (default: None)</li>\n<li><code>--dataset DATASET</code>  path to dataset configuration file (default: None)</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>（目前 <code>features</code> 命令中对 <code>--type</code> 设置有bug，无法正常执行。）</p>\n<h3 id=\"4-5-合并掩模分割的-geojson\"><a href=\"#4-5-合并掩模分割的-geojson\" class=\"headerlink\" title=\"4.5 合并掩模分割的 geojson\"></a>4.5 合并掩模分割的 geojson</h3><p>​    通过 RoboSat 的 <a href=\"https://github.com/mapbox/robosat#rs-merge\" target=\"_blank\" rel=\"noopener\">merge</a>  命令，将上一步中生成的分割的 geojson 要素进行合并，结果保存在 <code>predict_geojson_merge</code>文件夹中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu features /data/predict_geojson /data/predict_geojson_merge</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>usage: <code>./rs merge [-h] --threshold THRESHOLD features out</code></p>\n<ul>\n<li><p>positional arguments:</p>\n<ul>\n<li><code>features</code> GeoJSON file to read features from</li>\n<li><code>out</code> path to GeoJSON to save merged features to</li>\n</ul>\n</li>\n<li><p>optional arguments:</p>\n<ul>\n<li><code>-h</code>, <code>--help</code> show this help message and exit</li>\n<li><code>--threshold THRESHOLD</code> minimum distance to adjacent features, in m (default:<pre><code>None)</code></pre></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n"},{"title":"first-lgh","date":"2019-08-15T09:57:21.000Z","_content":"\n\n\ntest lgh","source":"_posts/first-lgh.md","raw":"---\ntitle: first-lgh\ndate: 2019-08-15 17:57:21\ntags:\n---\n\n\n\ntest lgh","slug":"first-lgh","published":1,"updated":"2019-08-15T14:34:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzgxp32f0001otjf6u64hlk4","content":"<p>test lgh</p>\n","site":{"data":{}},"excerpt":"","more":"<p>test lgh</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2019-08-14T12:46:17.000Z","updated":"2019-08-14T12:46:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzgxp32j0003otjfk5gx2fuz","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"first-post","date":"2019-08-14T12:23:21.000Z","_content":"\n## test\n\n测试内容\n","source":"_posts/first-post.md","raw":"---\ntitle: first-post\ndate: 2019-08-14 20:23:21\ntags:\n---\n\n## test\n\n测试内容\n","slug":"first-post","published":1,"updated":"2019-08-14T12:46:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzgxp32k0004otjfea70wrmk","content":"<h2 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h2><p>测试内容</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h2><p>测试内容</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjzgxp32b0000otjfva1kjxyo","tag_id":"cjzgxp32h0002otjf0ny199yz","_id":"cjzgxp32l0005otjf3kb9inii"}],"Tag":[{"name":"大数据","_id":"cjzgxp32h0002otjf0ny199yz"}]}}