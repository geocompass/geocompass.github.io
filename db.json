{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/miho/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/miho/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/miho/source/images/alipay.png","path":"images/alipay.png","modified":0,"renderable":1},{"_id":"themes/miho/source/images/geocompass.png","path":"images/geocompass.png","modified":0,"renderable":1},{"_id":"themes/miho/source/images/scrollbar_arrow.png","path":"images/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/miho/source/images/wechat.png","path":"images/wechat.png","modified":0,"renderable":1},{"_id":"themes/miho/source/js/animate.js","path":"js/animate.js","modified":0,"renderable":1},{"_id":"themes/miho/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/miho/source/js/pace.min.js","path":"js/pace.min.js","modified":0,"renderable":1},{"_id":"themes/miho/source/js/particles.js","path":"js/particles.js","modified":0,"renderable":1},{"_id":"themes/miho/source/js/pop-img.js","path":"js/pop-img.js","modified":0,"renderable":1},{"_id":"themes/miho/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/miho/source/images/map.jpg","path":"images/map.jpg","modified":0,"renderable":1},{"_id":"themes/miho/source/images/markdown.jpg","path":"images/markdown.jpg","modified":0,"renderable":1},{"_id":"themes/miho/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/miho/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/miho/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/miho/source/images/banner.jpg","path":"images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/miho/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/miho/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/miho/README.md","hash":"e2f4366c0229e1965287f15fe949d2b3f191cd0b","modified":1566388686755},{"_id":"themes/miho/_config.yml","hash":"b33e54e3f2eaa2ea30df761e3455dd489bc80722","modified":1566388686756},{"_id":"themes/miho/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1566388687021},{"_id":"themes/miho/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1566388687026},{"_id":"themes/miho/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1566388687027},{"_id":"themes/miho/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1566388687033},{"_id":"themes/miho/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1566388687034},{"_id":"themes/miho/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1566388687035},{"_id":"themes/miho/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1566388687037},{"_id":"themes/miho/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1566388686884},{"_id":"themes/miho/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1566388686885},{"_id":"themes/miho/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1566388686886},{"_id":"themes/miho/layout/layout.ejs","hash":"8ddf881c939ba91919abc3077e0ea53418e00a6a","modified":1566388686899},{"_id":"themes/miho/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1566388686901},{"_id":"themes/miho/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1566388686902},{"_id":"themes/miho/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1566388686902},{"_id":"themes/miho/source/favicon.ico","hash":"c525bc7f4dea71d5c6ab9a961214142207733467","modified":1566388686759},{"_id":"source/_posts/about/index.md","hash":"da291ba42a485493e6c40eb37ebdb998ae13834b","modified":1566388273942},{"_id":"source/_posts/bigdata/robosat-buildings-training-step-by-step.md","hash":"7dd3f0f5feac8d8666fef7015335d3d24228fdd5","modified":1566388273944},{"_id":"source/_posts/write/write.md","hash":"be910c9476735c7068045d28e2416b0b0bec8e39","modified":1566388273945},{"_id":"themes/miho/_source/about/index.md","hash":"07928e5eb871c17037d3592c5b5de67d0b13579e","modified":1566388686758},{"_id":"themes/miho/_source/blog/installation-configuration.md","hash":"b31df05ea1544a1e99e50693ef4b60b850f3bae2","modified":1566388686757},{"_id":"themes/miho/layout/_widget/archive.ejs","hash":"0fe1e52c291c9499bd05b966e0b9aac5be351c58","modified":1566388686903},{"_id":"themes/miho/layout/_widget/category.ejs","hash":"866790acc13fed44b7ef74c3e19c300a3d6180d8","modified":1566388686908},{"_id":"themes/miho/layout/_widget/recent_posts.ejs","hash":"16800f85ffb036d2644a26e02facd61acb3706e9","modified":1566388686909},{"_id":"themes/miho/layout/_widget/tag.ejs","hash":"6017c54a8c3c8ff8db491cfbea3100c139da75d6","modified":1566388686915},{"_id":"themes/miho/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1566388686915},{"_id":"themes/miho/layout/_partial/after-footer.ejs","hash":"f290090679cd7393b713b7bb5440e200eab5e1ce","modified":1566388686916},{"_id":"themes/miho/layout/_partial/archive-post.ejs","hash":"38bb2d96e64aad408ce5245cac8a43bc83995839","modified":1566388686917},{"_id":"themes/miho/layout/_partial/archive.ejs","hash":"2deeffb3851eee9594088a9e20325fb041e3006c","modified":1566388686919},{"_id":"themes/miho/layout/_partial/article.ejs","hash":"c904d9cb2cab7fddc0e038ebfb18ac42679e56e8","modified":1566388686964},{"_id":"themes/miho/layout/_partial/footer.ejs","hash":"2961c3ef06906cd18bcb1e5d3581475e83ed8670","modified":1566388686966},{"_id":"themes/miho/layout/_partial/head.ejs","hash":"412b063af00401aa2647e5ec9c30c3a961db144b","modified":1566388686967},{"_id":"themes/miho/layout/_partial/header.ejs","hash":"9f03288d4a29e9a4fd7400540e7ff9c1dcbbb22e","modified":1566388686968},{"_id":"themes/miho/layout/_partial/mobile-nav.ejs","hash":"97d02977ed2fa70dde4b25deb87d1b12e5e58301","modified":1566388686969},{"_id":"themes/miho/layout/_partial/search.ejs","hash":"b7e2df6a7ca6c6d2d26039cb10c1e92480000e7f","modified":1566388686969},{"_id":"themes/miho/layout/_partial/sidebar.ejs","hash":"e321e88ea82474f51ea031846b8e42c216f0a0b4","modified":1566388686970},{"_id":"themes/miho/source/css/_extend.styl","hash":"7506d6eca9c34029817b90ebcbfe0398cf49a0d8","modified":1566388686809},{"_id":"themes/miho/source/css/_variables.styl","hash":"00f67e78896e78ce9e498beaf485c4091e60f777","modified":1566388686810},{"_id":"themes/miho/source/css/style.styl","hash":"2b4e7bf607e7d3429d77014c46acdb15aa3309ad","modified":1566388686809},{"_id":"themes/miho/source/images/alipay.png","hash":"b3f9db844b1e522fc55125302f2979f50a6d0529","modified":1566388686794},{"_id":"themes/miho/source/images/geocompass.png","hash":"7efc51a259e478469e549e61d43be55322b3ab90","modified":1566388686799},{"_id":"themes/miho/source/images/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1566388686806},{"_id":"themes/miho/source/images/wechat.png","hash":"8de97bf5bb3f3a0845e02172f79d6bba2fb6bb3b","modified":1566388686808},{"_id":"themes/miho/source/js/animate.js","hash":"c9776b5e345e00b020261220518a472e8d61b61c","modified":1566388686760},{"_id":"themes/miho/source/js/main.js","hash":"bdd264350095f87aca9a4105c64ecf462f90ad20","modified":1566388686771},{"_id":"themes/miho/source/js/pace.min.js","hash":"64759f14e0f92d62df57eb752f1745a16aba93ce","modified":1566388686790},{"_id":"themes/miho/source/js/particles.js","hash":"b71ddbfc4b1775585bc0632306db4ddc9bd004d4","modified":1566388686791},{"_id":"themes/miho/source/js/pop-img.js","hash":"5d0ff39a25cc37276ca3a16912ee2bff1a6e4667","modified":1566388686792},{"_id":"themes/miho/source/js/search.js","hash":"638af875aabf0b8a5a318380f9220c4da682831f","modified":1566388686793},{"_id":"themes/miho/source/images/map.jpg","hash":"1e9ccac2133e2473f505c1a2690f53ef81eed622","modified":1566388686802},{"_id":"themes/miho/source/images/markdown.jpg","hash":"7d91982a2f192c3ae0d01bd764136437c72d4251","modified":1566388686805},{"_id":"themes/miho/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1566388686972},{"_id":"themes/miho/layout/_partial/post/copyright.ejs","hash":"3aa84af1521d87025d2b6fc35845ce763791dfa6","modified":1566388686978},{"_id":"themes/miho/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1566388686980},{"_id":"themes/miho/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1566388686991},{"_id":"themes/miho/layout/_partial/post/nav.ejs","hash":"e99ca2902c980013cd19e859afe64c7bd3cc176d","modified":1566388686992},{"_id":"themes/miho/layout/_partial/post/reward.ejs","hash":"f82c4eb8fe0439c29cef1ec33c88314257ed4528","modified":1566388686993},{"_id":"themes/miho/layout/_partial/post/share.ejs","hash":"b58e4c1f28d2430c6b992b434a6dc0cdf80f75a1","modified":1566388686995},{"_id":"themes/miho/layout/_partial/post/tag.ejs","hash":"9ed9626100a8500ab76ef398c0efad02f0db99e3","modified":1566388686996},{"_id":"themes/miho/layout/_partial/post/title.ejs","hash":"577659dc67c89ef0a45dae5d715f20f4a48f8c6a","modified":1566388687009},{"_id":"themes/miho/layout/_partial/post/toc.ejs","hash":"2eaf42847685517d3a80fd6263478540c8ab1e82","modified":1566388687010},{"_id":"themes/miho/source/css/_partial/archive.styl","hash":"b24ada27c79e6cdb4c7ef1b53bf133bd5b12da60","modified":1566388686814},{"_id":"themes/miho/source/css/_partial/article.styl","hash":"0e90c0f0d506395d1fd4e8c47b79a3a9fafacb97","modified":1566388686818},{"_id":"themes/miho/source/css/_partial/comment.styl","hash":"15b4a3dec7b6d4292efd8766659a3d2d3dbe0e64","modified":1566388686822},{"_id":"themes/miho/source/css/_partial/footer.styl","hash":"7bd980e4507e6a1a0b8d788a4be86fa307bd0ef9","modified":1566388686825},{"_id":"themes/miho/source/css/_partial/header.styl","hash":"963689b617d51617cdac681a91f38f569c59e901","modified":1566388686826},{"_id":"themes/miho/source/css/_partial/highlight.styl","hash":"d653170143c1b1a60cf00ce064c49361de8c95ec","modified":1566388686827},{"_id":"themes/miho/source/css/_partial/mobile.styl","hash":"96e410dc5143e6d3afbcb4eae20cf9faf11b489f","modified":1566388686830},{"_id":"themes/miho/source/css/_partial/pace.styl","hash":"2efcfd53aff0edf29ca1ed83dc3dbe38cffb0fdd","modified":1566388686832},{"_id":"themes/miho/source/css/_partial/post.styl","hash":"d251e92518efe460c1d7d1d85fbfce63515207a3","modified":1566388686835},{"_id":"themes/miho/source/css/_partial/reward.styl","hash":"e2e240eadeeca82339fe75e84c26c9b0853c9404","modified":1566388686836},{"_id":"themes/miho/source/css/_partial/scroll.styl","hash":"df80c3dbfd3db3b17c297d80957c9f8feeed3180","modified":1566388686839},{"_id":"themes/miho/source/css/_partial/share.styl","hash":"e5ba469a164cefbf538e9e4cabeb432982924690","modified":1566388686840},{"_id":"themes/miho/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1566388686841},{"_id":"themes/miho/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1566388686842},{"_id":"themes/miho/source/css/_partial/sidebar.styl","hash":"895b4a6235cb8781de6b7beb40657b961ad170d8","modified":1566388686843},{"_id":"themes/miho/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1566388686811},{"_id":"themes/miho/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1566388686813},{"_id":"themes/miho/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1566388686881},{"_id":"themes/miho/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1566388686855},{"_id":"themes/miho/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1566388686874},{"_id":"themes/miho/source/images/banner.jpg","hash":"5c4a0751cbf580560dd17c853fb68f97891d0907","modified":1566388686798},{"_id":"themes/miho/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1566388686869},{"_id":"themes/miho/layout/_partial/plugins/analytics/baidu-analytics.ejs","hash":"e72a08ad3f7b43e7e9f09b005523cdc2f38356ac","modified":1566388687018},{"_id":"themes/miho/layout/_partial/plugins/analytics/cnzz-analytics.ejs","hash":"73d033c49c67edbcb76e1fd0d2a0c6e8da35d21f","modified":1566388687019},{"_id":"themes/miho/layout/_partial/plugins/analytics/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1566388687020},{"_id":"themes/miho/layout/_partial/plugins/comments/changyan.ejs","hash":"f63a8e1d504323414c3f57b706587484af8a4782","modified":1566388687013},{"_id":"themes/miho/layout/_partial/plugins/comments/gitment.ejs","hash":"95c98866008180376022bc1a3c7a6cb2c2ed62b7","modified":1566388687015},{"_id":"themes/miho/layout/_partial/plugins/comments/wangyiyun.ejs","hash":"d293bd3c5888501efd1f6c96a7e10756bdfe8ccc","modified":1566388687016},{"_id":"themes/miho/layout/_partial/plugins/comments/youyan.ejs","hash":"d49afa528a4db04355ec0d1cff8fe4a0a005410f","modified":1566388687017},{"_id":"themes/miho/layout/_partial/plugins/sites/visit.ejs","hash":"bb1df834bb2f0501ce7fc1acb57e054732e6f9cb","modified":1566388687011},{"_id":"themes/miho/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1566388686863},{"_id":"public/content.json","hash":"28e5f3aec3feca912ceeb66208f3d04d3bc91fa5","modified":1566389717380},{"_id":"public/2019/08/21/about/index/index.html","hash":"66ad5ecec67448d73cb97a693288d9e6b994759e","modified":1566389717528},{"_id":"public/archives/index.html","hash":"ca83b2d2824a0d0e6d3c2828935e34ed60cefc09","modified":1566389717528},{"_id":"public/archives/2019/index.html","hash":"84b1f81e1a575ec56ed486a43d1935cebac6c350","modified":1566389717528},{"_id":"public/archives/2019/08/index.html","hash":"510cfa59bb8ecf92c54e8ee32d637a1e436f309c","modified":1566389717528},{"_id":"public/categories/国信司南技术团队/index.html","hash":"850de1d9d00eda5a48d919663609113d68a79e0c","modified":1566389717528},{"_id":"public/categories/写作/index.html","hash":"e5d437a7d9218a6cbf838e34dda217253f9e1628","modified":1566389717528},{"_id":"public/categories/大数据/index.html","hash":"f29d5a97585049ac86729e9d7249df5439f6daf8","modified":1566389717528},{"_id":"public/index.html","hash":"f2426c7b04e6feef666f31042a96a418ae474ef9","modified":1566389717528},{"_id":"public/tags/介绍/index.html","hash":"4c4a40554fb6f9ddc4ddf2d8cff88e3b239addd8","modified":1566389717528},{"_id":"public/tags/写作/index.html","hash":"35b3f996480849ef07ff9e52d5da32cf411eb847","modified":1566389717528},{"_id":"public/tags/大数据/index.html","hash":"c74e0b5efd05c1e01dc1549c2f99654410614387","modified":1566389717529},{"_id":"public/2019/08/21/write/write/index.html","hash":"34c89d28a2603590cdd1f02ffe92d3ee8abc2d11","modified":1566389717529},{"_id":"public/2019/08/17/bigdata/robosat-buildings-training-step-by-step/index.html","hash":"ca2d9a68baf8be1036bc0e9d4299d0bbd8f008eb","modified":1566389717529},{"_id":"public/favicon.ico","hash":"c525bc7f4dea71d5c6ab9a961214142207733467","modified":1566389717539},{"_id":"public/images/alipay.png","hash":"b3f9db844b1e522fc55125302f2979f50a6d0529","modified":1566389717539},{"_id":"public/images/geocompass.png","hash":"7efc51a259e478469e549e61d43be55322b3ab90","modified":1566389717539},{"_id":"public/images/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1566389717539},{"_id":"public/images/wechat.png","hash":"8de97bf5bb3f3a0845e02172f79d6bba2fb6bb3b","modified":1566389717540},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1566389717540},{"_id":"public/images/map.jpg","hash":"1e9ccac2133e2473f505c1a2690f53ef81eed622","modified":1566389718149},{"_id":"public/images/markdown.jpg","hash":"7d91982a2f192c3ae0d01bd764136437c72d4251","modified":1566389718150},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1566389718150},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1566389718150},{"_id":"public/js/animate.js","hash":"d5cf7dc4ad33b02bea74bb76d3eba85b67e907ce","modified":1566389718153},{"_id":"public/js/particles.js","hash":"8009af99d913d8c40509efaecfa5e56cefefbf0d","modified":1566389718153},{"_id":"public/js/pop-img.js","hash":"8e638e492b9699da1b9ca22d9f74a6578712925a","modified":1566389718153},{"_id":"public/js/search.js","hash":"ae4b06fd09a090a5388fd880bba919a1c0c64dd3","modified":1566389718153},{"_id":"public/css/style.css","hash":"1ad2595794ce85c93e0206a249a9242591102b36","modified":1566389718154},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1566389718154},{"_id":"public/js/main.js","hash":"cae44d65bd63b29a749fcf43cea26d3b0cb8b2ef","modified":1566389718156},{"_id":"public/js/pace.min.js","hash":"d32ab818e0f97d3b0c80f5631fc23d8a0cb52795","modified":1566389718156},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1566389718156},{"_id":"public/images/banner.jpg","hash":"5c4a0751cbf580560dd17c853fb68f97891d0907","modified":1566389718158}],"Category":[{"name":"国信司南技术团队","_id":"cjzl7zsul0002owuwzb50cnd3"},{"name":"写作","_id":"cjzl7zsuo0004owuw8n06yfch"},{"name":"大数据","_id":"cjzl7zsux000bowuwmmhlopji"}],"Data":[],"Page":[],"Post":[{"title":"关于我们","date":"2019-08-20T16:00:00.000Z","cover_picture":null,"top":1,"_content":"\n<div align=center>\n    <img width=350 height=\"350\" src=\"https://github.com/LOUSANPANG/Picture-library/blob/master/Images/geo.png\">\n</div>\n\n### 关于我们\n&emsp;&emsp;国信司南（北京）地理信息技术有限公司是国家基础地理信息中心基于促进地理信息产业发展的大局背景，经国家测绘地理信息局批准，于2009年12月成立的全资国有企业。为推进产业发展及地理信息社会化服务，公司相继注资成立了天地图有限公司、国测兴园（北京）投资有限公司。\n\n&emsp;&emsp;公司“以数据获取与处理为核心、以信息化系统建设为抓手、以业务化产品服务为支撑、以管理与技术创新为拓展”，相继为水利、水电、文物、文化、外交、公安、测绘、科技、海关、海事、地质、地震、石油、石化、新闻、出版等领域提供了个性化服务。\n\n&emsp;&emsp;凭借不断提升的技术实力、不断完善的优质服务，公司现已拥有甲级测绘资质、软件企业认定、质量管理体系认证、高新技术企业、计算机信息系统集成企业等资质证书，并荣获多项行业科技、工程、创新类奖项。\n\n&emsp;&emsp;公司拥有一支充满活力、进取创新的高素质团队，秉承“凝心聚力、开拓创新、优质服务、和谐发展”的宗旨，为产业大发展、大繁荣添砖加瓦，为共同推进地理信息更好地服务大局、服务社会、服务民生而努力奋斗。","source":"_posts/about/index.md","raw":"---\ntitle: 关于我们\ndate: 2019-08-21\ncategories: 国信司南技术团队\ntags:\n    - 介绍\ncover_picture:\ntop: 1\n---\n\n<div align=center>\n    <img width=350 height=\"350\" src=\"https://github.com/LOUSANPANG/Picture-library/blob/master/Images/geo.png\">\n</div>\n\n### 关于我们\n&emsp;&emsp;国信司南（北京）地理信息技术有限公司是国家基础地理信息中心基于促进地理信息产业发展的大局背景，经国家测绘地理信息局批准，于2009年12月成立的全资国有企业。为推进产业发展及地理信息社会化服务，公司相继注资成立了天地图有限公司、国测兴园（北京）投资有限公司。\n\n&emsp;&emsp;公司“以数据获取与处理为核心、以信息化系统建设为抓手、以业务化产品服务为支撑、以管理与技术创新为拓展”，相继为水利、水电、文物、文化、外交、公安、测绘、科技、海关、海事、地质、地震、石油、石化、新闻、出版等领域提供了个性化服务。\n\n&emsp;&emsp;凭借不断提升的技术实力、不断完善的优质服务，公司现已拥有甲级测绘资质、软件企业认定、质量管理体系认证、高新技术企业、计算机信息系统集成企业等资质证书，并荣获多项行业科技、工程、创新类奖项。\n\n&emsp;&emsp;公司拥有一支充满活力、进取创新的高素质团队，秉承“凝心聚力、开拓创新、优质服务、和谐发展”的宗旨，为产业大发展、大繁荣添砖加瓦，为共同推进地理信息更好地服务大局、服务社会、服务民生而努力奋斗。","slug":"about/index","published":1,"updated":"2019-08-21T11:51:13.942Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzl7zsue0000owuwabvk6uis","content":"<div align=\"center\">\n    <img width=\"350\" height=\"350\" src=\"https://github.com/LOUSANPANG/Picture-library/blob/master/Images/geo.png\">\n</div>\n\n<h3 id=\"关于我们\"><a href=\"#关于我们\" class=\"headerlink\" title=\"关于我们\"></a>关于我们</h3><p>&emsp;&emsp;国信司南（北京）地理信息技术有限公司是国家基础地理信息中心基于促进地理信息产业发展的大局背景，经国家测绘地理信息局批准，于2009年12月成立的全资国有企业。为推进产业发展及地理信息社会化服务，公司相继注资成立了天地图有限公司、国测兴园（北京）投资有限公司。</p>\n<p>&emsp;&emsp;公司“以数据获取与处理为核心、以信息化系统建设为抓手、以业务化产品服务为支撑、以管理与技术创新为拓展”，相继为水利、水电、文物、文化、外交、公安、测绘、科技、海关、海事、地质、地震、石油、石化、新闻、出版等领域提供了个性化服务。</p>\n<p>&emsp;&emsp;凭借不断提升的技术实力、不断完善的优质服务，公司现已拥有甲级测绘资质、软件企业认定、质量管理体系认证、高新技术企业、计算机信息系统集成企业等资质证书，并荣获多项行业科技、工程、创新类奖项。</p>\n<p>&emsp;&emsp;公司拥有一支充满活力、进取创新的高素质团队，秉承“凝心聚力、开拓创新、优质服务、和谐发展”的宗旨，为产业大发展、大繁荣添砖加瓦，为共同推进地理信息更好地服务大局、服务社会、服务民生而努力奋斗。</p>\n","site":{"data":{}},"excerpt":"","more":"<div align=\"center\">\n    <img width=\"350\" height=\"350\" src=\"https://github.com/LOUSANPANG/Picture-library/blob/master/Images/geo.png\">\n</div>\n\n<h3 id=\"关于我们\"><a href=\"#关于我们\" class=\"headerlink\" title=\"关于我们\"></a>关于我们</h3><p>&emsp;&emsp;国信司南（北京）地理信息技术有限公司是国家基础地理信息中心基于促进地理信息产业发展的大局背景，经国家测绘地理信息局批准，于2009年12月成立的全资国有企业。为推进产业发展及地理信息社会化服务，公司相继注资成立了天地图有限公司、国测兴园（北京）投资有限公司。</p>\n<p>&emsp;&emsp;公司“以数据获取与处理为核心、以信息化系统建设为抓手、以业务化产品服务为支撑、以管理与技术创新为拓展”，相继为水利、水电、文物、文化、外交、公安、测绘、科技、海关、海事、地质、地震、石油、石化、新闻、出版等领域提供了个性化服务。</p>\n<p>&emsp;&emsp;凭借不断提升的技术实力、不断完善的优质服务，公司现已拥有甲级测绘资质、软件企业认定、质量管理体系认证、高新技术企业、计算机信息系统集成企业等资质证书，并荣获多项行业科技、工程、创新类奖项。</p>\n<p>&emsp;&emsp;公司拥有一支充满活力、进取创新的高素质团队，秉承“凝心聚力、开拓创新、优质服务、和谐发展”的宗旨，为产业大发展、大繁荣添砖加瓦，为共同推进地理信息更好地服务大局、服务社会、服务民生而努力奋斗。</p>\n"},{"title":"关于写作-Blog","date":"2019-08-20T16:00:00.000Z","author":"LOUSANPANG","cover_picture":"/images/markdown.jpg","top":2,"_content":"\n![miho](http://oerolc7og.bkt.clouddn.com/images/miho/theme/github.jpg)\n\n### 一、安装\n#### 1.1 安装前提\n* [Node.js (Should be at least nodejs 6.9)](https://nodejs.org/en/)\n* [Git](https://git-scm.com/)\n``` bash\nnpm install -g hexo-cli\n```\n#### 1.2 下载源码目录\n``` bash\ngit clone https://github.com/geocompass/geocompass.github.io.git\n```\n#### 1.3 安装依赖\n``` bash\ncd geocompass.github.io\nnpm install\n```\n\n### 二、常见命令\n#### 2.1 [命令](https://hexo.io/zh-cn/docs/commands)\n``` bash\nhexo g == hexo generate #生成静态文件，会在当前目录下生成一个新的叫做public的文件夹\nhexo s == hexo server #启动本地web服务，用于博客的预览\nhexo d == hexo deploy #部署播客到远端（比如github, heroku等平台）\nhexo clean #清除缓存文件 (db.json) 和已生成的静态文件 (public)\nhexo n == hexo new \"postName\" #新建文章\nhexo n == hexo new page \"pageName\" #新建页面\n``` \n\n### 三、关于写作\n#### 3.1 [书写](https://github.com/WongMinHo/hexo-theme-miho/blob/master/_source/blog/installation-configuration.md)\n``` bash\n---\ntitle: 关于书写\ndate: 2019-08-21\ncategories: 类别1\nauthor: MinHow\ntags:\n    - 标签1\n    - 标签2\ncover_picture: /images/banner.jpg\ntop: 1\n---\n<!-- more -->\n### 一、标题一\n#### 1.1 标题1.1\n``` \n说明：\n* 需要注意`tags`和`categories`的写法，不然首页不能正确显示标签和摘要；\n* `cover_picture`文章封面图，不填默认显示_config.yml配置的图片。\n\n### 四、详细文档\n[Hexo主题文档](https://blog.minhow.com/2017/08/01/blog/installation-configuration/)","source":"_posts/write/write.md","raw":"---\ntitle: 关于写作-Blog\ndate: 2019-08-21\ncategories: 写作\nauthor: LOUSANPANG\ntags:\n    - 写作\ncover_picture: /images/markdown.jpg\ntop: 2\n---\n\n![miho](http://oerolc7og.bkt.clouddn.com/images/miho/theme/github.jpg)\n\n### 一、安装\n#### 1.1 安装前提\n* [Node.js (Should be at least nodejs 6.9)](https://nodejs.org/en/)\n* [Git](https://git-scm.com/)\n``` bash\nnpm install -g hexo-cli\n```\n#### 1.2 下载源码目录\n``` bash\ngit clone https://github.com/geocompass/geocompass.github.io.git\n```\n#### 1.3 安装依赖\n``` bash\ncd geocompass.github.io\nnpm install\n```\n\n### 二、常见命令\n#### 2.1 [命令](https://hexo.io/zh-cn/docs/commands)\n``` bash\nhexo g == hexo generate #生成静态文件，会在当前目录下生成一个新的叫做public的文件夹\nhexo s == hexo server #启动本地web服务，用于博客的预览\nhexo d == hexo deploy #部署播客到远端（比如github, heroku等平台）\nhexo clean #清除缓存文件 (db.json) 和已生成的静态文件 (public)\nhexo n == hexo new \"postName\" #新建文章\nhexo n == hexo new page \"pageName\" #新建页面\n``` \n\n### 三、关于写作\n#### 3.1 [书写](https://github.com/WongMinHo/hexo-theme-miho/blob/master/_source/blog/installation-configuration.md)\n``` bash\n---\ntitle: 关于书写\ndate: 2019-08-21\ncategories: 类别1\nauthor: MinHow\ntags:\n    - 标签1\n    - 标签2\ncover_picture: /images/banner.jpg\ntop: 1\n---\n<!-- more -->\n### 一、标题一\n#### 1.1 标题1.1\n``` \n说明：\n* 需要注意`tags`和`categories`的写法，不然首页不能正确显示标签和摘要；\n* `cover_picture`文章封面图，不填默认显示_config.yml配置的图片。\n\n### 四、详细文档\n[Hexo主题文档](https://blog.minhow.com/2017/08/01/blog/installation-configuration/)","slug":"write/write","published":1,"updated":"2019-08-21T11:51:13.945Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzl7zsuk0001owuwj1fnezae","content":"<p><img src=\"http://oerolc7og.bkt.clouddn.com/images/miho/theme/github.jpg\" alt=\"miho\"></p>\n<h3 id=\"一、安装\"><a href=\"#一、安装\" class=\"headerlink\" title=\"一、安装\"></a>一、安装</h3><h4 id=\"1-1-安装前提\"><a href=\"#1-1-安装前提\" class=\"headerlink\" title=\"1.1 安装前提\"></a>1.1 安装前提</h4><ul>\n<li><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node.js (Should be at least nodejs 6.9)</a></li>\n<li><a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">Git</a><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"1-2-下载源码目录\"><a href=\"#1-2-下载源码目录\" class=\"headerlink\" title=\"1.2 下载源码目录\"></a>1.2 下载源码目录</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/geocompass/geocompass.github.io.git</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-安装依赖\"><a href=\"#1-3-安装依赖\" class=\"headerlink\" title=\"1.3 安装依赖\"></a>1.3 安装依赖</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> geocompass.github.io</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、常见命令\"><a href=\"#二、常见命令\" class=\"headerlink\" title=\"二、常见命令\"></a>二、常见命令</h3><h4 id=\"2-1-命令\"><a href=\"#2-1-命令\" class=\"headerlink\" title=\"2.1 命令\"></a>2.1 <a href=\"https://hexo.io/zh-cn/docs/commands\" target=\"_blank\" rel=\"noopener\">命令</a></h4><pre><code class=\"bash\">hexo g == hexo generate <span class=\"comment\">#生成静态文件，会在当前目录下生成一个新的叫做public的文件夹</span>\nhexo s == hexo server <span class=\"comment\">#启动本地web服务，用于博客的预览</span>\nhexo d == hexo deploy <span class=\"comment\">#部署播客到远端（比如github, heroku等平台）</span>\nhexo clean <span class=\"comment\">#清除缓存文件 (db.json) 和已生成的静态文件 (public)</span>\nhexo n == hexo new <span class=\"string\">\"postName\"</span> <span class=\"comment\">#新建文章</span>\nhexo n == hexo new page <span class=\"string\">\"pageName\"</span> <span class=\"comment\">#新建页面</span></code></pre>\n<h3 id=\"三、关于写作\"><a href=\"#三、关于写作\" class=\"headerlink\" title=\"三、关于写作\"></a>三、关于写作</h3><h4 id=\"3-1-书写\"><a href=\"#3-1-书写\" class=\"headerlink\" title=\"3.1 书写\"></a>3.1 <a href=\"https://github.com/WongMinHo/hexo-theme-miho/blob/master/_source/blog/installation-configuration.md\" target=\"_blank\" rel=\"noopener\">书写</a></h4><pre><code class=\"bash\">---\ntitle: 关于书写\ndate: 2019-08-21\ncategories: 类别1\nauthor: MinHow\ntags:\n    - 标签1\n    - 标签2\ncover_picture: /images/banner.jpg\ntop: 1\n---\n&lt;!-- more --&gt;\n<span class=\"comment\">### 一、标题一</span>\n<span class=\"comment\">#### 1.1 标题1.1</span></code></pre>\n<p>说明：</p>\n<ul>\n<li>需要注意<code>tags</code>和<code>categories</code>的写法，不然首页不能正确显示标签和摘要；</li>\n<li><code>cover_picture</code>文章封面图，不填默认显示_config.yml配置的图片。</li>\n</ul>\n<h3 id=\"四、详细文档\"><a href=\"#四、详细文档\" class=\"headerlink\" title=\"四、详细文档\"></a>四、详细文档</h3><p><a href=\"https://blog.minhow.com/2017/08/01/blog/installation-configuration/\" target=\"_blank\" rel=\"noopener\">Hexo主题文档</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://oerolc7og.bkt.clouddn.com/images/miho/theme/github.jpg\" alt=\"miho\"></p>\n<h3 id=\"一、安装\"><a href=\"#一、安装\" class=\"headerlink\" title=\"一、安装\"></a>一、安装</h3><h4 id=\"1-1-安装前提\"><a href=\"#1-1-安装前提\" class=\"headerlink\" title=\"1.1 安装前提\"></a>1.1 安装前提</h4><ul>\n<li><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node.js (Should be at least nodejs 6.9)</a></li>\n<li><a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">Git</a><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"1-2-下载源码目录\"><a href=\"#1-2-下载源码目录\" class=\"headerlink\" title=\"1.2 下载源码目录\"></a>1.2 下载源码目录</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/geocompass/geocompass.github.io.git</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-安装依赖\"><a href=\"#1-3-安装依赖\" class=\"headerlink\" title=\"1.3 安装依赖\"></a>1.3 安装依赖</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> geocompass.github.io</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、常见命令\"><a href=\"#二、常见命令\" class=\"headerlink\" title=\"二、常见命令\"></a>二、常见命令</h3><h4 id=\"2-1-命令\"><a href=\"#2-1-命令\" class=\"headerlink\" title=\"2.1 命令\"></a>2.1 <a href=\"https://hexo.io/zh-cn/docs/commands\" target=\"_blank\" rel=\"noopener\">命令</a></h4><pre><code class=\"bash\">hexo g == hexo generate <span class=\"comment\">#生成静态文件，会在当前目录下生成一个新的叫做public的文件夹</span>\nhexo s == hexo server <span class=\"comment\">#启动本地web服务，用于博客的预览</span>\nhexo d == hexo deploy <span class=\"comment\">#部署播客到远端（比如github, heroku等平台）</span>\nhexo clean <span class=\"comment\">#清除缓存文件 (db.json) 和已生成的静态文件 (public)</span>\nhexo n == hexo new <span class=\"string\">\"postName\"</span> <span class=\"comment\">#新建文章</span>\nhexo n == hexo new page <span class=\"string\">\"pageName\"</span> <span class=\"comment\">#新建页面</span></code></pre>\n<h3 id=\"三、关于写作\"><a href=\"#三、关于写作\" class=\"headerlink\" title=\"三、关于写作\"></a>三、关于写作</h3><h4 id=\"3-1-书写\"><a href=\"#3-1-书写\" class=\"headerlink\" title=\"3.1 书写\"></a>3.1 <a href=\"https://github.com/WongMinHo/hexo-theme-miho/blob/master/_source/blog/installation-configuration.md\" target=\"_blank\" rel=\"noopener\">书写</a></h4><pre><code class=\"bash\">---\ntitle: 关于书写\ndate: 2019-08-21\ncategories: 类别1\nauthor: MinHow\ntags:\n    - 标签1\n    - 标签2\ncover_picture: /images/banner.jpg\ntop: 1\n---\n&lt;!-- more --&gt;\n<span class=\"comment\">### 一、标题一</span>\n<span class=\"comment\">#### 1.1 标题1.1</span></code></pre>\n<p>说明：</p>\n<ul>\n<li>需要注意<code>tags</code>和<code>categories</code>的写法，不然首页不能正确显示标签和摘要；</li>\n<li><code>cover_picture</code>文章封面图，不填默认显示_config.yml配置的图片。</li>\n</ul>\n<h3 id=\"四、详细文档\"><a href=\"#四、详细文档\" class=\"headerlink\" title=\"四、详细文档\"></a>四、详细文档</h3><p><a href=\"https://blog.minhow.com/2017/08/01/blog/installation-configuration/\" target=\"_blank\" rel=\"noopener\">Hexo主题文档</a></p>\n"},{"title":"手把手教你用Mapbox的RoboSat基于深度学习自动提取建筑物","date":"2019-08-16T16:00:00.000Z","cover_picture":null,"top":3,"_content":"\n原文链接：[https://github.com/geocompass/robosat_buildings_training](https://github.com/geocompass/robosat_buildings_training)\n\n​ 本文介绍了如何使用 [mapbox/robosat](https://github.com/mapbox/robosat) 工具，基于深度学习训练，从常规的遥感影像瓦片地图服务中自动提取建筑物。包括系统准备工作、数据准备工作和训练与建模。通过根据文章的描述，可以完成训练任务。\n\n​ 参考文章：[daniel-j-h : RoboSat ❤️ Tanzania](https://www.openstreetmap.org/user/daniel-j-h/diary/44321)\n\n## 1. 系统准备工作\n\n### 1.1 设备及系统\n\n> 准备一台安装 Linux 或 MacOS 系统的机器，可以是 CentOS、Ubuntu 或 MacOS。机器可以是实体机，也可以是 VMware 虚拟机。\n\n### 1.2 安装 Docker\n\n> 在机器中安装 Docker，不建议是 Windows 版 Docker。[MacOS 安装 Docker](https://www.runoob.com/docker/macos-docker-install.html) ，[CentOS 安装 Docker](https://www.runoob.com/docker/centos-docker-install.html)\n\n### 1.3 在 Docker 中安装 Robosat\n\n> Robosat 的 [Docker Hub](https://hub.docker.com/r/mapbox/robosat)。\n\n​ 可以使用两种方式安装 Robosat：\n\n- 使用 CPU 容器：\n\n```shell\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu --help\n```\n\n- 使用 GPU 容器（主机上需要 [nvidia-docker](https://github.com/NVIDIA/nvidia-docker)）：\n\n```shell\ndocker run --runtime=nvidia -it --rm -v $PWD:/data --ipc=host mapbox/robosat:latest-gpu train --model /data/model.toml --dataset /data/dataset.toml --workers 4\n```\n\n## 2. 数据准备工作\n\n### 2.1 建筑物轮廓矢量数据\n\n​ 已有的建筑物轮廓矢量数据用来作为建筑物提取的训练数据源。可以有两种方式获取：\n\n- OSM 数据源，可以在 [geofabrik](http://download.geofabrik.de/) 获取，通过 [osmium](https://github.com/osmcode/osmium-tool) 和 [robosat](https://github.com/mapbox/robosat) 工具[进行处理](https://www.openstreetmap.org/user/daniel-j-h/diary/44321)。\n- 自有数据源。通过 [QGIS](https://qgis.org/en/site/) 或 ArcMap 等工具，加载遥感影像底图，描述的建筑物轮廓 Shapefile 数据。\n\n​ **本文使用第二种数据来源，并已[开源数据源](https://github.com/geocompass/robosat_buildings_training/tree/master/shp_data)，开源的矢量数据覆盖厦门核心区。**\n\n​ **考虑到使用个人电脑没有 CUDA 加速训练成本较高，本文使用 [buia_xiamen_min_shp](https://github.com/geocompass/robosat_buildings_training/blob/master/shp_data/buia_xiamen_min_shp.zip)，包含厦门核心区部分区域，共 5679 个建筑物轮廓。在 Docker 配置为 处理器(`CPU`) 4 核、内存(`RAM`)16GB、交换内存(`Swap`)3GB 时，训练时间大约 2.5 小时。**\n\n![训练区矢量数据预览](https://github.com/geocompass/robosat_buildings_training/blob/master/img/buia_xiamen_preview.jpg)\n\n### 2.2 获取建筑物轮廓 geojson 数据\n\n​ 通过在线工具 [mapshaper](https://mapshaper.org/)，将 shapefile 数据转换为 geojson 数据。\n\n### 2.3 提取训练区覆盖的瓦片行列号\n\n​ 使用 robosat 的 [cover](https://github.com/mapbox/robosat#rs-cover) 命令，即可获取当前训练区矢量数据覆盖的瓦片行列号，并使用 csv 文件存储。\n\n```shell\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu cover  --zoom 18 /data/buildings.json /data/buildings.tiles\n```\n\n`cover` 命令的参数介绍：\n\n> usage: `./rs cover [-h] --zoom ZOOM features out`\n>\n> - positional arguments:\n>   - `features` path to GeoJSON features\n>   - `out` path to csv file to store tiles in\n> - optional arguments:\n>   - `-h`, --help show this help message and exit\n>   - `--zoom ZOOM` zoom level of tiles (default: None)\n\n这里是获取在 18 级下训练区覆盖的瓦片行列号。18 级是国内地图通用的最大级别，如果有国外更清晰数据源，可设置更高地图级别。\n\n​ cover 工具对训练区矢量数据计算的瓦片行列号使用的是通用的 WGS84->Web 墨卡托投影坐标系。\n\n> 小知识：\n>\n> - `$PWD:/data` 是将当前路径映射为 docker 中的 `/data` 路径。\n> - 在新版 robosat 的 docker 安装包中，将 `./rs` 命令行工具对应为`docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu` 命令。\n> - docker 版 robosat ，以命令行方式执行，无法生成类似 nginx 的 docker 服务，所以执行完成后立即销毁了 docker 的 container。\n\n### 2.4 下载训练区遥感影像瓦片\n\n​ 使用 robosat 的 [download](https://github.com/mapbox/robosat#rs-download) 工具，即可获取当前训练区矢量数据覆盖的遥感影像，下载的瓦片通过 2.3 节中的**buildings.tiles** 确定。\n\n```shell\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu download http://ditu.google.cn/maps/vt/lyrs=s&x={x}&y={y}&z={z} /data/buildings.tiles /data/tiles\n```\n\n​ `download` 命令的参数介绍：\n\n> usage: `./rs download [-h] [--ext EXT] [--rate RATE] url tiles out`\n>\n> - positional arguments:\n>   - `url` endpoint with {z}/{x}/{y} variables to fetch image tiles from\n>   - `tiles` path to .csv tiles file\n>   - `out` path to slippy map directory for storing tiles\n> - optional arguments:\n>   - `-h`, --help show this help message and exit\n>   - `--ext EXT` file format to save images in (default: webp)\n>   - `--rate RATE` rate limit in max. requests per second (default: 10)\n\n​ 这里介绍几个常用的 Web 墨卡托投影的（WGS84 坐标系）遥感影像数据源：\n\n> - [谷歌地图 CN 影像](https://ditu.google.cn/)：http://ditu.google.cn/maps/vt/lyrs=s&x={x}&y={y}&z={z}\n> - [天地图影像](https://map.tianditu.gov.cn/)：https://t4.tianditu.gov.cn/DataServer?T=img_w&x={x}&y={y}&l={z}&tk=2ce94f67e58faa24beb7cb8a09780552\n> - [ArcGIS Online 影像](https://server.arcgisonline.com/arcgis/rest/services/World_Imagery/MapServer?f=jsapi)：https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\n> - [MapBox 影像](https://api.mapbox.com/styles/v1/mapbox/satellite-v9.html?title=true&access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4M29iazA2Z2gycXA4N2pmbDZmangifQ.-g_vE53SD2WrJ6tFX7QHmA#0.75/29.3/-124.8)：https://api.mapbox.com/v4/mapbox.satellite/{z}/{x}/{y}@2x.png?sku=101KOLcQaDwG1&access_token=[token]\n\n​ 几种遥感影像数据源的比较：\n\n- 从访问速度来看，天地图>谷歌>ArcGIS>Mapbox。\n\n- 从遥感影像的质量来说，总体来说：\n  - 城市地区：谷歌=ArcGIS>天地图>Mapbox\n  - 农村地图：谷歌>天地图>ArcGIS>Mapbox\n- 层级覆盖：谷歌>天地图>ArcGIS>Mapbox\n\n​ 不同影像数据源的质量不能一概而论，由于传感器不同、过境时间不同等因素，不同地区的影像数据源质量均不同，建议使用 QGIS 加载训练区位置的影像对比选择。\n\n### 2.5 制作训练区矢量数据蒙版标记\n\n​ 使用 2.2 节中制作的 geojson 数据，通过 robosat 的 [rasterize](https://github.com/mapbox/robosat#rs-rasterize) 工具可制作训练区矢量数据的蒙版标记数据。蒙版标记数据与瓦片数据一一相对应，使用同样的 **buildings.tiles** 瓦片列表产生。\n\n```shell\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu rasterize --dataset /data/dataset-building.toml --zoom 18 --size 256 /data/buildings.json /data/buildings.tiles /data/masks\n```\n\n​ `rasterise` 命令的参数介绍：\n\n> usage: `./rs rasterize [-h] --dataset DATASET --zoom ZOOM [--size SIZE] features tiles out`\n>\n> - positional arguments:\n>\n>   - `features` path to GeoJSON features file\n>   - `tiles` path to .csv tiles file\n>   - `out` directory to write converted images\n>\n> - optional arguments:\n>   `-h`, `--help` show this help message and exit\n>   `--dataset DATASET` path to dataset configuration file (default: None)\n>   `--zoom ZOOM` zoom level of tiles (default: None)\n>   `--size SIZE` size of rasterized image tiles in pixels (default: 512)\n\n这里使用到了 `dataset-building.toml` 配置文件，文件中配置了瓦片地图路径、分类方式、蒙版标记的颜色等信息。示例配置可以查看官方示例文件 [dataset-parking.toml](https://github.com/mapbox/robosat/blob/master/config/dataset-parking.toml) 。本训练中用到的 [dataset-building.toml](https://github.com/geocompass/robosat_buildings_training/dataset-building.toml) 的配置内容如下：\n\n```toml\n# Configuration related to a specific dataset.\n# For syntax see: https://github.com/toml-lang/toml#table-of-contents\n\n# Dataset specific common attributes.\n[common]\n\n  # The slippy map dataset's base directory.\n  dataset = '/Users/wucan/Document/robosat/tiles/'\n\n  # Human representation for classes.\n  classes = ['background', 'buildings']\n\n  # Color map for visualization and representing classes in masks.\n  # Note: available colors can be found in `robosat/colors.py`\n  colors  = ['denim', 'orange']\n```\n\n​ 配置文档中，最重要的是配置 `dataset` 目录，也就是上一步中下载的遥感影像瓦片路径。制作的蒙版标记效果如下图。\n\n![mask](https://github.com/geocompass/robosat_buildings_training/blob/master/img/mask.gif)\n\n​ 至此，训练和建模所需的瓦片和蒙版标记已经全部准备完，分别在 `tiles` 和 `masks` 目录中。\n\n## 3. 训练和建模\n\n### 3.1 分配训练数据、验证数据、评估数据\n\n​ RoboSat 分割模型是一个完全卷积的神经网络，需要将上一步准备好的数据集拆分为三部分，分别为`训练数据集` 、`验证数据集`、`评估数据集`，比例分别为 80%、10%、10%。每一部分的数据集中，都包含影像瓦片和蒙版标记瓦片。\n\n- 训练数据集：a training dataset on which we train the model on\n- 验证数据集：a validation dataset on which we calculate metrics on after training\n- 评估数据集：a hold-out evaluation dataset if you want to do hyper-parameter tuning\n\n  将步骤 2 中的数据进行随机分配的过程非常简单：\n\n- 新建三个 csv 文件： `csv_training.tiles` 、`csv_validation.tiles`、 `csv_evaluation.tiles`\n- 将 `buildings.tiles` 中的瓦片列表随机按 80%、10%、10% 比例进行拷贝与粘贴。注意三个文件间的瓦片列表内容不能重复。\n\n​ 使用 RoboSat 中的 [subset](https://github.com/mapbox/robosat#rs-subset) 命令，将 `tiles` 和 `masks` 中的瓦片和蒙版按照上面三个 csv 文件的瓦片列表分配进行组织影像瓦片和蒙版标记数据。\n\n```shell\n# 准备训练数据集\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/tiles/ /data/csv_training.tiles /data/dataset/training/images\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/masks/ /data/csv_training.tiles /data/dataset/training/labels\n# 准备验证数据集\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/tiles/ /data/csv_validation.tiles /data/dataset/validation/images\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/masks/ /data/csv_validation.tiles /data/dataset/validation/labels\n# 准备评估数据集\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/tiles/ /data/csv_evaluation.tiles /data/dataset/evaluation/images\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/masks/ /data/csv_evaluation.tiles /data/dataset/evaluation/labels\n```\n\n​ `subset` 命令的参数介绍：\n\n> usage: `./rs subset [-h] images tiles out`\n>\n> - positional arguments:\n>\n>   - `images` directory to read slippy map image tiles from for filtering\n>   - `tiles` csv to filter images by\n>   - `out` directory to save filtered images to\n>\n> - optional arguments:\n>   - `-h`, `--help` show this help message and exit\n\n​ 分类完成以后，将会生成 `/data/dataset` 目录，目录结构如下：\n\n```shell\ndataset\n|  training\n|  |  images\n|  |  labels\n|  validataion\n|  |  images\n|  |  labels\n|  evaluation\n|  |  images\n|  |  labels\n```\n\n### 3.2 权重计算\n\n​ 因为前景和背景在数据集中分布不均，可以使用 RoboSat 中的 [weights](https://github.com/mapbox/robosat#rs-weights) 命令，在模型训练之前计算一下每个类的分布。\n\n```shell\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu weights --dataset /data/dataset-building-weights.toml\n```\n\n​ `weights` 命令的参数如下：\n\n> usage: `./rs weights [-h] --dataset DATASET`\n>\n> - optional arguments:\n>   - `-h`, `--help` show this help message and exit\n>   - `--dataset DATASET` path to dataset configuration file (default: None)\n\n​ 这里，用到了`dataset-building-weights.toml` ，是将前面步骤中的 `dataset-building.toml` 瓦片路径修改为包含训练数据集 `dataset` 的路径。执行权重计算命令后，得到权重为：`values = [1.653415, 5.266637]` 。将其追加到 `dataset-building-weights.toml` 文件中，结果如下。\n\n```\n# Configuration related to a specific dataset.\n# For syntax see: https://github.com/toml-lang/toml#table-of-contents\n\n\n# Dataset specific common attributes.\n[common]\n\n  # The slippy map dataset's base directory.\n  dataset = '/data/dataset'\n\n  # Human representation for classes.\n  classes = ['background', 'buildings']\n\n  # Color map for visualization and representing classes in masks.\n  # Note: available colors can be found in `robosat/colors.py`\n  colors  = ['denim', 'orange']\n\n# Dataset specific class weights computes on the training data.\n# Needed by 'mIoU' and 'CrossEntropy' losses to deal with unbalanced classes.\n# Note: use `./rs weights -h` to compute these for new datasets.\n[weights]\n  values = [1.653415, 5.266637]\n```\n\n### 3.3 开始训练\n\n​ RoboSat 使用 [train](https://github.com/mapbox/robosat#rs-train) 命令进行训练。\n\n```shell\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu train --model /data/model-unet.toml --dataset /data/dataset-building-weights.toml\n```\n\n​ `train` 命令的参数如下：\n\n> usage: `./rs train [-h] --model MODEL --dataset DATASET [--checkpoint CHECKPOINT] [--resume RESUME] [--workers WORKERS]`\n>\n> - positional arguments:\n>\n>   - `--model MODEL` path to model configuration file (default: None)\n>   - `--dataset DATASET` path to dataset configuration file (default: None)\n>\n> - optional arguments:\n>   - `-h`, `--help show this help message and exit\n>   - `--checkpoint CHECKPOINT` path to a model checkpoint (to retrain) (default: None)\n>   - `--resume RESUME` resume training or fine-tuning (if checkpoint) (default: False)\n>   - `--workers WORKERS` number of workers pre-processi ng images (default: 0)\n\n​ 这里多了一个配置文件 `model-unet.toml` ，这个配置文件主要用来配置训练过程中的参数，包括是否启用 CUDA 、训练批次大小、影像瓦片的像素大小、检查点存储路径等。官方给出了[示例配置文件](https://github.com/mapbox/robosat/blob/master/config/model-unet.toml)，根据本实验的情况做了修改如下，配置如下。\n\n```\n# Configuration related to a specific model.\n# For syntax see: https://github.com/toml-lang/toml#table-of-contents\n\n# Model specific common attributes.\n[common]\n\n  # Use CUDA for GPU acceleration.\n  cuda       = false\n\n  # Batch size for training.\n  batch_size = 2\n\n  # Image side size in pixels.\n  image_size = 256\n\n  # Directory where to save checkpoints to during training.\n  checkpoint = '/data/checkpoint/'\n\n\n# Model specific optimization parameters.\n[opt]\n\n  # Total number of epochs to train for.\n  epochs     = 10\n\n  # Learning rate for the optimizer.\n  lr         = 0.01\n\n  # Loss function name (e.g 'Lovasz', 'mIoU' or 'CrossEntropy')\n  loss = 'Lovasz'\n```\n\n​ RoboSat 会进行多次迭代训练，每次迭代训练都会保存检查点(checkpoint)和各项指标等。其中，训练日志例如：\n\n```shell\n--- Hyper Parameters on Dataset: /data/dataset ---\nBatch Size:\t 2\nImage Size:\t 256\nLearning Rate:\t 0.0001\nLoss function:\t Lovasz\nWeights :\t [1.644471, 5.409126]\n---\nEpoch: 1/10\nTrain    loss: 0.3190, mIoU: 0.410, buildings IoU: 0.017, MCC: -0.002\nValidate loss: 0.3171, mIoU: 0.405, buildings IoU: 0.000, MCC: nan\n\n...\n\nEpoch: 10/10\nTrain    loss: 0.2693, mIoU: 0.528, buildings IoU: 0.229, MCC: 0.330\nValidate loss: 0.2880, mIoU: 0.491, buildings IoU: 0.167, MCC: 0.262\n```\n\n​ 可以选择最好的训练结果，保留其检查点( `checkpoint-***.pth` )，进入下一步 `predict`。一般来说，最后一个检查点效果最好。\n\n## 4. 预测\n\n### 4.1 准备预测区域数据\n\n​ RoboSat 仅支持从影像瓦片中提取建筑物，不支持从任意的 jpg 图片中提取。所以我们需要先准备预测区域的瓦片数据。\n\n​ 通过 [geojson.io](http://geojson.io/) 绘制想要提取建筑物的范围，使用矩形框即可。将自动生成的 geojson 保存为 `predict_test.json`。\n\n​ 通过 2.3 中的 `cover` 命令，获取待提取范围的瓦片列表 csv 文件，保存到 `buildings_predict.tiles` 文件中。\n\n```shell\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu cover  --zoom 18 /data/shp_data/predict_test.json /data/buildings_predict.tiles\n```\n\n​ 使用 2.4 中的 `download` 命令，下载待提取范围的影像瓦片，保存到 `images_predict` 文件夹中。\n\n```shell\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu download https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x} /data/buildings_predict.tiles /data/images_predict\n```\n\n![预测区域的geojson](https://github.com/geocompass/robosat_buildings_training/blob/master/img/predict_region_geojson.jpg)\n\n### 4.2 预测待提取建筑物概率\n\n​ 使用保存的检查点来（`checkpint`）预测图像中每个像素的分割概率，这些分割概率表示每个像素是建筑物还是背景的可能性，然后可以将这些概率转换为离散的分割掩模。\n\n​ 通过 RoboSat 的 [predict](https://github.com/mapbox/robosat#rs-predict) 命令，将待预测区域的建筑物（ `images_predict` ）提取为分割概率（`predict_segmentation-probabilities`）。\n\n```shell\ndocker run -it -d --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu predict --tile_size 256 --model /data/model-unet.toml --dataset /data/dataset-building.toml --checkpoint /data/checkpoint/checkpoint-00010-of-00010.pth /data/images_predict /data/predict_segmentation-probabilities\n```\n\n​ `predict` 命令的参数如下：\n\n> usage: `./rs predict [-h] [--batch_size BATCH_SIZE] --checkpoint CHECKPOINT [--overlap OVERLAP] --tile_size TILE_SIZE [--workers WORKERS] --model MODEL --dataset DATASET tiles probs`\n>\n> - positional arguments:\n>\n>   - `tiles` directory to read slippy map image tiles from\n>   - `probs` directory to save slippy map probability masks to\n>\n> - optional arguments:\n>   - `-h`, `--help show this help message and exit`\n>   - `--batch_size BATCH_SIZE` images per batch (default: 1)\n>   - `--checkpoint CHECKPOINT` model checkpoint to load (default: None)\n>   - `--overlap OVERLAP` tile pixel overlap to predict on (default: 32)\n>   - `--tile_size TILE_SIZE` tile size for slippy map tiles (default: None)\n>   - `--workers WORKERS` number of workers pre-processing images (default: 0)\n>   - `--model MODEL` path to model configuration file (default: None)\n>   - `--dataset DATASET` path to dataset configuration file (default: None)\n\n![预测建筑物提取概率结果](https://github.com/geocompass/robosat_buildings_training/blob/master/img/predit_probabilities.gif)\n\n### 4.3 预测概率转换为建筑物掩模\n\n​ 通过 RoboSat 的 [masks](https://github.com/mapbox/robosat#rs-masks) 命令，将上一步中的建筑物预测概率结果转换为建筑物掩模（`masks`），保存到 `predict_segmentation-masks` 文件夹中。\n\n```shell\ndocker run -it -d --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu masks /data/predict_segmentation-masks /data/predict_segmentation-probabilities\n```\n\n> usage: `./rs masks [-h] [--weights WEIGHTS [WEIGHTS ...]] masks probs [probs ...]`\n>\n> - positional arguments:\n>\n>   - `masks` slippy map directory to save masks to\n>   - `probs` slippy map directories with class probabilities\n>\n> - optional arguments:\n>   - `-h`, `--help` show this help message and exit\n>   - `--weights WEIGHTS [WEIGHTS ...]` weights for weighted average soft-voting (default:\n>     None)\n\n![预测建筑物提取掩模结果](https://github.com/geocompass/robosat_buildings_training/blob/master/img/predit_masks.jpg)\n\n### 4.4 建筑物掩模转换为 geojson\n\n​ 通过 RoboSat 的 [features]() 命令，将上一步中的建筑物掩模转换为 geojson，保存在 `predict_geojson_features` 文件夹中。\n\n```shell\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu features /data/predict_segmentation-masks /data/predict_geojson_features\n```\n\n> usage: `./rs features [-h] --type {parking} --dataset DATASET masks out`\n>\n> - positional arguments:\n>\n>   - `masks` slippy map directory with segmentation masks\n>   - `out` path to GeoJSON file to store features in\n>\n> - optional arguments:\n>   - `-h`, `--help` show this help message and exit\n>   - `--type {parking}` type of feature to extract (default: None)\n>   - `--dataset DATASET` path to dataset configuration file (default: None)\n\n（目前 `features` 命令中对 `--type` 设置有 bug，无法正常执行。）\n\n### 4.5 合并掩模分割的 geojson\n\n​ 通过 RoboSat 的 [merge](https://github.com/mapbox/robosat#rs-merge) 命令，将上一步中生成的分割的 geojson 要素进行合并，结果保存在 `predict_geojson_merge`文件夹中。\n\n```\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu features /data/predict_geojson /data/predict_geojson_merge\n```\n\n> usage: `./rs merge [-h] --threshold THRESHOLD features out`\n>\n> - positional arguments:\n>\n>   - `features` GeoJSON file to read features from\n>   - `out` path to GeoJSON to save merged features to\n>\n> - optional arguments:\n>   - `-h`, `--help` show this help message and exit\n>   - `--threshold THRESHOLD` minimum distance to adjacent features, in m (default:\n>     None)\n","source":"_posts/bigdata/robosat-buildings-training-step-by-step.md","raw":"---\ntitle: 手把手教你用Mapbox的RoboSat基于深度学习自动提取建筑物\ndate: 2019-08-17\ncategories: 大数据\ntags:\n    - 大数据\ncover_picture:\ntop: 3\n---\n\n原文链接：[https://github.com/geocompass/robosat_buildings_training](https://github.com/geocompass/robosat_buildings_training)\n\n​ 本文介绍了如何使用 [mapbox/robosat](https://github.com/mapbox/robosat) 工具，基于深度学习训练，从常规的遥感影像瓦片地图服务中自动提取建筑物。包括系统准备工作、数据准备工作和训练与建模。通过根据文章的描述，可以完成训练任务。\n\n​ 参考文章：[daniel-j-h : RoboSat ❤️ Tanzania](https://www.openstreetmap.org/user/daniel-j-h/diary/44321)\n\n## 1. 系统准备工作\n\n### 1.1 设备及系统\n\n> 准备一台安装 Linux 或 MacOS 系统的机器，可以是 CentOS、Ubuntu 或 MacOS。机器可以是实体机，也可以是 VMware 虚拟机。\n\n### 1.2 安装 Docker\n\n> 在机器中安装 Docker，不建议是 Windows 版 Docker。[MacOS 安装 Docker](https://www.runoob.com/docker/macos-docker-install.html) ，[CentOS 安装 Docker](https://www.runoob.com/docker/centos-docker-install.html)\n\n### 1.3 在 Docker 中安装 Robosat\n\n> Robosat 的 [Docker Hub](https://hub.docker.com/r/mapbox/robosat)。\n\n​ 可以使用两种方式安装 Robosat：\n\n- 使用 CPU 容器：\n\n```shell\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu --help\n```\n\n- 使用 GPU 容器（主机上需要 [nvidia-docker](https://github.com/NVIDIA/nvidia-docker)）：\n\n```shell\ndocker run --runtime=nvidia -it --rm -v $PWD:/data --ipc=host mapbox/robosat:latest-gpu train --model /data/model.toml --dataset /data/dataset.toml --workers 4\n```\n\n## 2. 数据准备工作\n\n### 2.1 建筑物轮廓矢量数据\n\n​ 已有的建筑物轮廓矢量数据用来作为建筑物提取的训练数据源。可以有两种方式获取：\n\n- OSM 数据源，可以在 [geofabrik](http://download.geofabrik.de/) 获取，通过 [osmium](https://github.com/osmcode/osmium-tool) 和 [robosat](https://github.com/mapbox/robosat) 工具[进行处理](https://www.openstreetmap.org/user/daniel-j-h/diary/44321)。\n- 自有数据源。通过 [QGIS](https://qgis.org/en/site/) 或 ArcMap 等工具，加载遥感影像底图，描述的建筑物轮廓 Shapefile 数据。\n\n​ **本文使用第二种数据来源，并已[开源数据源](https://github.com/geocompass/robosat_buildings_training/tree/master/shp_data)，开源的矢量数据覆盖厦门核心区。**\n\n​ **考虑到使用个人电脑没有 CUDA 加速训练成本较高，本文使用 [buia_xiamen_min_shp](https://github.com/geocompass/robosat_buildings_training/blob/master/shp_data/buia_xiamen_min_shp.zip)，包含厦门核心区部分区域，共 5679 个建筑物轮廓。在 Docker 配置为 处理器(`CPU`) 4 核、内存(`RAM`)16GB、交换内存(`Swap`)3GB 时，训练时间大约 2.5 小时。**\n\n![训练区矢量数据预览](https://github.com/geocompass/robosat_buildings_training/blob/master/img/buia_xiamen_preview.jpg)\n\n### 2.2 获取建筑物轮廓 geojson 数据\n\n​ 通过在线工具 [mapshaper](https://mapshaper.org/)，将 shapefile 数据转换为 geojson 数据。\n\n### 2.3 提取训练区覆盖的瓦片行列号\n\n​ 使用 robosat 的 [cover](https://github.com/mapbox/robosat#rs-cover) 命令，即可获取当前训练区矢量数据覆盖的瓦片行列号，并使用 csv 文件存储。\n\n```shell\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu cover  --zoom 18 /data/buildings.json /data/buildings.tiles\n```\n\n`cover` 命令的参数介绍：\n\n> usage: `./rs cover [-h] --zoom ZOOM features out`\n>\n> - positional arguments:\n>   - `features` path to GeoJSON features\n>   - `out` path to csv file to store tiles in\n> - optional arguments:\n>   - `-h`, --help show this help message and exit\n>   - `--zoom ZOOM` zoom level of tiles (default: None)\n\n这里是获取在 18 级下训练区覆盖的瓦片行列号。18 级是国内地图通用的最大级别，如果有国外更清晰数据源，可设置更高地图级别。\n\n​ cover 工具对训练区矢量数据计算的瓦片行列号使用的是通用的 WGS84->Web 墨卡托投影坐标系。\n\n> 小知识：\n>\n> - `$PWD:/data` 是将当前路径映射为 docker 中的 `/data` 路径。\n> - 在新版 robosat 的 docker 安装包中，将 `./rs` 命令行工具对应为`docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu` 命令。\n> - docker 版 robosat ，以命令行方式执行，无法生成类似 nginx 的 docker 服务，所以执行完成后立即销毁了 docker 的 container。\n\n### 2.4 下载训练区遥感影像瓦片\n\n​ 使用 robosat 的 [download](https://github.com/mapbox/robosat#rs-download) 工具，即可获取当前训练区矢量数据覆盖的遥感影像，下载的瓦片通过 2.3 节中的**buildings.tiles** 确定。\n\n```shell\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu download http://ditu.google.cn/maps/vt/lyrs=s&x={x}&y={y}&z={z} /data/buildings.tiles /data/tiles\n```\n\n​ `download` 命令的参数介绍：\n\n> usage: `./rs download [-h] [--ext EXT] [--rate RATE] url tiles out`\n>\n> - positional arguments:\n>   - `url` endpoint with {z}/{x}/{y} variables to fetch image tiles from\n>   - `tiles` path to .csv tiles file\n>   - `out` path to slippy map directory for storing tiles\n> - optional arguments:\n>   - `-h`, --help show this help message and exit\n>   - `--ext EXT` file format to save images in (default: webp)\n>   - `--rate RATE` rate limit in max. requests per second (default: 10)\n\n​ 这里介绍几个常用的 Web 墨卡托投影的（WGS84 坐标系）遥感影像数据源：\n\n> - [谷歌地图 CN 影像](https://ditu.google.cn/)：http://ditu.google.cn/maps/vt/lyrs=s&x={x}&y={y}&z={z}\n> - [天地图影像](https://map.tianditu.gov.cn/)：https://t4.tianditu.gov.cn/DataServer?T=img_w&x={x}&y={y}&l={z}&tk=2ce94f67e58faa24beb7cb8a09780552\n> - [ArcGIS Online 影像](https://server.arcgisonline.com/arcgis/rest/services/World_Imagery/MapServer?f=jsapi)：https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\n> - [MapBox 影像](https://api.mapbox.com/styles/v1/mapbox/satellite-v9.html?title=true&access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4M29iazA2Z2gycXA4N2pmbDZmangifQ.-g_vE53SD2WrJ6tFX7QHmA#0.75/29.3/-124.8)：https://api.mapbox.com/v4/mapbox.satellite/{z}/{x}/{y}@2x.png?sku=101KOLcQaDwG1&access_token=[token]\n\n​ 几种遥感影像数据源的比较：\n\n- 从访问速度来看，天地图>谷歌>ArcGIS>Mapbox。\n\n- 从遥感影像的质量来说，总体来说：\n  - 城市地区：谷歌=ArcGIS>天地图>Mapbox\n  - 农村地图：谷歌>天地图>ArcGIS>Mapbox\n- 层级覆盖：谷歌>天地图>ArcGIS>Mapbox\n\n​ 不同影像数据源的质量不能一概而论，由于传感器不同、过境时间不同等因素，不同地区的影像数据源质量均不同，建议使用 QGIS 加载训练区位置的影像对比选择。\n\n### 2.5 制作训练区矢量数据蒙版标记\n\n​ 使用 2.2 节中制作的 geojson 数据，通过 robosat 的 [rasterize](https://github.com/mapbox/robosat#rs-rasterize) 工具可制作训练区矢量数据的蒙版标记数据。蒙版标记数据与瓦片数据一一相对应，使用同样的 **buildings.tiles** 瓦片列表产生。\n\n```shell\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu rasterize --dataset /data/dataset-building.toml --zoom 18 --size 256 /data/buildings.json /data/buildings.tiles /data/masks\n```\n\n​ `rasterise` 命令的参数介绍：\n\n> usage: `./rs rasterize [-h] --dataset DATASET --zoom ZOOM [--size SIZE] features tiles out`\n>\n> - positional arguments:\n>\n>   - `features` path to GeoJSON features file\n>   - `tiles` path to .csv tiles file\n>   - `out` directory to write converted images\n>\n> - optional arguments:\n>   `-h`, `--help` show this help message and exit\n>   `--dataset DATASET` path to dataset configuration file (default: None)\n>   `--zoom ZOOM` zoom level of tiles (default: None)\n>   `--size SIZE` size of rasterized image tiles in pixels (default: 512)\n\n这里使用到了 `dataset-building.toml` 配置文件，文件中配置了瓦片地图路径、分类方式、蒙版标记的颜色等信息。示例配置可以查看官方示例文件 [dataset-parking.toml](https://github.com/mapbox/robosat/blob/master/config/dataset-parking.toml) 。本训练中用到的 [dataset-building.toml](https://github.com/geocompass/robosat_buildings_training/dataset-building.toml) 的配置内容如下：\n\n```toml\n# Configuration related to a specific dataset.\n# For syntax see: https://github.com/toml-lang/toml#table-of-contents\n\n# Dataset specific common attributes.\n[common]\n\n  # The slippy map dataset's base directory.\n  dataset = '/Users/wucan/Document/robosat/tiles/'\n\n  # Human representation for classes.\n  classes = ['background', 'buildings']\n\n  # Color map for visualization and representing classes in masks.\n  # Note: available colors can be found in `robosat/colors.py`\n  colors  = ['denim', 'orange']\n```\n\n​ 配置文档中，最重要的是配置 `dataset` 目录，也就是上一步中下载的遥感影像瓦片路径。制作的蒙版标记效果如下图。\n\n![mask](https://github.com/geocompass/robosat_buildings_training/blob/master/img/mask.gif)\n\n​ 至此，训练和建模所需的瓦片和蒙版标记已经全部准备完，分别在 `tiles` 和 `masks` 目录中。\n\n## 3. 训练和建模\n\n### 3.1 分配训练数据、验证数据、评估数据\n\n​ RoboSat 分割模型是一个完全卷积的神经网络，需要将上一步准备好的数据集拆分为三部分，分别为`训练数据集` 、`验证数据集`、`评估数据集`，比例分别为 80%、10%、10%。每一部分的数据集中，都包含影像瓦片和蒙版标记瓦片。\n\n- 训练数据集：a training dataset on which we train the model on\n- 验证数据集：a validation dataset on which we calculate metrics on after training\n- 评估数据集：a hold-out evaluation dataset if you want to do hyper-parameter tuning\n\n  将步骤 2 中的数据进行随机分配的过程非常简单：\n\n- 新建三个 csv 文件： `csv_training.tiles` 、`csv_validation.tiles`、 `csv_evaluation.tiles`\n- 将 `buildings.tiles` 中的瓦片列表随机按 80%、10%、10% 比例进行拷贝与粘贴。注意三个文件间的瓦片列表内容不能重复。\n\n​ 使用 RoboSat 中的 [subset](https://github.com/mapbox/robosat#rs-subset) 命令，将 `tiles` 和 `masks` 中的瓦片和蒙版按照上面三个 csv 文件的瓦片列表分配进行组织影像瓦片和蒙版标记数据。\n\n```shell\n# 准备训练数据集\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/tiles/ /data/csv_training.tiles /data/dataset/training/images\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/masks/ /data/csv_training.tiles /data/dataset/training/labels\n# 准备验证数据集\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/tiles/ /data/csv_validation.tiles /data/dataset/validation/images\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/masks/ /data/csv_validation.tiles /data/dataset/validation/labels\n# 准备评估数据集\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/tiles/ /data/csv_evaluation.tiles /data/dataset/evaluation/images\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/masks/ /data/csv_evaluation.tiles /data/dataset/evaluation/labels\n```\n\n​ `subset` 命令的参数介绍：\n\n> usage: `./rs subset [-h] images tiles out`\n>\n> - positional arguments:\n>\n>   - `images` directory to read slippy map image tiles from for filtering\n>   - `tiles` csv to filter images by\n>   - `out` directory to save filtered images to\n>\n> - optional arguments:\n>   - `-h`, `--help` show this help message and exit\n\n​ 分类完成以后，将会生成 `/data/dataset` 目录，目录结构如下：\n\n```shell\ndataset\n|  training\n|  |  images\n|  |  labels\n|  validataion\n|  |  images\n|  |  labels\n|  evaluation\n|  |  images\n|  |  labels\n```\n\n### 3.2 权重计算\n\n​ 因为前景和背景在数据集中分布不均，可以使用 RoboSat 中的 [weights](https://github.com/mapbox/robosat#rs-weights) 命令，在模型训练之前计算一下每个类的分布。\n\n```shell\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu weights --dataset /data/dataset-building-weights.toml\n```\n\n​ `weights` 命令的参数如下：\n\n> usage: `./rs weights [-h] --dataset DATASET`\n>\n> - optional arguments:\n>   - `-h`, `--help` show this help message and exit\n>   - `--dataset DATASET` path to dataset configuration file (default: None)\n\n​ 这里，用到了`dataset-building-weights.toml` ，是将前面步骤中的 `dataset-building.toml` 瓦片路径修改为包含训练数据集 `dataset` 的路径。执行权重计算命令后，得到权重为：`values = [1.653415, 5.266637]` 。将其追加到 `dataset-building-weights.toml` 文件中，结果如下。\n\n```\n# Configuration related to a specific dataset.\n# For syntax see: https://github.com/toml-lang/toml#table-of-contents\n\n\n# Dataset specific common attributes.\n[common]\n\n  # The slippy map dataset's base directory.\n  dataset = '/data/dataset'\n\n  # Human representation for classes.\n  classes = ['background', 'buildings']\n\n  # Color map for visualization and representing classes in masks.\n  # Note: available colors can be found in `robosat/colors.py`\n  colors  = ['denim', 'orange']\n\n# Dataset specific class weights computes on the training data.\n# Needed by 'mIoU' and 'CrossEntropy' losses to deal with unbalanced classes.\n# Note: use `./rs weights -h` to compute these for new datasets.\n[weights]\n  values = [1.653415, 5.266637]\n```\n\n### 3.3 开始训练\n\n​ RoboSat 使用 [train](https://github.com/mapbox/robosat#rs-train) 命令进行训练。\n\n```shell\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu train --model /data/model-unet.toml --dataset /data/dataset-building-weights.toml\n```\n\n​ `train` 命令的参数如下：\n\n> usage: `./rs train [-h] --model MODEL --dataset DATASET [--checkpoint CHECKPOINT] [--resume RESUME] [--workers WORKERS]`\n>\n> - positional arguments:\n>\n>   - `--model MODEL` path to model configuration file (default: None)\n>   - `--dataset DATASET` path to dataset configuration file (default: None)\n>\n> - optional arguments:\n>   - `-h`, `--help show this help message and exit\n>   - `--checkpoint CHECKPOINT` path to a model checkpoint (to retrain) (default: None)\n>   - `--resume RESUME` resume training or fine-tuning (if checkpoint) (default: False)\n>   - `--workers WORKERS` number of workers pre-processi ng images (default: 0)\n\n​ 这里多了一个配置文件 `model-unet.toml` ，这个配置文件主要用来配置训练过程中的参数，包括是否启用 CUDA 、训练批次大小、影像瓦片的像素大小、检查点存储路径等。官方给出了[示例配置文件](https://github.com/mapbox/robosat/blob/master/config/model-unet.toml)，根据本实验的情况做了修改如下，配置如下。\n\n```\n# Configuration related to a specific model.\n# For syntax see: https://github.com/toml-lang/toml#table-of-contents\n\n# Model specific common attributes.\n[common]\n\n  # Use CUDA for GPU acceleration.\n  cuda       = false\n\n  # Batch size for training.\n  batch_size = 2\n\n  # Image side size in pixels.\n  image_size = 256\n\n  # Directory where to save checkpoints to during training.\n  checkpoint = '/data/checkpoint/'\n\n\n# Model specific optimization parameters.\n[opt]\n\n  # Total number of epochs to train for.\n  epochs     = 10\n\n  # Learning rate for the optimizer.\n  lr         = 0.01\n\n  # Loss function name (e.g 'Lovasz', 'mIoU' or 'CrossEntropy')\n  loss = 'Lovasz'\n```\n\n​ RoboSat 会进行多次迭代训练，每次迭代训练都会保存检查点(checkpoint)和各项指标等。其中，训练日志例如：\n\n```shell\n--- Hyper Parameters on Dataset: /data/dataset ---\nBatch Size:\t 2\nImage Size:\t 256\nLearning Rate:\t 0.0001\nLoss function:\t Lovasz\nWeights :\t [1.644471, 5.409126]\n---\nEpoch: 1/10\nTrain    loss: 0.3190, mIoU: 0.410, buildings IoU: 0.017, MCC: -0.002\nValidate loss: 0.3171, mIoU: 0.405, buildings IoU: 0.000, MCC: nan\n\n...\n\nEpoch: 10/10\nTrain    loss: 0.2693, mIoU: 0.528, buildings IoU: 0.229, MCC: 0.330\nValidate loss: 0.2880, mIoU: 0.491, buildings IoU: 0.167, MCC: 0.262\n```\n\n​ 可以选择最好的训练结果，保留其检查点( `checkpoint-***.pth` )，进入下一步 `predict`。一般来说，最后一个检查点效果最好。\n\n## 4. 预测\n\n### 4.1 准备预测区域数据\n\n​ RoboSat 仅支持从影像瓦片中提取建筑物，不支持从任意的 jpg 图片中提取。所以我们需要先准备预测区域的瓦片数据。\n\n​ 通过 [geojson.io](http://geojson.io/) 绘制想要提取建筑物的范围，使用矩形框即可。将自动生成的 geojson 保存为 `predict_test.json`。\n\n​ 通过 2.3 中的 `cover` 命令，获取待提取范围的瓦片列表 csv 文件，保存到 `buildings_predict.tiles` 文件中。\n\n```shell\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu cover  --zoom 18 /data/shp_data/predict_test.json /data/buildings_predict.tiles\n```\n\n​ 使用 2.4 中的 `download` 命令，下载待提取范围的影像瓦片，保存到 `images_predict` 文件夹中。\n\n```shell\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu download https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x} /data/buildings_predict.tiles /data/images_predict\n```\n\n![预测区域的geojson](https://github.com/geocompass/robosat_buildings_training/blob/master/img/predict_region_geojson.jpg)\n\n### 4.2 预测待提取建筑物概率\n\n​ 使用保存的检查点来（`checkpint`）预测图像中每个像素的分割概率，这些分割概率表示每个像素是建筑物还是背景的可能性，然后可以将这些概率转换为离散的分割掩模。\n\n​ 通过 RoboSat 的 [predict](https://github.com/mapbox/robosat#rs-predict) 命令，将待预测区域的建筑物（ `images_predict` ）提取为分割概率（`predict_segmentation-probabilities`）。\n\n```shell\ndocker run -it -d --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu predict --tile_size 256 --model /data/model-unet.toml --dataset /data/dataset-building.toml --checkpoint /data/checkpoint/checkpoint-00010-of-00010.pth /data/images_predict /data/predict_segmentation-probabilities\n```\n\n​ `predict` 命令的参数如下：\n\n> usage: `./rs predict [-h] [--batch_size BATCH_SIZE] --checkpoint CHECKPOINT [--overlap OVERLAP] --tile_size TILE_SIZE [--workers WORKERS] --model MODEL --dataset DATASET tiles probs`\n>\n> - positional arguments:\n>\n>   - `tiles` directory to read slippy map image tiles from\n>   - `probs` directory to save slippy map probability masks to\n>\n> - optional arguments:\n>   - `-h`, `--help show this help message and exit`\n>   - `--batch_size BATCH_SIZE` images per batch (default: 1)\n>   - `--checkpoint CHECKPOINT` model checkpoint to load (default: None)\n>   - `--overlap OVERLAP` tile pixel overlap to predict on (default: 32)\n>   - `--tile_size TILE_SIZE` tile size for slippy map tiles (default: None)\n>   - `--workers WORKERS` number of workers pre-processing images (default: 0)\n>   - `--model MODEL` path to model configuration file (default: None)\n>   - `--dataset DATASET` path to dataset configuration file (default: None)\n\n![预测建筑物提取概率结果](https://github.com/geocompass/robosat_buildings_training/blob/master/img/predit_probabilities.gif)\n\n### 4.3 预测概率转换为建筑物掩模\n\n​ 通过 RoboSat 的 [masks](https://github.com/mapbox/robosat#rs-masks) 命令，将上一步中的建筑物预测概率结果转换为建筑物掩模（`masks`），保存到 `predict_segmentation-masks` 文件夹中。\n\n```shell\ndocker run -it -d --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu masks /data/predict_segmentation-masks /data/predict_segmentation-probabilities\n```\n\n> usage: `./rs masks [-h] [--weights WEIGHTS [WEIGHTS ...]] masks probs [probs ...]`\n>\n> - positional arguments:\n>\n>   - `masks` slippy map directory to save masks to\n>   - `probs` slippy map directories with class probabilities\n>\n> - optional arguments:\n>   - `-h`, `--help` show this help message and exit\n>   - `--weights WEIGHTS [WEIGHTS ...]` weights for weighted average soft-voting (default:\n>     None)\n\n![预测建筑物提取掩模结果](https://github.com/geocompass/robosat_buildings_training/blob/master/img/predit_masks.jpg)\n\n### 4.4 建筑物掩模转换为 geojson\n\n​ 通过 RoboSat 的 [features]() 命令，将上一步中的建筑物掩模转换为 geojson，保存在 `predict_geojson_features` 文件夹中。\n\n```shell\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu features /data/predict_segmentation-masks /data/predict_geojson_features\n```\n\n> usage: `./rs features [-h] --type {parking} --dataset DATASET masks out`\n>\n> - positional arguments:\n>\n>   - `masks` slippy map directory with segmentation masks\n>   - `out` path to GeoJSON file to store features in\n>\n> - optional arguments:\n>   - `-h`, `--help` show this help message and exit\n>   - `--type {parking}` type of feature to extract (default: None)\n>   - `--dataset DATASET` path to dataset configuration file (default: None)\n\n（目前 `features` 命令中对 `--type` 设置有 bug，无法正常执行。）\n\n### 4.5 合并掩模分割的 geojson\n\n​ 通过 RoboSat 的 [merge](https://github.com/mapbox/robosat#rs-merge) 命令，将上一步中生成的分割的 geojson 要素进行合并，结果保存在 `predict_geojson_merge`文件夹中。\n\n```\ndocker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu features /data/predict_geojson /data/predict_geojson_merge\n```\n\n> usage: `./rs merge [-h] --threshold THRESHOLD features out`\n>\n> - positional arguments:\n>\n>   - `features` GeoJSON file to read features from\n>   - `out` path to GeoJSON to save merged features to\n>\n> - optional arguments:\n>   - `-h`, `--help` show this help message and exit\n>   - `--threshold THRESHOLD` minimum distance to adjacent features, in m (default:\n>     None)\n","slug":"bigdata/robosat-buildings-training-step-by-step","published":1,"updated":"2019-08-21T11:51:13.944Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjzl7zsuw000aowuwg4x27cpj","content":"<p>原文链接：<a href=\"https://github.com/geocompass/robosat_buildings_training\" target=\"_blank\" rel=\"noopener\">https://github.com/geocompass/robosat_buildings_training</a></p>\n<p>​ 本文介绍了如何使用 <a href=\"https://github.com/mapbox/robosat\" target=\"_blank\" rel=\"noopener\">mapbox/robosat</a> 工具，基于深度学习训练，从常规的遥感影像瓦片地图服务中自动提取建筑物。包括系统准备工作、数据准备工作和训练与建模。通过根据文章的描述，可以完成训练任务。</p>\n<p>​ 参考文章：<a href=\"https://www.openstreetmap.org/user/daniel-j-h/diary/44321\" target=\"_blank\" rel=\"noopener\">daniel-j-h : RoboSat ❤️ Tanzania</a></p>\n<h2 id=\"1-系统准备工作\"><a href=\"#1-系统准备工作\" class=\"headerlink\" title=\"1. 系统准备工作\"></a>1. 系统准备工作</h2><h3 id=\"1-1-设备及系统\"><a href=\"#1-1-设备及系统\" class=\"headerlink\" title=\"1.1 设备及系统\"></a>1.1 设备及系统</h3><blockquote>\n<p>准备一台安装 Linux 或 MacOS 系统的机器，可以是 CentOS、Ubuntu 或 MacOS。机器可以是实体机，也可以是 VMware 虚拟机。</p>\n</blockquote>\n<h3 id=\"1-2-安装-Docker\"><a href=\"#1-2-安装-Docker\" class=\"headerlink\" title=\"1.2 安装 Docker\"></a>1.2 安装 Docker</h3><blockquote>\n<p>在机器中安装 Docker，不建议是 Windows 版 Docker。<a href=\"https://www.runoob.com/docker/macos-docker-install.html\" target=\"_blank\" rel=\"noopener\">MacOS 安装 Docker</a> ，<a href=\"https://www.runoob.com/docker/centos-docker-install.html\" target=\"_blank\" rel=\"noopener\">CentOS 安装 Docker</a></p>\n</blockquote>\n<h3 id=\"1-3-在-Docker-中安装-Robosat\"><a href=\"#1-3-在-Docker-中安装-Robosat\" class=\"headerlink\" title=\"1.3 在 Docker 中安装 Robosat\"></a>1.3 在 Docker 中安装 Robosat</h3><blockquote>\n<p>Robosat 的 <a href=\"https://hub.docker.com/r/mapbox/robosat\" target=\"_blank\" rel=\"noopener\">Docker Hub</a>。</p>\n</blockquote>\n<p>​ 可以使用两种方式安装 Robosat：</p>\n<ul>\n<li>使用 CPU 容器：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu --help</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用 GPU 容器（主机上需要 <a href=\"https://github.com/NVIDIA/nvidia-docker\" target=\"_blank\" rel=\"noopener\">nvidia-docker</a>）：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --runtime=nvidia -it --rm -v $PWD:/data --ipc=host mapbox/robosat:latest-gpu train --model /data/model.toml --dataset /data/dataset.toml --workers 4</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-数据准备工作\"><a href=\"#2-数据准备工作\" class=\"headerlink\" title=\"2. 数据准备工作\"></a>2. 数据准备工作</h2><h3 id=\"2-1-建筑物轮廓矢量数据\"><a href=\"#2-1-建筑物轮廓矢量数据\" class=\"headerlink\" title=\"2.1 建筑物轮廓矢量数据\"></a>2.1 建筑物轮廓矢量数据</h3><p>​ 已有的建筑物轮廓矢量数据用来作为建筑物提取的训练数据源。可以有两种方式获取：</p>\n<ul>\n<li>OSM 数据源，可以在 <a href=\"http://download.geofabrik.de/\" target=\"_blank\" rel=\"noopener\">geofabrik</a> 获取，通过 <a href=\"https://github.com/osmcode/osmium-tool\" target=\"_blank\" rel=\"noopener\">osmium</a> 和 <a href=\"https://github.com/mapbox/robosat\" target=\"_blank\" rel=\"noopener\">robosat</a> 工具<a href=\"https://www.openstreetmap.org/user/daniel-j-h/diary/44321\" target=\"_blank\" rel=\"noopener\">进行处理</a>。</li>\n<li>自有数据源。通过 <a href=\"https://qgis.org/en/site/\" target=\"_blank\" rel=\"noopener\">QGIS</a> 或 ArcMap 等工具，加载遥感影像底图，描述的建筑物轮廓 Shapefile 数据。</li>\n</ul>\n<p>​ <strong>本文使用第二种数据来源，并已<a href=\"https://github.com/geocompass/robosat_buildings_training/tree/master/shp_data\" target=\"_blank\" rel=\"noopener\">开源数据源</a>，开源的矢量数据覆盖厦门核心区。</strong></p>\n<p>​ <strong>考虑到使用个人电脑没有 CUDA 加速训练成本较高，本文使用 <a href=\"https://github.com/geocompass/robosat_buildings_training/blob/master/shp_data/buia_xiamen_min_shp.zip\" target=\"_blank\" rel=\"noopener\">buia_xiamen_min_shp</a>，包含厦门核心区部分区域，共 5679 个建筑物轮廓。在 Docker 配置为 处理器(<code>CPU</code>) 4 核、内存(<code>RAM</code>)16GB、交换内存(<code>Swap</code>)3GB 时，训练时间大约 2.5 小时。</strong></p>\n<p><img src=\"https://github.com/geocompass/robosat_buildings_training/blob/master/img/buia_xiamen_preview.jpg\" alt=\"训练区矢量数据预览\"></p>\n<h3 id=\"2-2-获取建筑物轮廓-geojson-数据\"><a href=\"#2-2-获取建筑物轮廓-geojson-数据\" class=\"headerlink\" title=\"2.2 获取建筑物轮廓 geojson 数据\"></a>2.2 获取建筑物轮廓 geojson 数据</h3><p>​ 通过在线工具 <a href=\"https://mapshaper.org/\" target=\"_blank\" rel=\"noopener\">mapshaper</a>，将 shapefile 数据转换为 geojson 数据。</p>\n<h3 id=\"2-3-提取训练区覆盖的瓦片行列号\"><a href=\"#2-3-提取训练区覆盖的瓦片行列号\" class=\"headerlink\" title=\"2.3 提取训练区覆盖的瓦片行列号\"></a>2.3 提取训练区覆盖的瓦片行列号</h3><p>​ 使用 robosat 的 <a href=\"https://github.com/mapbox/robosat#rs-cover\" target=\"_blank\" rel=\"noopener\">cover</a> 命令，即可获取当前训练区矢量数据覆盖的瓦片行列号，并使用 csv 文件存储。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu cover  --zoom 18 /data/buildings.json /data/buildings.tiles</span><br></pre></td></tr></table></figure>\n\n<p><code>cover</code> 命令的参数介绍：</p>\n<blockquote>\n<p>usage: <code>./rs cover [-h] --zoom ZOOM features out</code></p>\n<ul>\n<li>positional arguments:<ul>\n<li><code>features</code> path to GeoJSON features</li>\n<li><code>out</code> path to csv file to store tiles in</li>\n</ul>\n</li>\n<li>optional arguments:<ul>\n<li><code>-h</code>, –help show this help message and exit</li>\n<li><code>--zoom ZOOM</code> zoom level of tiles (default: None)</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>这里是获取在 18 级下训练区覆盖的瓦片行列号。18 级是国内地图通用的最大级别，如果有国外更清晰数据源，可设置更高地图级别。</p>\n<p>​ cover 工具对训练区矢量数据计算的瓦片行列号使用的是通用的 WGS84-&gt;Web 墨卡托投影坐标系。</p>\n<blockquote>\n<p>小知识：</p>\n<ul>\n<li><code>$PWD:/data</code> 是将当前路径映射为 docker 中的 <code>/data</code> 路径。</li>\n<li>在新版 robosat 的 docker 安装包中，将 <code>./rs</code> 命令行工具对应为<code>docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu</code> 命令。</li>\n<li>docker 版 robosat ，以命令行方式执行，无法生成类似 nginx 的 docker 服务，所以执行完成后立即销毁了 docker 的 container。</li>\n</ul>\n</blockquote>\n<h3 id=\"2-4-下载训练区遥感影像瓦片\"><a href=\"#2-4-下载训练区遥感影像瓦片\" class=\"headerlink\" title=\"2.4 下载训练区遥感影像瓦片\"></a>2.4 下载训练区遥感影像瓦片</h3><p>​ 使用 robosat 的 <a href=\"https://github.com/mapbox/robosat#rs-download\" target=\"_blank\" rel=\"noopener\">download</a> 工具，即可获取当前训练区矢量数据覆盖的遥感影像，下载的瓦片通过 2.3 节中的<strong>buildings.tiles</strong> 确定。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu download http://ditu.google.cn/maps/vt/lyrs=s&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;z=&#123;z&#125; /data/buildings.tiles /data/tiles</span><br></pre></td></tr></table></figure>\n\n<p>​ <code>download</code> 命令的参数介绍：</p>\n<blockquote>\n<p>usage: <code>./rs download [-h] [--ext EXT] [--rate RATE] url tiles out</code></p>\n<ul>\n<li>positional arguments:<ul>\n<li><code>url</code> endpoint with {z}/{x}/{y} variables to fetch image tiles from</li>\n<li><code>tiles</code> path to .csv tiles file</li>\n<li><code>out</code> path to slippy map directory for storing tiles</li>\n</ul>\n</li>\n<li>optional arguments:<ul>\n<li><code>-h</code>, –help show this help message and exit</li>\n<li><code>--ext EXT</code> file format to save images in (default: webp)</li>\n<li><code>--rate RATE</code> rate limit in max. requests per second (default: 10)</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>​ 这里介绍几个常用的 Web 墨卡托投影的（WGS84 坐标系）遥感影像数据源：</p>\n<blockquote>\n<ul>\n<li><a href=\"https://ditu.google.cn/\" target=\"_blank\" rel=\"noopener\">谷歌地图 CN 影像</a>：<a href=\"http://ditu.google.cn/maps/vt/lyrs=s&amp;x={x}&amp;y={y}&amp;z={z}\" target=\"_blank\" rel=\"noopener\">http://ditu.google.cn/maps/vt/lyrs=s&amp;x={x}&amp;y={y}&amp;z={z}</a></li>\n<li><a href=\"https://map.tianditu.gov.cn/\" target=\"_blank\" rel=\"noopener\">天地图影像</a>：<a href=\"https://t4.tianditu.gov.cn/DataServer?T=img_w&amp;x={x}&amp;y={y}&amp;l={z}&amp;tk=2ce94f67e58faa24beb7cb8a09780552\" target=\"_blank\" rel=\"noopener\">https://t4.tianditu.gov.cn/DataServer?T=img_w&amp;x={x}&amp;y={y}&amp;l={z}&amp;tk=2ce94f67e58faa24beb7cb8a09780552</a></li>\n<li><a href=\"https://server.arcgisonline.com/arcgis/rest/services/World_Imagery/MapServer?f=jsapi\" target=\"_blank\" rel=\"noopener\">ArcGIS Online 影像</a>：<a href=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\" target=\"_blank\" rel=\"noopener\">https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}</a></li>\n<li><a href=\"https://api.mapbox.com/styles/v1/mapbox/satellite-v9.html?title=true&access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4M29iazA2Z2gycXA4N2pmbDZmangifQ.-g_vE53SD2WrJ6tFX7QHmA#0.75/29.3/-124.8\" target=\"_blank\" rel=\"noopener\">MapBox 影像</a>：<a href=\"https://api.mapbox.com/v4/mapbox.satellite/{z}/{x}/{y}@2x.png?sku=101KOLcQaDwG1&amp;access_token=[token]\" target=\"_blank\" rel=\"noopener\">https://api.mapbox.com/v4/mapbox.satellite/{z}/{x}/{y}@2x.png?sku=101KOLcQaDwG1&amp;access_token=[token]</a></li>\n</ul>\n</blockquote>\n<p>​ 几种遥感影像数据源的比较：</p>\n<ul>\n<li><p>从访问速度来看，天地图&gt;谷歌&gt;ArcGIS&gt;Mapbox。</p>\n</li>\n<li><p>从遥感影像的质量来说，总体来说：</p>\n<ul>\n<li>城市地区：谷歌=ArcGIS&gt;天地图&gt;Mapbox</li>\n<li>农村地图：谷歌&gt;天地图&gt;ArcGIS&gt;Mapbox</li>\n</ul>\n</li>\n<li><p>层级覆盖：谷歌&gt;天地图&gt;ArcGIS&gt;Mapbox</p>\n</li>\n</ul>\n<p>​ 不同影像数据源的质量不能一概而论，由于传感器不同、过境时间不同等因素，不同地区的影像数据源质量均不同，建议使用 QGIS 加载训练区位置的影像对比选择。</p>\n<h3 id=\"2-5-制作训练区矢量数据蒙版标记\"><a href=\"#2-5-制作训练区矢量数据蒙版标记\" class=\"headerlink\" title=\"2.5 制作训练区矢量数据蒙版标记\"></a>2.5 制作训练区矢量数据蒙版标记</h3><p>​ 使用 2.2 节中制作的 geojson 数据，通过 robosat 的 <a href=\"https://github.com/mapbox/robosat#rs-rasterize\" target=\"_blank\" rel=\"noopener\">rasterize</a> 工具可制作训练区矢量数据的蒙版标记数据。蒙版标记数据与瓦片数据一一相对应，使用同样的 <strong>buildings.tiles</strong> 瓦片列表产生。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu rasterize --dataset /data/dataset-building.toml --zoom 18 --size 256 /data/buildings.json /data/buildings.tiles /data/masks</span><br></pre></td></tr></table></figure>\n\n<p>​ <code>rasterise</code> 命令的参数介绍：</p>\n<blockquote>\n<p>usage: <code>./rs rasterize [-h] --dataset DATASET --zoom ZOOM [--size SIZE] features tiles out</code></p>\n<ul>\n<li><p>positional arguments:</p>\n<ul>\n<li><code>features</code> path to GeoJSON features file</li>\n<li><code>tiles</code> path to .csv tiles file</li>\n<li><code>out</code> directory to write converted images</li>\n</ul>\n</li>\n<li><p>optional arguments:<br><code>-h</code>, <code>--help</code> show this help message and exit<br><code>--dataset DATASET</code> path to dataset configuration file (default: None)<br><code>--zoom ZOOM</code> zoom level of tiles (default: None)<br><code>--size SIZE</code> size of rasterized image tiles in pixels (default: 512)</p>\n</li>\n</ul>\n</blockquote>\n<p>这里使用到了 <code>dataset-building.toml</code> 配置文件，文件中配置了瓦片地图路径、分类方式、蒙版标记的颜色等信息。示例配置可以查看官方示例文件 <a href=\"https://github.com/mapbox/robosat/blob/master/config/dataset-parking.toml\" target=\"_blank\" rel=\"noopener\">dataset-parking.toml</a> 。本训练中用到的 <a href=\"https://github.com/geocompass/robosat_buildings_training/dataset-building.toml\" target=\"_blank\" rel=\"noopener\">dataset-building.toml</a> 的配置内容如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Configuration related to a specific dataset.</span></span><br><span class=\"line\"><span class=\"comment\"># For syntax see: https://github.com/toml-lang/toml#table-of-contents</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Dataset specific common attributes.</span></span><br><span class=\"line\"><span class=\"section\">[common]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># The slippy map dataset's base directory.</span></span><br><span class=\"line\">  dataset = '/Users/wucan/Document/robosat/tiles/'</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Human representation for classes.</span></span><br><span class=\"line\">  classes = ['background', 'buildings']</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Color map for visualization and representing classes in masks.</span></span><br><span class=\"line\">  <span class=\"comment\"># Note: available colors can be found in `robosat/colors.py`</span></span><br><span class=\"line\">  colors  = ['denim', 'orange']</span><br></pre></td></tr></table></figure>\n\n<p>​ 配置文档中，最重要的是配置 <code>dataset</code> 目录，也就是上一步中下载的遥感影像瓦片路径。制作的蒙版标记效果如下图。</p>\n<p><img src=\"https://github.com/geocompass/robosat_buildings_training/blob/master/img/mask.gif\" alt=\"mask\"></p>\n<p>​ 至此，训练和建模所需的瓦片和蒙版标记已经全部准备完，分别在 <code>tiles</code> 和 <code>masks</code> 目录中。</p>\n<h2 id=\"3-训练和建模\"><a href=\"#3-训练和建模\" class=\"headerlink\" title=\"3. 训练和建模\"></a>3. 训练和建模</h2><h3 id=\"3-1-分配训练数据、验证数据、评估数据\"><a href=\"#3-1-分配训练数据、验证数据、评估数据\" class=\"headerlink\" title=\"3.1 分配训练数据、验证数据、评估数据\"></a>3.1 分配训练数据、验证数据、评估数据</h3><p>​ RoboSat 分割模型是一个完全卷积的神经网络，需要将上一步准备好的数据集拆分为三部分，分别为<code>训练数据集</code> 、<code>验证数据集</code>、<code>评估数据集</code>，比例分别为 80%、10%、10%。每一部分的数据集中，都包含影像瓦片和蒙版标记瓦片。</p>\n<ul>\n<li><p>训练数据集：a training dataset on which we train the model on</p>\n</li>\n<li><p>验证数据集：a validation dataset on which we calculate metrics on after training</p>\n</li>\n<li><p>评估数据集：a hold-out evaluation dataset if you want to do hyper-parameter tuning</p>\n<p>将步骤 2 中的数据进行随机分配的过程非常简单：</p>\n</li>\n<li><p>新建三个 csv 文件： <code>csv_training.tiles</code> 、<code>csv_validation.tiles</code>、 <code>csv_evaluation.tiles</code></p>\n</li>\n<li><p>将 <code>buildings.tiles</code> 中的瓦片列表随机按 80%、10%、10% 比例进行拷贝与粘贴。注意三个文件间的瓦片列表内容不能重复。</p>\n</li>\n</ul>\n<p>​ 使用 RoboSat 中的 <a href=\"https://github.com/mapbox/robosat#rs-subset\" target=\"_blank\" rel=\"noopener\">subset</a> 命令，将 <code>tiles</code> 和 <code>masks</code> 中的瓦片和蒙版按照上面三个 csv 文件的瓦片列表分配进行组织影像瓦片和蒙版标记数据。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 准备训练数据集</span></span><br><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/tiles/ /data/csv_training.tiles /data/dataset/training/images</span><br><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/masks/ /data/csv_training.tiles /data/dataset/training/labels</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 准备验证数据集</span></span><br><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/tiles/ /data/csv_validation.tiles /data/dataset/validation/images</span><br><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/masks/ /data/csv_validation.tiles /data/dataset/validation/labels</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 准备评估数据集</span></span><br><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/tiles/ /data/csv_evaluation.tiles /data/dataset/evaluation/images</span><br><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/masks/ /data/csv_evaluation.tiles /data/dataset/evaluation/labels</span><br></pre></td></tr></table></figure>\n\n<p>​ <code>subset</code> 命令的参数介绍：</p>\n<blockquote>\n<p>usage: <code>./rs subset [-h] images tiles out</code></p>\n<ul>\n<li><p>positional arguments:</p>\n<ul>\n<li><code>images</code> directory to read slippy map image tiles from for filtering</li>\n<li><code>tiles</code> csv to filter images by</li>\n<li><code>out</code> directory to save filtered images to</li>\n</ul>\n</li>\n<li><p>optional arguments:</p>\n<ul>\n<li><code>-h</code>, <code>--help</code> show this help message and exit</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>​ 分类完成以后，将会生成 <code>/data/dataset</code> 目录，目录结构如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">dataset</span><br><span class=\"line\">|  training</span><br><span class=\"line\">|  |  images</span><br><span class=\"line\">|  |  labels</span><br><span class=\"line\">|  validataion</span><br><span class=\"line\">|  |  images</span><br><span class=\"line\">|  |  labels</span><br><span class=\"line\">|  evaluation</span><br><span class=\"line\">|  |  images</span><br><span class=\"line\">|  |  labels</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-权重计算\"><a href=\"#3-2-权重计算\" class=\"headerlink\" title=\"3.2 权重计算\"></a>3.2 权重计算</h3><p>​ 因为前景和背景在数据集中分布不均，可以使用 RoboSat 中的 <a href=\"https://github.com/mapbox/robosat#rs-weights\" target=\"_blank\" rel=\"noopener\">weights</a> 命令，在模型训练之前计算一下每个类的分布。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu weights --dataset /data/dataset-building-weights.toml</span><br></pre></td></tr></table></figure>\n\n<p>​ <code>weights</code> 命令的参数如下：</p>\n<blockquote>\n<p>usage: <code>./rs weights [-h] --dataset DATASET</code></p>\n<ul>\n<li>optional arguments:<ul>\n<li><code>-h</code>, <code>--help</code> show this help message and exit</li>\n<li><code>--dataset DATASET</code> path to dataset configuration file (default: None)</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>​ 这里，用到了<code>dataset-building-weights.toml</code> ，是将前面步骤中的 <code>dataset-building.toml</code> 瓦片路径修改为包含训练数据集 <code>dataset</code> 的路径。执行权重计算命令后，得到权重为：<code>values = [1.653415, 5.266637]</code> 。将其追加到 <code>dataset-building-weights.toml</code> 文件中，结果如下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Configuration related to a specific dataset.</span><br><span class=\"line\"># For syntax see: https://github.com/toml-lang/toml#table-of-contents</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># Dataset specific common attributes.</span><br><span class=\"line\">[common]</span><br><span class=\"line\"></span><br><span class=\"line\">  # The slippy map dataset&apos;s base directory.</span><br><span class=\"line\">  dataset = &apos;/data/dataset&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">  # Human representation for classes.</span><br><span class=\"line\">  classes = [&apos;background&apos;, &apos;buildings&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">  # Color map for visualization and representing classes in masks.</span><br><span class=\"line\">  # Note: available colors can be found in `robosat/colors.py`</span><br><span class=\"line\">  colors  = [&apos;denim&apos;, &apos;orange&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\"># Dataset specific class weights computes on the training data.</span><br><span class=\"line\"># Needed by &apos;mIoU&apos; and &apos;CrossEntropy&apos; losses to deal with unbalanced classes.</span><br><span class=\"line\"># Note: use `./rs weights -h` to compute these for new datasets.</span><br><span class=\"line\">[weights]</span><br><span class=\"line\">  values = [1.653415, 5.266637]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-开始训练\"><a href=\"#3-3-开始训练\" class=\"headerlink\" title=\"3.3 开始训练\"></a>3.3 开始训练</h3><p>​ RoboSat 使用 <a href=\"https://github.com/mapbox/robosat#rs-train\" target=\"_blank\" rel=\"noopener\">train</a> 命令进行训练。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu train --model /data/model-unet.toml --dataset /data/dataset-building-weights.toml</span><br></pre></td></tr></table></figure>\n\n<p>​ <code>train</code> 命令的参数如下：</p>\n<blockquote>\n<p>usage: <code>./rs train [-h] --model MODEL --dataset DATASET [--checkpoint CHECKPOINT] [--resume RESUME] [--workers WORKERS]</code></p>\n<ul>\n<li><p>positional arguments:</p>\n<ul>\n<li><code>--model MODEL</code> path to model configuration file (default: None)</li>\n<li><code>--dataset DATASET</code> path to dataset configuration file (default: None)</li>\n</ul>\n</li>\n<li><p>optional arguments:</p>\n<ul>\n<li><code>-h</code>, `–help show this help message and exit</li>\n<li><code>--checkpoint CHECKPOINT</code> path to a model checkpoint (to retrain) (default: None)</li>\n<li><code>--resume RESUME</code> resume training or fine-tuning (if checkpoint) (default: False)</li>\n<li><code>--workers WORKERS</code> number of workers pre-processi ng images (default: 0)</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>​ 这里多了一个配置文件 <code>model-unet.toml</code> ，这个配置文件主要用来配置训练过程中的参数，包括是否启用 CUDA 、训练批次大小、影像瓦片的像素大小、检查点存储路径等。官方给出了<a href=\"https://github.com/mapbox/robosat/blob/master/config/model-unet.toml\" target=\"_blank\" rel=\"noopener\">示例配置文件</a>，根据本实验的情况做了修改如下，配置如下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Configuration related to a specific model.</span><br><span class=\"line\"># For syntax see: https://github.com/toml-lang/toml#table-of-contents</span><br><span class=\"line\"></span><br><span class=\"line\"># Model specific common attributes.</span><br><span class=\"line\">[common]</span><br><span class=\"line\"></span><br><span class=\"line\">  # Use CUDA for GPU acceleration.</span><br><span class=\"line\">  cuda       = false</span><br><span class=\"line\"></span><br><span class=\"line\">  # Batch size for training.</span><br><span class=\"line\">  batch_size = 2</span><br><span class=\"line\"></span><br><span class=\"line\">  # Image side size in pixels.</span><br><span class=\"line\">  image_size = 256</span><br><span class=\"line\"></span><br><span class=\"line\">  # Directory where to save checkpoints to during training.</span><br><span class=\"line\">  checkpoint = &apos;/data/checkpoint/&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># Model specific optimization parameters.</span><br><span class=\"line\">[opt]</span><br><span class=\"line\"></span><br><span class=\"line\">  # Total number of epochs to train for.</span><br><span class=\"line\">  epochs     = 10</span><br><span class=\"line\"></span><br><span class=\"line\">  # Learning rate for the optimizer.</span><br><span class=\"line\">  lr         = 0.01</span><br><span class=\"line\"></span><br><span class=\"line\">  # Loss function name (e.g &apos;Lovasz&apos;, &apos;mIoU&apos; or &apos;CrossEntropy&apos;)</span><br><span class=\"line\">  loss = &apos;Lovasz&apos;</span><br></pre></td></tr></table></figure>\n\n<p>​ RoboSat 会进行多次迭代训练，每次迭代训练都会保存检查点(checkpoint)和各项指标等。其中，训练日志例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">--- Hyper Parameters on Dataset: /data/dataset ---</span><br><span class=\"line\">Batch Size:\t 2</span><br><span class=\"line\">Image Size:\t 256</span><br><span class=\"line\">Learning Rate:\t 0.0001</span><br><span class=\"line\">Loss function:\t Lovasz</span><br><span class=\"line\">Weights :\t [1.644471, 5.409126]</span><br><span class=\"line\">---</span><br><span class=\"line\">Epoch: 1/10</span><br><span class=\"line\">Train    loss: 0.3190, mIoU: 0.410, buildings IoU: 0.017, MCC: -0.002</span><br><span class=\"line\">Validate loss: 0.3171, mIoU: 0.405, buildings IoU: 0.000, MCC: nan</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">Epoch: 10/10</span><br><span class=\"line\">Train    loss: 0.2693, mIoU: 0.528, buildings IoU: 0.229, MCC: 0.330</span><br><span class=\"line\">Validate loss: 0.2880, mIoU: 0.491, buildings IoU: 0.167, MCC: 0.262</span><br></pre></td></tr></table></figure>\n\n<p>​ 可以选择最好的训练结果，保留其检查点( <code>checkpoint-***.pth</code> )，进入下一步 <code>predict</code>。一般来说，最后一个检查点效果最好。</p>\n<h2 id=\"4-预测\"><a href=\"#4-预测\" class=\"headerlink\" title=\"4. 预测\"></a>4. 预测</h2><h3 id=\"4-1-准备预测区域数据\"><a href=\"#4-1-准备预测区域数据\" class=\"headerlink\" title=\"4.1 准备预测区域数据\"></a>4.1 准备预测区域数据</h3><p>​ RoboSat 仅支持从影像瓦片中提取建筑物，不支持从任意的 jpg 图片中提取。所以我们需要先准备预测区域的瓦片数据。</p>\n<p>​ 通过 <a href=\"http://geojson.io/\" target=\"_blank\" rel=\"noopener\">geojson.io</a> 绘制想要提取建筑物的范围，使用矩形框即可。将自动生成的 geojson 保存为 <code>predict_test.json</code>。</p>\n<p>​ 通过 2.3 中的 <code>cover</code> 命令，获取待提取范围的瓦片列表 csv 文件，保存到 <code>buildings_predict.tiles</code> 文件中。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu cover  --zoom 18 /data/shp_data/predict_test.json /data/buildings_predict.tiles</span><br></pre></td></tr></table></figure>\n\n<p>​ 使用 2.4 中的 <code>download</code> 命令，下载待提取范围的影像瓦片，保存到 <code>images_predict</code> 文件夹中。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu download https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/&#123;z&#125;/&#123;y&#125;/&#123;x&#125; /data/buildings_predict.tiles /data/images_predict</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://github.com/geocompass/robosat_buildings_training/blob/master/img/predict_region_geojson.jpg\" alt=\"预测区域的geojson\"></p>\n<h3 id=\"4-2-预测待提取建筑物概率\"><a href=\"#4-2-预测待提取建筑物概率\" class=\"headerlink\" title=\"4.2 预测待提取建筑物概率\"></a>4.2 预测待提取建筑物概率</h3><p>​ 使用保存的检查点来（<code>checkpint</code>）预测图像中每个像素的分割概率，这些分割概率表示每个像素是建筑物还是背景的可能性，然后可以将这些概率转换为离散的分割掩模。</p>\n<p>​ 通过 RoboSat 的 <a href=\"https://github.com/mapbox/robosat#rs-predict\" target=\"_blank\" rel=\"noopener\">predict</a> 命令，将待预测区域的建筑物（ <code>images_predict</code> ）提取为分割概率（<code>predict_segmentation-probabilities</code>）。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it -d --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu predict --tile_size 256 --model /data/model-unet.toml --dataset /data/dataset-building.toml --checkpoint /data/checkpoint/checkpoint-00010-of-00010.pth /data/images_predict /data/predict_segmentation-probabilities</span><br></pre></td></tr></table></figure>\n\n<p>​ <code>predict</code> 命令的参数如下：</p>\n<blockquote>\n<p>usage: <code>./rs predict [-h] [--batch_size BATCH_SIZE] --checkpoint CHECKPOINT [--overlap OVERLAP] --tile_size TILE_SIZE [--workers WORKERS] --model MODEL --dataset DATASET tiles probs</code></p>\n<ul>\n<li><p>positional arguments:</p>\n<ul>\n<li><code>tiles</code> directory to read slippy map image tiles from</li>\n<li><code>probs</code> directory to save slippy map probability masks to</li>\n</ul>\n</li>\n<li><p>optional arguments:</p>\n<ul>\n<li><code>-h</code>, <code>--help show this help message and exit</code></li>\n<li><code>--batch_size BATCH_SIZE</code> images per batch (default: 1)</li>\n<li><code>--checkpoint CHECKPOINT</code> model checkpoint to load (default: None)</li>\n<li><code>--overlap OVERLAP</code> tile pixel overlap to predict on (default: 32)</li>\n<li><code>--tile_size TILE_SIZE</code> tile size for slippy map tiles (default: None)</li>\n<li><code>--workers WORKERS</code> number of workers pre-processing images (default: 0)</li>\n<li><code>--model MODEL</code> path to model configuration file (default: None)</li>\n<li><code>--dataset DATASET</code> path to dataset configuration file (default: None)</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p><img src=\"https://github.com/geocompass/robosat_buildings_training/blob/master/img/predit_probabilities.gif\" alt=\"预测建筑物提取概率结果\"></p>\n<h3 id=\"4-3-预测概率转换为建筑物掩模\"><a href=\"#4-3-预测概率转换为建筑物掩模\" class=\"headerlink\" title=\"4.3 预测概率转换为建筑物掩模\"></a>4.3 预测概率转换为建筑物掩模</h3><p>​ 通过 RoboSat 的 <a href=\"https://github.com/mapbox/robosat#rs-masks\" target=\"_blank\" rel=\"noopener\">masks</a> 命令，将上一步中的建筑物预测概率结果转换为建筑物掩模（<code>masks</code>），保存到 <code>predict_segmentation-masks</code> 文件夹中。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it -d --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu masks /data/predict_segmentation-masks /data/predict_segmentation-probabilities</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>usage: <code>./rs masks [-h] [--weights WEIGHTS [WEIGHTS ...]] masks probs [probs ...]</code></p>\n<ul>\n<li><p>positional arguments:</p>\n<ul>\n<li><code>masks</code> slippy map directory to save masks to</li>\n<li><code>probs</code> slippy map directories with class probabilities</li>\n</ul>\n</li>\n<li><p>optional arguments:</p>\n<ul>\n<li><code>-h</code>, <code>--help</code> show this help message and exit</li>\n<li><code>--weights WEIGHTS [WEIGHTS ...]</code> weights for weighted average soft-voting (default:<br>None)</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p><img src=\"https://github.com/geocompass/robosat_buildings_training/blob/master/img/predit_masks.jpg\" alt=\"预测建筑物提取掩模结果\"></p>\n<h3 id=\"4-4-建筑物掩模转换为-geojson\"><a href=\"#4-4-建筑物掩模转换为-geojson\" class=\"headerlink\" title=\"4.4 建筑物掩模转换为 geojson\"></a>4.4 建筑物掩模转换为 geojson</h3><p>​ 通过 RoboSat 的 <a href>features</a> 命令，将上一步中的建筑物掩模转换为 geojson，保存在 <code>predict_geojson_features</code> 文件夹中。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu features /data/predict_segmentation-masks /data/predict_geojson_features</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>usage: <code>./rs features [-h] --type {parking} --dataset DATASET masks out</code></p>\n<ul>\n<li><p>positional arguments:</p>\n<ul>\n<li><code>masks</code> slippy map directory with segmentation masks</li>\n<li><code>out</code> path to GeoJSON file to store features in</li>\n</ul>\n</li>\n<li><p>optional arguments:</p>\n<ul>\n<li><code>-h</code>, <code>--help</code> show this help message and exit</li>\n<li><code>--type {parking}</code> type of feature to extract (default: None)</li>\n<li><code>--dataset DATASET</code> path to dataset configuration file (default: None)</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>（目前 <code>features</code> 命令中对 <code>--type</code> 设置有 bug，无法正常执行。）</p>\n<h3 id=\"4-5-合并掩模分割的-geojson\"><a href=\"#4-5-合并掩模分割的-geojson\" class=\"headerlink\" title=\"4.5 合并掩模分割的 geojson\"></a>4.5 合并掩模分割的 geojson</h3><p>​ 通过 RoboSat 的 <a href=\"https://github.com/mapbox/robosat#rs-merge\" target=\"_blank\" rel=\"noopener\">merge</a> 命令，将上一步中生成的分割的 geojson 要素进行合并，结果保存在 <code>predict_geojson_merge</code>文件夹中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu features /data/predict_geojson /data/predict_geojson_merge</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>usage: <code>./rs merge [-h] --threshold THRESHOLD features out</code></p>\n<ul>\n<li><p>positional arguments:</p>\n<ul>\n<li><code>features</code> GeoJSON file to read features from</li>\n<li><code>out</code> path to GeoJSON to save merged features to</li>\n</ul>\n</li>\n<li><p>optional arguments:</p>\n<ul>\n<li><code>-h</code>, <code>--help</code> show this help message and exit</li>\n<li><code>--threshold THRESHOLD</code> minimum distance to adjacent features, in m (default:<br>None)</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>原文链接：<a href=\"https://github.com/geocompass/robosat_buildings_training\" target=\"_blank\" rel=\"noopener\">https://github.com/geocompass/robosat_buildings_training</a></p>\n<p>​ 本文介绍了如何使用 <a href=\"https://github.com/mapbox/robosat\" target=\"_blank\" rel=\"noopener\">mapbox/robosat</a> 工具，基于深度学习训练，从常规的遥感影像瓦片地图服务中自动提取建筑物。包括系统准备工作、数据准备工作和训练与建模。通过根据文章的描述，可以完成训练任务。</p>\n<p>​ 参考文章：<a href=\"https://www.openstreetmap.org/user/daniel-j-h/diary/44321\" target=\"_blank\" rel=\"noopener\">daniel-j-h : RoboSat ❤️ Tanzania</a></p>\n<h2 id=\"1-系统准备工作\"><a href=\"#1-系统准备工作\" class=\"headerlink\" title=\"1. 系统准备工作\"></a>1. 系统准备工作</h2><h3 id=\"1-1-设备及系统\"><a href=\"#1-1-设备及系统\" class=\"headerlink\" title=\"1.1 设备及系统\"></a>1.1 设备及系统</h3><blockquote>\n<p>准备一台安装 Linux 或 MacOS 系统的机器，可以是 CentOS、Ubuntu 或 MacOS。机器可以是实体机，也可以是 VMware 虚拟机。</p>\n</blockquote>\n<h3 id=\"1-2-安装-Docker\"><a href=\"#1-2-安装-Docker\" class=\"headerlink\" title=\"1.2 安装 Docker\"></a>1.2 安装 Docker</h3><blockquote>\n<p>在机器中安装 Docker，不建议是 Windows 版 Docker。<a href=\"https://www.runoob.com/docker/macos-docker-install.html\" target=\"_blank\" rel=\"noopener\">MacOS 安装 Docker</a> ，<a href=\"https://www.runoob.com/docker/centos-docker-install.html\" target=\"_blank\" rel=\"noopener\">CentOS 安装 Docker</a></p>\n</blockquote>\n<h3 id=\"1-3-在-Docker-中安装-Robosat\"><a href=\"#1-3-在-Docker-中安装-Robosat\" class=\"headerlink\" title=\"1.3 在 Docker 中安装 Robosat\"></a>1.3 在 Docker 中安装 Robosat</h3><blockquote>\n<p>Robosat 的 <a href=\"https://hub.docker.com/r/mapbox/robosat\" target=\"_blank\" rel=\"noopener\">Docker Hub</a>。</p>\n</blockquote>\n<p>​ 可以使用两种方式安装 Robosat：</p>\n<ul>\n<li>使用 CPU 容器：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu --help</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用 GPU 容器（主机上需要 <a href=\"https://github.com/NVIDIA/nvidia-docker\" target=\"_blank\" rel=\"noopener\">nvidia-docker</a>）：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --runtime=nvidia -it --rm -v $PWD:/data --ipc=host mapbox/robosat:latest-gpu train --model /data/model.toml --dataset /data/dataset.toml --workers 4</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-数据准备工作\"><a href=\"#2-数据准备工作\" class=\"headerlink\" title=\"2. 数据准备工作\"></a>2. 数据准备工作</h2><h3 id=\"2-1-建筑物轮廓矢量数据\"><a href=\"#2-1-建筑物轮廓矢量数据\" class=\"headerlink\" title=\"2.1 建筑物轮廓矢量数据\"></a>2.1 建筑物轮廓矢量数据</h3><p>​ 已有的建筑物轮廓矢量数据用来作为建筑物提取的训练数据源。可以有两种方式获取：</p>\n<ul>\n<li>OSM 数据源，可以在 <a href=\"http://download.geofabrik.de/\" target=\"_blank\" rel=\"noopener\">geofabrik</a> 获取，通过 <a href=\"https://github.com/osmcode/osmium-tool\" target=\"_blank\" rel=\"noopener\">osmium</a> 和 <a href=\"https://github.com/mapbox/robosat\" target=\"_blank\" rel=\"noopener\">robosat</a> 工具<a href=\"https://www.openstreetmap.org/user/daniel-j-h/diary/44321\" target=\"_blank\" rel=\"noopener\">进行处理</a>。</li>\n<li>自有数据源。通过 <a href=\"https://qgis.org/en/site/\" target=\"_blank\" rel=\"noopener\">QGIS</a> 或 ArcMap 等工具，加载遥感影像底图，描述的建筑物轮廓 Shapefile 数据。</li>\n</ul>\n<p>​ <strong>本文使用第二种数据来源，并已<a href=\"https://github.com/geocompass/robosat_buildings_training/tree/master/shp_data\" target=\"_blank\" rel=\"noopener\">开源数据源</a>，开源的矢量数据覆盖厦门核心区。</strong></p>\n<p>​ <strong>考虑到使用个人电脑没有 CUDA 加速训练成本较高，本文使用 <a href=\"https://github.com/geocompass/robosat_buildings_training/blob/master/shp_data/buia_xiamen_min_shp.zip\" target=\"_blank\" rel=\"noopener\">buia_xiamen_min_shp</a>，包含厦门核心区部分区域，共 5679 个建筑物轮廓。在 Docker 配置为 处理器(<code>CPU</code>) 4 核、内存(<code>RAM</code>)16GB、交换内存(<code>Swap</code>)3GB 时，训练时间大约 2.5 小时。</strong></p>\n<p><img src=\"https://github.com/geocompass/robosat_buildings_training/blob/master/img/buia_xiamen_preview.jpg\" alt=\"训练区矢量数据预览\"></p>\n<h3 id=\"2-2-获取建筑物轮廓-geojson-数据\"><a href=\"#2-2-获取建筑物轮廓-geojson-数据\" class=\"headerlink\" title=\"2.2 获取建筑物轮廓 geojson 数据\"></a>2.2 获取建筑物轮廓 geojson 数据</h3><p>​ 通过在线工具 <a href=\"https://mapshaper.org/\" target=\"_blank\" rel=\"noopener\">mapshaper</a>，将 shapefile 数据转换为 geojson 数据。</p>\n<h3 id=\"2-3-提取训练区覆盖的瓦片行列号\"><a href=\"#2-3-提取训练区覆盖的瓦片行列号\" class=\"headerlink\" title=\"2.3 提取训练区覆盖的瓦片行列号\"></a>2.3 提取训练区覆盖的瓦片行列号</h3><p>​ 使用 robosat 的 <a href=\"https://github.com/mapbox/robosat#rs-cover\" target=\"_blank\" rel=\"noopener\">cover</a> 命令，即可获取当前训练区矢量数据覆盖的瓦片行列号，并使用 csv 文件存储。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu cover  --zoom 18 /data/buildings.json /data/buildings.tiles</span><br></pre></td></tr></table></figure>\n\n<p><code>cover</code> 命令的参数介绍：</p>\n<blockquote>\n<p>usage: <code>./rs cover [-h] --zoom ZOOM features out</code></p>\n<ul>\n<li>positional arguments:<ul>\n<li><code>features</code> path to GeoJSON features</li>\n<li><code>out</code> path to csv file to store tiles in</li>\n</ul>\n</li>\n<li>optional arguments:<ul>\n<li><code>-h</code>, –help show this help message and exit</li>\n<li><code>--zoom ZOOM</code> zoom level of tiles (default: None)</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>这里是获取在 18 级下训练区覆盖的瓦片行列号。18 级是国内地图通用的最大级别，如果有国外更清晰数据源，可设置更高地图级别。</p>\n<p>​ cover 工具对训练区矢量数据计算的瓦片行列号使用的是通用的 WGS84-&gt;Web 墨卡托投影坐标系。</p>\n<blockquote>\n<p>小知识：</p>\n<ul>\n<li><code>$PWD:/data</code> 是将当前路径映射为 docker 中的 <code>/data</code> 路径。</li>\n<li>在新版 robosat 的 docker 安装包中，将 <code>./rs</code> 命令行工具对应为<code>docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu</code> 命令。</li>\n<li>docker 版 robosat ，以命令行方式执行，无法生成类似 nginx 的 docker 服务，所以执行完成后立即销毁了 docker 的 container。</li>\n</ul>\n</blockquote>\n<h3 id=\"2-4-下载训练区遥感影像瓦片\"><a href=\"#2-4-下载训练区遥感影像瓦片\" class=\"headerlink\" title=\"2.4 下载训练区遥感影像瓦片\"></a>2.4 下载训练区遥感影像瓦片</h3><p>​ 使用 robosat 的 <a href=\"https://github.com/mapbox/robosat#rs-download\" target=\"_blank\" rel=\"noopener\">download</a> 工具，即可获取当前训练区矢量数据覆盖的遥感影像，下载的瓦片通过 2.3 节中的<strong>buildings.tiles</strong> 确定。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu download http://ditu.google.cn/maps/vt/lyrs=s&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;z=&#123;z&#125; /data/buildings.tiles /data/tiles</span><br></pre></td></tr></table></figure>\n\n<p>​ <code>download</code> 命令的参数介绍：</p>\n<blockquote>\n<p>usage: <code>./rs download [-h] [--ext EXT] [--rate RATE] url tiles out</code></p>\n<ul>\n<li>positional arguments:<ul>\n<li><code>url</code> endpoint with {z}/{x}/{y} variables to fetch image tiles from</li>\n<li><code>tiles</code> path to .csv tiles file</li>\n<li><code>out</code> path to slippy map directory for storing tiles</li>\n</ul>\n</li>\n<li>optional arguments:<ul>\n<li><code>-h</code>, –help show this help message and exit</li>\n<li><code>--ext EXT</code> file format to save images in (default: webp)</li>\n<li><code>--rate RATE</code> rate limit in max. requests per second (default: 10)</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>​ 这里介绍几个常用的 Web 墨卡托投影的（WGS84 坐标系）遥感影像数据源：</p>\n<blockquote>\n<ul>\n<li><a href=\"https://ditu.google.cn/\" target=\"_blank\" rel=\"noopener\">谷歌地图 CN 影像</a>：<a href=\"http://ditu.google.cn/maps/vt/lyrs=s&amp;x={x}&amp;y={y}&amp;z={z}\" target=\"_blank\" rel=\"noopener\">http://ditu.google.cn/maps/vt/lyrs=s&amp;x={x}&amp;y={y}&amp;z={z}</a></li>\n<li><a href=\"https://map.tianditu.gov.cn/\" target=\"_blank\" rel=\"noopener\">天地图影像</a>：<a href=\"https://t4.tianditu.gov.cn/DataServer?T=img_w&amp;x={x}&amp;y={y}&amp;l={z}&amp;tk=2ce94f67e58faa24beb7cb8a09780552\" target=\"_blank\" rel=\"noopener\">https://t4.tianditu.gov.cn/DataServer?T=img_w&amp;x={x}&amp;y={y}&amp;l={z}&amp;tk=2ce94f67e58faa24beb7cb8a09780552</a></li>\n<li><a href=\"https://server.arcgisonline.com/arcgis/rest/services/World_Imagery/MapServer?f=jsapi\" target=\"_blank\" rel=\"noopener\">ArcGIS Online 影像</a>：<a href=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\" target=\"_blank\" rel=\"noopener\">https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}</a></li>\n<li><a href=\"https://api.mapbox.com/styles/v1/mapbox/satellite-v9.html?title=true&access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4M29iazA2Z2gycXA4N2pmbDZmangifQ.-g_vE53SD2WrJ6tFX7QHmA#0.75/29.3/-124.8\" target=\"_blank\" rel=\"noopener\">MapBox 影像</a>：<a href=\"https://api.mapbox.com/v4/mapbox.satellite/{z}/{x}/{y}@2x.png?sku=101KOLcQaDwG1&amp;access_token=[token]\" target=\"_blank\" rel=\"noopener\">https://api.mapbox.com/v4/mapbox.satellite/{z}/{x}/{y}@2x.png?sku=101KOLcQaDwG1&amp;access_token=[token]</a></li>\n</ul>\n</blockquote>\n<p>​ 几种遥感影像数据源的比较：</p>\n<ul>\n<li><p>从访问速度来看，天地图&gt;谷歌&gt;ArcGIS&gt;Mapbox。</p>\n</li>\n<li><p>从遥感影像的质量来说，总体来说：</p>\n<ul>\n<li>城市地区：谷歌=ArcGIS&gt;天地图&gt;Mapbox</li>\n<li>农村地图：谷歌&gt;天地图&gt;ArcGIS&gt;Mapbox</li>\n</ul>\n</li>\n<li><p>层级覆盖：谷歌&gt;天地图&gt;ArcGIS&gt;Mapbox</p>\n</li>\n</ul>\n<p>​ 不同影像数据源的质量不能一概而论，由于传感器不同、过境时间不同等因素，不同地区的影像数据源质量均不同，建议使用 QGIS 加载训练区位置的影像对比选择。</p>\n<h3 id=\"2-5-制作训练区矢量数据蒙版标记\"><a href=\"#2-5-制作训练区矢量数据蒙版标记\" class=\"headerlink\" title=\"2.5 制作训练区矢量数据蒙版标记\"></a>2.5 制作训练区矢量数据蒙版标记</h3><p>​ 使用 2.2 节中制作的 geojson 数据，通过 robosat 的 <a href=\"https://github.com/mapbox/robosat#rs-rasterize\" target=\"_blank\" rel=\"noopener\">rasterize</a> 工具可制作训练区矢量数据的蒙版标记数据。蒙版标记数据与瓦片数据一一相对应，使用同样的 <strong>buildings.tiles</strong> 瓦片列表产生。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu rasterize --dataset /data/dataset-building.toml --zoom 18 --size 256 /data/buildings.json /data/buildings.tiles /data/masks</span><br></pre></td></tr></table></figure>\n\n<p>​ <code>rasterise</code> 命令的参数介绍：</p>\n<blockquote>\n<p>usage: <code>./rs rasterize [-h] --dataset DATASET --zoom ZOOM [--size SIZE] features tiles out</code></p>\n<ul>\n<li><p>positional arguments:</p>\n<ul>\n<li><code>features</code> path to GeoJSON features file</li>\n<li><code>tiles</code> path to .csv tiles file</li>\n<li><code>out</code> directory to write converted images</li>\n</ul>\n</li>\n<li><p>optional arguments:<br><code>-h</code>, <code>--help</code> show this help message and exit<br><code>--dataset DATASET</code> path to dataset configuration file (default: None)<br><code>--zoom ZOOM</code> zoom level of tiles (default: None)<br><code>--size SIZE</code> size of rasterized image tiles in pixels (default: 512)</p>\n</li>\n</ul>\n</blockquote>\n<p>这里使用到了 <code>dataset-building.toml</code> 配置文件，文件中配置了瓦片地图路径、分类方式、蒙版标记的颜色等信息。示例配置可以查看官方示例文件 <a href=\"https://github.com/mapbox/robosat/blob/master/config/dataset-parking.toml\" target=\"_blank\" rel=\"noopener\">dataset-parking.toml</a> 。本训练中用到的 <a href=\"https://github.com/geocompass/robosat_buildings_training/dataset-building.toml\" target=\"_blank\" rel=\"noopener\">dataset-building.toml</a> 的配置内容如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Configuration related to a specific dataset.</span></span><br><span class=\"line\"><span class=\"comment\"># For syntax see: https://github.com/toml-lang/toml#table-of-contents</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Dataset specific common attributes.</span></span><br><span class=\"line\"><span class=\"section\">[common]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># The slippy map dataset's base directory.</span></span><br><span class=\"line\">  dataset = '/Users/wucan/Document/robosat/tiles/'</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Human representation for classes.</span></span><br><span class=\"line\">  classes = ['background', 'buildings']</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Color map for visualization and representing classes in masks.</span></span><br><span class=\"line\">  <span class=\"comment\"># Note: available colors can be found in `robosat/colors.py`</span></span><br><span class=\"line\">  colors  = ['denim', 'orange']</span><br></pre></td></tr></table></figure>\n\n<p>​ 配置文档中，最重要的是配置 <code>dataset</code> 目录，也就是上一步中下载的遥感影像瓦片路径。制作的蒙版标记效果如下图。</p>\n<p><img src=\"https://github.com/geocompass/robosat_buildings_training/blob/master/img/mask.gif\" alt=\"mask\"></p>\n<p>​ 至此，训练和建模所需的瓦片和蒙版标记已经全部准备完，分别在 <code>tiles</code> 和 <code>masks</code> 目录中。</p>\n<h2 id=\"3-训练和建模\"><a href=\"#3-训练和建模\" class=\"headerlink\" title=\"3. 训练和建模\"></a>3. 训练和建模</h2><h3 id=\"3-1-分配训练数据、验证数据、评估数据\"><a href=\"#3-1-分配训练数据、验证数据、评估数据\" class=\"headerlink\" title=\"3.1 分配训练数据、验证数据、评估数据\"></a>3.1 分配训练数据、验证数据、评估数据</h3><p>​ RoboSat 分割模型是一个完全卷积的神经网络，需要将上一步准备好的数据集拆分为三部分，分别为<code>训练数据集</code> 、<code>验证数据集</code>、<code>评估数据集</code>，比例分别为 80%、10%、10%。每一部分的数据集中，都包含影像瓦片和蒙版标记瓦片。</p>\n<ul>\n<li><p>训练数据集：a training dataset on which we train the model on</p>\n</li>\n<li><p>验证数据集：a validation dataset on which we calculate metrics on after training</p>\n</li>\n<li><p>评估数据集：a hold-out evaluation dataset if you want to do hyper-parameter tuning</p>\n<p>将步骤 2 中的数据进行随机分配的过程非常简单：</p>\n</li>\n<li><p>新建三个 csv 文件： <code>csv_training.tiles</code> 、<code>csv_validation.tiles</code>、 <code>csv_evaluation.tiles</code></p>\n</li>\n<li><p>将 <code>buildings.tiles</code> 中的瓦片列表随机按 80%、10%、10% 比例进行拷贝与粘贴。注意三个文件间的瓦片列表内容不能重复。</p>\n</li>\n</ul>\n<p>​ 使用 RoboSat 中的 <a href=\"https://github.com/mapbox/robosat#rs-subset\" target=\"_blank\" rel=\"noopener\">subset</a> 命令，将 <code>tiles</code> 和 <code>masks</code> 中的瓦片和蒙版按照上面三个 csv 文件的瓦片列表分配进行组织影像瓦片和蒙版标记数据。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 准备训练数据集</span></span><br><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/tiles/ /data/csv_training.tiles /data/dataset/training/images</span><br><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/masks/ /data/csv_training.tiles /data/dataset/training/labels</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 准备验证数据集</span></span><br><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/tiles/ /data/csv_validation.tiles /data/dataset/validation/images</span><br><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/masks/ /data/csv_validation.tiles /data/dataset/validation/labels</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 准备评估数据集</span></span><br><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/tiles/ /data/csv_evaluation.tiles /data/dataset/evaluation/images</span><br><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu subset /data/masks/ /data/csv_evaluation.tiles /data/dataset/evaluation/labels</span><br></pre></td></tr></table></figure>\n\n<p>​ <code>subset</code> 命令的参数介绍：</p>\n<blockquote>\n<p>usage: <code>./rs subset [-h] images tiles out</code></p>\n<ul>\n<li><p>positional arguments:</p>\n<ul>\n<li><code>images</code> directory to read slippy map image tiles from for filtering</li>\n<li><code>tiles</code> csv to filter images by</li>\n<li><code>out</code> directory to save filtered images to</li>\n</ul>\n</li>\n<li><p>optional arguments:</p>\n<ul>\n<li><code>-h</code>, <code>--help</code> show this help message and exit</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>​ 分类完成以后，将会生成 <code>/data/dataset</code> 目录，目录结构如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">dataset</span><br><span class=\"line\">|  training</span><br><span class=\"line\">|  |  images</span><br><span class=\"line\">|  |  labels</span><br><span class=\"line\">|  validataion</span><br><span class=\"line\">|  |  images</span><br><span class=\"line\">|  |  labels</span><br><span class=\"line\">|  evaluation</span><br><span class=\"line\">|  |  images</span><br><span class=\"line\">|  |  labels</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-权重计算\"><a href=\"#3-2-权重计算\" class=\"headerlink\" title=\"3.2 权重计算\"></a>3.2 权重计算</h3><p>​ 因为前景和背景在数据集中分布不均，可以使用 RoboSat 中的 <a href=\"https://github.com/mapbox/robosat#rs-weights\" target=\"_blank\" rel=\"noopener\">weights</a> 命令，在模型训练之前计算一下每个类的分布。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu weights --dataset /data/dataset-building-weights.toml</span><br></pre></td></tr></table></figure>\n\n<p>​ <code>weights</code> 命令的参数如下：</p>\n<blockquote>\n<p>usage: <code>./rs weights [-h] --dataset DATASET</code></p>\n<ul>\n<li>optional arguments:<ul>\n<li><code>-h</code>, <code>--help</code> show this help message and exit</li>\n<li><code>--dataset DATASET</code> path to dataset configuration file (default: None)</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>​ 这里，用到了<code>dataset-building-weights.toml</code> ，是将前面步骤中的 <code>dataset-building.toml</code> 瓦片路径修改为包含训练数据集 <code>dataset</code> 的路径。执行权重计算命令后，得到权重为：<code>values = [1.653415, 5.266637]</code> 。将其追加到 <code>dataset-building-weights.toml</code> 文件中，结果如下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Configuration related to a specific dataset.</span><br><span class=\"line\"># For syntax see: https://github.com/toml-lang/toml#table-of-contents</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># Dataset specific common attributes.</span><br><span class=\"line\">[common]</span><br><span class=\"line\"></span><br><span class=\"line\">  # The slippy map dataset&apos;s base directory.</span><br><span class=\"line\">  dataset = &apos;/data/dataset&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">  # Human representation for classes.</span><br><span class=\"line\">  classes = [&apos;background&apos;, &apos;buildings&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">  # Color map for visualization and representing classes in masks.</span><br><span class=\"line\">  # Note: available colors can be found in `robosat/colors.py`</span><br><span class=\"line\">  colors  = [&apos;denim&apos;, &apos;orange&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\"># Dataset specific class weights computes on the training data.</span><br><span class=\"line\"># Needed by &apos;mIoU&apos; and &apos;CrossEntropy&apos; losses to deal with unbalanced classes.</span><br><span class=\"line\"># Note: use `./rs weights -h` to compute these for new datasets.</span><br><span class=\"line\">[weights]</span><br><span class=\"line\">  values = [1.653415, 5.266637]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-开始训练\"><a href=\"#3-3-开始训练\" class=\"headerlink\" title=\"3.3 开始训练\"></a>3.3 开始训练</h3><p>​ RoboSat 使用 <a href=\"https://github.com/mapbox/robosat#rs-train\" target=\"_blank\" rel=\"noopener\">train</a> 命令进行训练。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu train --model /data/model-unet.toml --dataset /data/dataset-building-weights.toml</span><br></pre></td></tr></table></figure>\n\n<p>​ <code>train</code> 命令的参数如下：</p>\n<blockquote>\n<p>usage: <code>./rs train [-h] --model MODEL --dataset DATASET [--checkpoint CHECKPOINT] [--resume RESUME] [--workers WORKERS]</code></p>\n<ul>\n<li><p>positional arguments:</p>\n<ul>\n<li><code>--model MODEL</code> path to model configuration file (default: None)</li>\n<li><code>--dataset DATASET</code> path to dataset configuration file (default: None)</li>\n</ul>\n</li>\n<li><p>optional arguments:</p>\n<ul>\n<li><code>-h</code>, `–help show this help message and exit</li>\n<li><code>--checkpoint CHECKPOINT</code> path to a model checkpoint (to retrain) (default: None)</li>\n<li><code>--resume RESUME</code> resume training or fine-tuning (if checkpoint) (default: False)</li>\n<li><code>--workers WORKERS</code> number of workers pre-processi ng images (default: 0)</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>​ 这里多了一个配置文件 <code>model-unet.toml</code> ，这个配置文件主要用来配置训练过程中的参数，包括是否启用 CUDA 、训练批次大小、影像瓦片的像素大小、检查点存储路径等。官方给出了<a href=\"https://github.com/mapbox/robosat/blob/master/config/model-unet.toml\" target=\"_blank\" rel=\"noopener\">示例配置文件</a>，根据本实验的情况做了修改如下，配置如下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Configuration related to a specific model.</span><br><span class=\"line\"># For syntax see: https://github.com/toml-lang/toml#table-of-contents</span><br><span class=\"line\"></span><br><span class=\"line\"># Model specific common attributes.</span><br><span class=\"line\">[common]</span><br><span class=\"line\"></span><br><span class=\"line\">  # Use CUDA for GPU acceleration.</span><br><span class=\"line\">  cuda       = false</span><br><span class=\"line\"></span><br><span class=\"line\">  # Batch size for training.</span><br><span class=\"line\">  batch_size = 2</span><br><span class=\"line\"></span><br><span class=\"line\">  # Image side size in pixels.</span><br><span class=\"line\">  image_size = 256</span><br><span class=\"line\"></span><br><span class=\"line\">  # Directory where to save checkpoints to during training.</span><br><span class=\"line\">  checkpoint = &apos;/data/checkpoint/&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># Model specific optimization parameters.</span><br><span class=\"line\">[opt]</span><br><span class=\"line\"></span><br><span class=\"line\">  # Total number of epochs to train for.</span><br><span class=\"line\">  epochs     = 10</span><br><span class=\"line\"></span><br><span class=\"line\">  # Learning rate for the optimizer.</span><br><span class=\"line\">  lr         = 0.01</span><br><span class=\"line\"></span><br><span class=\"line\">  # Loss function name (e.g &apos;Lovasz&apos;, &apos;mIoU&apos; or &apos;CrossEntropy&apos;)</span><br><span class=\"line\">  loss = &apos;Lovasz&apos;</span><br></pre></td></tr></table></figure>\n\n<p>​ RoboSat 会进行多次迭代训练，每次迭代训练都会保存检查点(checkpoint)和各项指标等。其中，训练日志例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">--- Hyper Parameters on Dataset: /data/dataset ---</span><br><span class=\"line\">Batch Size:\t 2</span><br><span class=\"line\">Image Size:\t 256</span><br><span class=\"line\">Learning Rate:\t 0.0001</span><br><span class=\"line\">Loss function:\t Lovasz</span><br><span class=\"line\">Weights :\t [1.644471, 5.409126]</span><br><span class=\"line\">---</span><br><span class=\"line\">Epoch: 1/10</span><br><span class=\"line\">Train    loss: 0.3190, mIoU: 0.410, buildings IoU: 0.017, MCC: -0.002</span><br><span class=\"line\">Validate loss: 0.3171, mIoU: 0.405, buildings IoU: 0.000, MCC: nan</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">Epoch: 10/10</span><br><span class=\"line\">Train    loss: 0.2693, mIoU: 0.528, buildings IoU: 0.229, MCC: 0.330</span><br><span class=\"line\">Validate loss: 0.2880, mIoU: 0.491, buildings IoU: 0.167, MCC: 0.262</span><br></pre></td></tr></table></figure>\n\n<p>​ 可以选择最好的训练结果，保留其检查点( <code>checkpoint-***.pth</code> )，进入下一步 <code>predict</code>。一般来说，最后一个检查点效果最好。</p>\n<h2 id=\"4-预测\"><a href=\"#4-预测\" class=\"headerlink\" title=\"4. 预测\"></a>4. 预测</h2><h3 id=\"4-1-准备预测区域数据\"><a href=\"#4-1-准备预测区域数据\" class=\"headerlink\" title=\"4.1 准备预测区域数据\"></a>4.1 准备预测区域数据</h3><p>​ RoboSat 仅支持从影像瓦片中提取建筑物，不支持从任意的 jpg 图片中提取。所以我们需要先准备预测区域的瓦片数据。</p>\n<p>​ 通过 <a href=\"http://geojson.io/\" target=\"_blank\" rel=\"noopener\">geojson.io</a> 绘制想要提取建筑物的范围，使用矩形框即可。将自动生成的 geojson 保存为 <code>predict_test.json</code>。</p>\n<p>​ 通过 2.3 中的 <code>cover</code> 命令，获取待提取范围的瓦片列表 csv 文件，保存到 <code>buildings_predict.tiles</code> 文件中。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu cover  --zoom 18 /data/shp_data/predict_test.json /data/buildings_predict.tiles</span><br></pre></td></tr></table></figure>\n\n<p>​ 使用 2.4 中的 <code>download</code> 命令，下载待提取范围的影像瓦片，保存到 <code>images_predict</code> 文件夹中。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu download https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/&#123;z&#125;/&#123;y&#125;/&#123;x&#125; /data/buildings_predict.tiles /data/images_predict</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://github.com/geocompass/robosat_buildings_training/blob/master/img/predict_region_geojson.jpg\" alt=\"预测区域的geojson\"></p>\n<h3 id=\"4-2-预测待提取建筑物概率\"><a href=\"#4-2-预测待提取建筑物概率\" class=\"headerlink\" title=\"4.2 预测待提取建筑物概率\"></a>4.2 预测待提取建筑物概率</h3><p>​ 使用保存的检查点来（<code>checkpint</code>）预测图像中每个像素的分割概率，这些分割概率表示每个像素是建筑物还是背景的可能性，然后可以将这些概率转换为离散的分割掩模。</p>\n<p>​ 通过 RoboSat 的 <a href=\"https://github.com/mapbox/robosat#rs-predict\" target=\"_blank\" rel=\"noopener\">predict</a> 命令，将待预测区域的建筑物（ <code>images_predict</code> ）提取为分割概率（<code>predict_segmentation-probabilities</code>）。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it -d --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu predict --tile_size 256 --model /data/model-unet.toml --dataset /data/dataset-building.toml --checkpoint /data/checkpoint/checkpoint-00010-of-00010.pth /data/images_predict /data/predict_segmentation-probabilities</span><br></pre></td></tr></table></figure>\n\n<p>​ <code>predict</code> 命令的参数如下：</p>\n<blockquote>\n<p>usage: <code>./rs predict [-h] [--batch_size BATCH_SIZE] --checkpoint CHECKPOINT [--overlap OVERLAP] --tile_size TILE_SIZE [--workers WORKERS] --model MODEL --dataset DATASET tiles probs</code></p>\n<ul>\n<li><p>positional arguments:</p>\n<ul>\n<li><code>tiles</code> directory to read slippy map image tiles from</li>\n<li><code>probs</code> directory to save slippy map probability masks to</li>\n</ul>\n</li>\n<li><p>optional arguments:</p>\n<ul>\n<li><code>-h</code>, <code>--help show this help message and exit</code></li>\n<li><code>--batch_size BATCH_SIZE</code> images per batch (default: 1)</li>\n<li><code>--checkpoint CHECKPOINT</code> model checkpoint to load (default: None)</li>\n<li><code>--overlap OVERLAP</code> tile pixel overlap to predict on (default: 32)</li>\n<li><code>--tile_size TILE_SIZE</code> tile size for slippy map tiles (default: None)</li>\n<li><code>--workers WORKERS</code> number of workers pre-processing images (default: 0)</li>\n<li><code>--model MODEL</code> path to model configuration file (default: None)</li>\n<li><code>--dataset DATASET</code> path to dataset configuration file (default: None)</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p><img src=\"https://github.com/geocompass/robosat_buildings_training/blob/master/img/predit_probabilities.gif\" alt=\"预测建筑物提取概率结果\"></p>\n<h3 id=\"4-3-预测概率转换为建筑物掩模\"><a href=\"#4-3-预测概率转换为建筑物掩模\" class=\"headerlink\" title=\"4.3 预测概率转换为建筑物掩模\"></a>4.3 预测概率转换为建筑物掩模</h3><p>​ 通过 RoboSat 的 <a href=\"https://github.com/mapbox/robosat#rs-masks\" target=\"_blank\" rel=\"noopener\">masks</a> 命令，将上一步中的建筑物预测概率结果转换为建筑物掩模（<code>masks</code>），保存到 <code>predict_segmentation-masks</code> 文件夹中。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it -d --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu masks /data/predict_segmentation-masks /data/predict_segmentation-probabilities</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>usage: <code>./rs masks [-h] [--weights WEIGHTS [WEIGHTS ...]] masks probs [probs ...]</code></p>\n<ul>\n<li><p>positional arguments:</p>\n<ul>\n<li><code>masks</code> slippy map directory to save masks to</li>\n<li><code>probs</code> slippy map directories with class probabilities</li>\n</ul>\n</li>\n<li><p>optional arguments:</p>\n<ul>\n<li><code>-h</code>, <code>--help</code> show this help message and exit</li>\n<li><code>--weights WEIGHTS [WEIGHTS ...]</code> weights for weighted average soft-voting (default:<br>None)</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p><img src=\"https://github.com/geocompass/robosat_buildings_training/blob/master/img/predit_masks.jpg\" alt=\"预测建筑物提取掩模结果\"></p>\n<h3 id=\"4-4-建筑物掩模转换为-geojson\"><a href=\"#4-4-建筑物掩模转换为-geojson\" class=\"headerlink\" title=\"4.4 建筑物掩模转换为 geojson\"></a>4.4 建筑物掩模转换为 geojson</h3><p>​ 通过 RoboSat 的 <a href>features</a> 命令，将上一步中的建筑物掩模转换为 geojson，保存在 <code>predict_geojson_features</code> 文件夹中。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu features /data/predict_segmentation-masks /data/predict_geojson_features</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>usage: <code>./rs features [-h] --type {parking} --dataset DATASET masks out</code></p>\n<ul>\n<li><p>positional arguments:</p>\n<ul>\n<li><code>masks</code> slippy map directory with segmentation masks</li>\n<li><code>out</code> path to GeoJSON file to store features in</li>\n</ul>\n</li>\n<li><p>optional arguments:</p>\n<ul>\n<li><code>-h</code>, <code>--help</code> show this help message and exit</li>\n<li><code>--type {parking}</code> type of feature to extract (default: None)</li>\n<li><code>--dataset DATASET</code> path to dataset configuration file (default: None)</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>（目前 <code>features</code> 命令中对 <code>--type</code> 设置有 bug，无法正常执行。）</p>\n<h3 id=\"4-5-合并掩模分割的-geojson\"><a href=\"#4-5-合并掩模分割的-geojson\" class=\"headerlink\" title=\"4.5 合并掩模分割的 geojson\"></a>4.5 合并掩模分割的 geojson</h3><p>​ 通过 RoboSat 的 <a href=\"https://github.com/mapbox/robosat#rs-merge\" target=\"_blank\" rel=\"noopener\">merge</a> 命令，将上一步中生成的分割的 geojson 要素进行合并，结果保存在 <code>predict_geojson_merge</code>文件夹中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it --rm -v $PWD:/data --ipc=host --network=host mapbox/robosat:latest-cpu features /data/predict_geojson /data/predict_geojson_merge</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>usage: <code>./rs merge [-h] --threshold THRESHOLD features out</code></p>\n<ul>\n<li><p>positional arguments:</p>\n<ul>\n<li><code>features</code> GeoJSON file to read features from</li>\n<li><code>out</code> path to GeoJSON to save merged features to</li>\n</ul>\n</li>\n<li><p>optional arguments:</p>\n<ul>\n<li><code>-h</code>, <code>--help</code> show this help message and exit</li>\n<li><code>--threshold THRESHOLD</code> minimum distance to adjacent features, in m (default:<br>None)</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjzl7zsue0000owuwabvk6uis","category_id":"cjzl7zsul0002owuwzb50cnd3","_id":"cjzl7zsuq0007owuw9vxlcxif"},{"post_id":"cjzl7zsuk0001owuwj1fnezae","category_id":"cjzl7zsuo0004owuw8n06yfch","_id":"cjzl7zsur0009owuwlnfsc4i5"},{"post_id":"cjzl7zsuw000aowuwg4x27cpj","category_id":"cjzl7zsux000bowuwmmhlopji","_id":"cjzl7zsuy000eowuwfeh4d1lg"}],"PostTag":[{"post_id":"cjzl7zsue0000owuwabvk6uis","tag_id":"cjzl7zsun0003owuwh06kt7i8","_id":"cjzl7zsup0006owuwie5zegs8"},{"post_id":"cjzl7zsuk0001owuwj1fnezae","tag_id":"cjzl7zsuo0005owuwv14sc8wd","_id":"cjzl7zsuq0008owuwd8a28jy3"},{"post_id":"cjzl7zsuw000aowuwg4x27cpj","tag_id":"cjzl7zsux000cowuwtvaydf1v","_id":"cjzl7zsuy000dowuwntt7a8lq"}],"Tag":[{"name":"介绍","_id":"cjzl7zsun0003owuwh06kt7i8"},{"name":"写作","_id":"cjzl7zsuo0005owuwv14sc8wd"},{"name":"大数据","_id":"cjzl7zsux000cowuwtvaydf1v"}]}}
